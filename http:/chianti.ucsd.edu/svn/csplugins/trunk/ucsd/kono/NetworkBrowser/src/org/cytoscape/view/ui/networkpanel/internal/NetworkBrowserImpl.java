package org.cytoscape.view.ui.networkpanel.internal;

import static cytoscape.Cytoscape.NETWORK_CREATED;
import static cytoscape.Cytoscape.NETWORK_DESTROYED;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import javax.swing.JPanel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

import org.cytoscape.view.ui.networkpanel.NetworkBrowser;
import org.cytoscape.view.ui.networkpanel.internal.cellrenderer.NetworkImageCellRenderer;
import org.cytoscape.view.ui.networkpanel.internal.cellrenderer.NetworkTreeCellRenderer;

import com.vlsolutions.swing.docking.DockKey;

import cytoscape.CyNetwork;
import cytoscape.CyNetworkTitleChange;
import cytoscape.Cytoscape;
import cytoscape.groups.CyGroup;
import cytoscape.groups.CyGroupChangeListener;
import cytoscape.groups.CyGroupManager;
import cytoscape.groups.CyGroupChangeListener.ChangeType;
import cytoscape.view.CytoscapeDesktop;

public class NetworkBrowserImpl extends JPanel implements NetworkBrowser,
		PropertyChangeListener, CyGroupChangeListener {

	private NetworkTreeTableModel model;
	private DockKey key = new DockKey("networkBrowser");

	private static final int rowHeight = 110;

	// Inject model
	public NetworkBrowserImpl(NetworkTreeTableModel model) {
		this.model = model;
		initComponents();

		networkTreeTable.setTreeTableModel(model);
		networkTreeTable.setRootVisible(true);
		networkTreeTable.setTreeCellRenderer(new NetworkTreeCellRenderer());
		networkTreeTable.getColumn(1).setCellRenderer(
				new NetworkImageCellRenderer());
		networkTreeTable.getColumn("Network").setMinWidth(200);
		networkTreeTable.setRowHeight(rowHeight);
		
		// networkTreeTable.getColumn("Nodes").setPreferredWidth(45);
		// networkTreeTable.getColumn("Edges").setPreferredWidth(45);
		Cytoscape.getSwingPropertyChangeSupport().addPropertyChangeListener(
				this);
		CyGroupManager.addGroupChangeListener(this);

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		commandBar = new javax.swing.JToolBar();
		selectButton = new javax.swing.JButton();
		newButton = new javax.swing.JButton();
		deleteButton = new javax.swing.JButton();
		commandSeparator = new javax.swing.JToolBar.Separator();
		thumbnailButton = new javax.swing.JToggleButton();
		networkTableScrollPane = new javax.swing.JScrollPane();
		networkTreeTable = new org.jdesktop.swingx.JXTreeTable();

		commandBar.setFloatable(false);
		commandBar.setRollover(true);
		commandBar.setMargin(new java.awt.Insets(0, 10, 0, 10));

		selectButton.setText("Select");
		selectButton.setFocusable(false);
		selectButton
				.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		selectButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
		selectButton.setPreferredSize(new java.awt.Dimension(50, 50));
		selectButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		selectButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				selectButtonActionPerformed(evt);
			}
		});
		commandBar.add(selectButton);

		newButton.setText("New");
		newButton.setFocusable(false);
		newButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		newButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		newButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				newButtonActionPerformed(evt);
			}
		});
		commandBar.add(newButton);

		deleteButton.setText("Delete");
		deleteButton.setFocusable(false);
		deleteButton
				.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		deleteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		deleteButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				deleteButtonActionPerformed(evt);
			}
		});
		commandBar.add(deleteButton);
		commandBar.add(commandSeparator);

		thumbnailButton.setText("Show Icon");
		thumbnailButton.setFocusable(false);
		thumbnailButton
				.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		thumbnailButton
				.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		thumbnailButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				thumbnailButtonActionPerformed(evt);
			}
		});
		commandBar.add(thumbnailButton);

		networkTableScrollPane.setViewportView(networkTreeTable);

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
				this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(
				networkTableScrollPane,
				org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 423,
				Short.MAX_VALUE).add(commandBar,
				org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 423,
				Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(
				layout.createSequentialGroup().add(commandBar,
						org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45,
						org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(
								org.jdesktop.layout.LayoutStyle.RELATED).add(
								networkTableScrollPane,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								591, Short.MAX_VALUE)));
	}// </editor-fold>

	private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void thumbnailButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	// Variables declaration - do not modify
	private javax.swing.JToolBar commandBar;
	private javax.swing.JToolBar.Separator commandSeparator;
	private javax.swing.JButton deleteButton;
	private javax.swing.JScrollPane networkTableScrollPane;
	private org.jdesktop.swingx.JXTreeTable networkTreeTable;
	private javax.swing.JButton newButton;
	private javax.swing.JButton selectButton;
	private javax.swing.JToggleButton thumbnailButton;

	public void propertyChange(PropertyChangeEvent e) {
		try {

			if (e.getPropertyName() == NETWORK_CREATED) {

				model.addNetwork((String) e.getNewValue(), (String) e
						.getOldValue());
				
				networkTreeTable.collapsePath(new TreePath(new TreeNode[] { model.getRoot() }));

				networkTreeTable.updateUI();
//				TreePath path = new TreePath(dmtn.getPath());
//				networkTreeTable.expandPath(path);
//				networkTreeTable.scrollPathToVisible(path);
				networkTreeTable.doLayout();
				
				
				

			} else if (e.getPropertyName() == NETWORK_DESTROYED) {
				model.removeNetwork((String) e.getNewValue());
			} else if (e.getPropertyName() == CytoscapeDesktop.NETWORK_VIEW_FOCUSED) {
				if (e.getSource() != this)
					model.focusNetworkNode((String) e.getNewValue());
			} else if (e.getPropertyName() == Cytoscape.NETWORK_TITLE_MODIFIED) {
				CyNetworkTitleChange cyNetworkTitleChange = (CyNetworkTitleChange) e
						.getNewValue();
				String newID = cyNetworkTitleChange.getNetworkIdentifier();
				// String newTitle = cyNetworkTitleChange.getNetworkTitle();
				CyNetwork _network = Cytoscape.getNetwork(newID);
				// Network "0" is the default and does not appear in the netowrk
				// panel
				if (_network != null && !_network.getIdentifier().equals("0"))
					model.updateTitle(_network);
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public Object getModel() {
		// TODO Auto-generated method stub
		return null;
	}

	public void groupChanged(CyGroup group, ChangeType change) {
		if (change == CyGroupChangeListener.ChangeType.GROUP_CREATED) {
			model.groupCreated(group);

		} else if (change == CyGroupChangeListener.ChangeType.GROUP_DELETED) {
			//groupRemoved(group);
		} else if (change == CyGroupChangeListener.ChangeType.GROUP_MODIFIED) {
			//groupChanged(group);
		} else {
			System.err.println("unsupported change type: " + change);
		}
	}

}
