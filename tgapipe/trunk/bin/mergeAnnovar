#! /usr/bin/env python

import sys, os
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.append(myBinDir + "/../src")

from annovar.annovarTools import AnnTable

# Type of annotation determines columns expected in file
typeDict = {"exonic_variant_function":"gene","hg19_cg46_dropped":"filter","hg19_esp6500_all_dropped":"filter","2012_04_dropped":"filter","hg19_genomicSuperDups":"region","hg19_gwasCatalog":"region","hg19_phastConsElements46way":"region","hg19_snp135_dropped":"filter","hg19_targetScanS":"region","hg19_tfbsConsSites":"region","hg19_wgtRNA":"region","variant_function":"function","hg19_ljb_all_dropped":"filter","hg19_wgRna":"region","hg19_dgv":"region"}

nameDict = {"exonic_variant_function":"exonic_function","hg19_cg46_dropped":"hg19_cg46","hg19_esp6500_all_dropped":"esp6500_all","2012_04_dropped":"1000g2012apr_eur","hg19_genomicSuperDups":"segdup","hg19_gwasCatalog":"gwas","hg19_phastConsElements46way":"mce46way","hg19_snp135_dropped":"snp135","hg19_targetScanS":"tarbase","hg19_tfbsConsSites":"tfbs","hg19_wgtRNA":"wgtRNA","variant_function":"variant_function","hg19_ljb_all_dropped":"ljb_all","hg19_wgRna":"wgRNA","hg19_dgv":"dgv"}

def main():

    # Directory with annovar outputs
    annotationfiles = os.listdir(sys.argv[1])
    annfiledir = sys.argv[1] if sys.argv[1].endswith("/") else sys.argv[1] + "/"
    annotationfiles = [x for x in annotationfiles if not x.endswith(".log")]
    annotationfiles = [x for x in annotationfiles if not x.endswith("filtered")]
    annotationfiles = [x for x in annotationfiles if not x.endswith("invalid_input")]

    annTbl = AnnTable()
    for filename in annotationfiles:
        if typeDict.get(filename.split(".")[-1]) == None:
            raise Exception(filename + " not supported")
        if nameDict.get(filename.split(".")[-1]) == None:
            raise Exception(filename + " not supported")        
        annTbl.addAnnotation(annfiledir+filename, typeDict.get(filename.split(".")[-1]), nameDict.get(filename.split(".")[-1]))

    annTbl.printVars()

if __name__ == "__main__":
    main()
