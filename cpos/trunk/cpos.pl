#!/usr/bin/perl -w
#
# Usage: 
# 1. Analyze, generate R script) cpos.pl <ORFlist> <outdir>
# 2. Analyze, generate R, run R)  cpos.pl -run <ORFlist> <outdir>
# 3. Analyze, gen and run R, gen HTML)  cpos.pl -run -html <ORFlist> <outdir>
# 

use POSIX;
use SGD;
use Funspec;
use GeneSet;
use FeatureData;
use ChromosomeData;

use File::Basename;

my $USAGE = <<USAGE;
$0: <outputDir> <orflist|featurefiles>+ 
 -agilent 
 -html                    Generate HTML
 -run                     Run R
 -featureType [sgd|boyer] Gene feature type
 -featureFile             Gene feature file
 -org [sc|hs]             Organism
 -bkgdFile                Location of all probes
USAGE

# Parse command line args
my @newArg;

my $USE_AGILENT = 0;
my $WRITE_HTML = 0;
my $RUN_R = 0;
my $ORGANISM = "sc";
my $FEATURE_TYPE = "sgd";
my $FEATURE_FILE = $ENV{"HOME"} ."/data/SGD_features.tab";
my $BKGD_FILE = "";

my %CHROMOSOME_FILES = ( sc => $ENV{"HOME"} . "/data/sc-chromosome-data.txt",
			 hs => $ENV{"HOME"} . "/data/hs-chromosome-data.txt");


{local $arg;
 while (@ARGV)
 {
     $arg = shift;
     if($arg =~ /^-agilent$/) { $USE_AGILENT = 1 }
     elsif($arg =~ /^-html$/) { $WRITE_HTML = 1 }
     elsif($arg =~ /^-featureType$/) { $FEATURE_TYPE = lc(shift @ARGV) }
     elsif($arg =~ /^-featureFile$/) { $FEATURE_FILE = shift @ARGV }
     elsif($arg =~ /^-bkgdFile$/) { $BKGD_FILE = shift @ARGV }
     elsif($arg =~ /^-org$/) { $ORGANISM = lc(shift @ARGV) }
     elsif($arg =~ /^-run$/) { $RUN_R = 1 }
     else { push @newArg, $arg }
 }
}

die $USAGE if (scalar(@newArg) < 2);

# Global variables
my ($OUTDIR, @INPUT_FILES) = @newArg;

my $basename = fileparse($INPUT_FILES[0]);

my $BKGD_PLOT_FILE = $basename . ".bkgd.png";
my $KS_PLOT_FILE = $basename . ".pvplot.png";
my $KS_TAB_FILE = $basename . ".ks-pvalues.tab";
   
my $HTML_FILE = $OUTDIR . "/index.html";
my $R_FILE = $OUTDIR . "/" . $basename . ".R";

die "$OUTDIR does not exist\n" if(! -e $OUTDIR);


my ($features, $chrData);

if(FeatureData::typeExists($FEATURE_TYPE))
{
    print STDERR "### Initializing feature table: $FEATURE_TYPE, $FEATURE_FILE\n";
    $features = FeatureData::create($FEATURE_TYPE, $FEATURE_FILE);
}
else { print STDERR "### Bad feature type: $FEATURE_TYPE\n"; die $USAGE; }

if(exists($CHROMOSOME_FILES{$ORGANISM}))
{
    $chrData = ChromosomeData->new($CHROMOSOME_FILES{$ORGANISM});
}
else { print STDERR "### Bad organism: $ORGANISM\n"; die $USAGE; }

my @geneSets;

foreach my $in (@INPUT_FILES)
{
    print STDERR "Processing $in...\n";
    die "$in does not exist\n" if(! -e $in);
    if($in =~ /\.ORFlists$/)
    {
	push @geneSets, processORFlist($in);
    }
    else
    {
	push @geneSets, processFeatureFile($in);
    }
}

writeRcommands(\@geneSets);

if($RUN_R)
{
    print "### Running R: R CMD BATCH $R_FILE\n";
    system("R CMD BATCH $R_FILE");
}

if($WRITE_HTML)
{
    print "### Writing HTML To $HTML_FILE\n";
    writeHTML(\@geneSets);
}


sub processORFlist
{
    my ($file) = @_;
    my ($cat2orf, $orf2cat) = readORFlist($file);

    my @geneSets;
    foreach my $cat (sort keys %{$cat2orf})
    {
	next if (scalar(@{$cat2orf->{$cat}}) == 0);
	
	my $name = $cat;
	$name =~ s/[-\s\/\(\)\'\"]/\./g; # R does not like "-" characters in strings.  Replace with periods

	
	my $gs = GeneSet->new($name, $cat2orf->{$cat});
	$gs->analyze($features, $chrData);
	$gs->printData("$OUTDIR/$name.loc");
	$gs->dataFile($name . ".loc");
	
	push @geneSets, $gs;
	
	if(0) # debug stuff
	{
	    printf "mids: %s\n", join(", ", @{$gs->midPoints()});
	    printf "tels: %s\n", join(", ", @{$gs->minTelomereDist()});
	    printf "cens: %s\n", join(", ", @{$gs->centromereDist()});
	    printf "chrs: %s\n", join(", ", @{$gs->chromosomes()});
	}
    }
    return @geneSets;
}


sub processFeatureFile
{
    my ($file) = @_;

    my @genes;
    open(IN, $file) || die "Can't open $file: $!\n";
    while(<IN>)
    {
	next if (/^#/);
	chomp;
	my @F = split(/\t/);
	push @genes, $F[0] if (scalar(@F) >= 4);
    }

    $features = FeatureData::create($FEATURE_TYPE, $file);

    my $name = fileparse($file); $name =~ s/-/\./g;
    my $gs = GeneSet->new($name, \@genes);

    $gs->analyze($features, $chrData);
    $gs->printData("$OUTDIR/$name.loc");
    $gs->dataFile($name . ".loc");
    
    if(0) # debug stuff
    {
	printf "mids: %s\n", join(", ", @{$gs->midPoints()});
	printf "tels: %s\n", join(", ", @{$gs->minTelomereDist()});
	printf "cens: %s\n", join(", ", @{$gs->centromereDist()});
	printf "chrs: %s\n", join(", ", @{$gs->chromosomes()});
    }
    return $gs;
}


# Read in the KS-pvalues.  
# These are created by the R script that is generated by writeRcommands().
sub readKSData
{
    my ($f) = @_;
    open(IN, "$f") || die "Can't open $f: $!\n";

    my %dat;
    while(<IN>)
    {
	next if ($. == 1);
	chomp;
	my ($cat, $pval) = split;
	$dat{$cat} = $pval;
    }
    return \%dat;
}

#
# write the HTML navigation file to the $OUTDIR
#
sub writeHTML
{
    my ($geneSets) = @_;

    my %ks = %{readKSData($OUTDIR . "/" . $KS_TAB_FILE)};

    open H, ">$HTML_FILE" || die "Can't open $HTML_FILE: $!\n";

    # This Javascript changes the src of the "locPlot" <img> tag when the
    # "show plot" link is clicked for each TF
    print H <<EOF;
<html><head><title>$basename</title>

<SCRIPT LANGUAGE="JavaScript">
<!--
function change_image(image) {
     if(document.images)
     {
                document["locPlot"].src = image
     }
}
//-->
</SCRIPT> 

<style type="text/css">	\@import "../screen.css"; </style>

</head>
<body bgcolor="white">
EOF

    my @sortedGS = sort { $ks{$a->name()} <=> $ks{$b->name()}} @{$geneSets};

    my $topImg = (scalar(@sortedGS) > 0 ? pngForGS($sortedGS[0]) : "");

    # Print the ORFlist file name, the TF-specific plot, 
    # and the background distribution plot
    print H join("\n", (tag("h3", $basename), 
			tag("img", "", {src=>$KS_PLOT_FILE, alt=>"all KS pvalues"}),
			tag("div",
			    tag("img", "", {src=>$topImg, 
					    height=>300, width=>300, 
					    alt=>"chromosome binding locations", 
					    name=>"locPlot"}) 
			    . "<br>" .
			    tag("img", "", {src=>$BKGD_PLOT_FILE, alt=>"no background distribution"}),
			    {id=>"histograms"}),
			"<table id=\"mainTable\">")) . "\n";

    # Print the table header row
    print H tag("tr", 
		join("\n", tag("th", "Name"), tag("th", "KS Pval"), 
		     tag("th", "# Genes"),
		     tag("th", "Hist"))
	       ) . "\n";

    # Print one table row per GeneSet
    foreach my $gs (@sortedGS)
    {
	next unless(defined($gs->dataFile()));

	my $name = $gs->name();
	my $pval = (exists($ks{$name}) ?  formatPval($ks{$name}) : "NA");
	print H tag("tr",
		    tag("td", addBreaks($name)) . 
		    tag("td", $pval) . 
		    tag("td", scalar(@{$gs->orfs()}), {class=>"center"}) . 
		    tag("td", 
			tag("a", "show plot", 
			    { onMouseOver=>sprintf("change_image( '%s')", pngForGS($gs)) }))
		   ) . "\n";
    }

    print H "</table></body></html>";
}

# Add <br> tags inside of long elements
sub addBreaks
{
    my ($word) = @_;

    $word =~ s/[_\.]/ /g;

    return $word;

#    return $word if(length($word) < 40);

#    my @parts = split(/\W/, $word);
#    my $x = 0;
#    my $withBreaks = "";
#    foreach (@parts)
#    {
#	$withBreaks .= $_;
#	$x += length($_);
#	if($x > 35)
#	{
#	    $x = 0;
#	    $withBreaks .= "<br>";
#	}
 #   }
  #  return join("", @parts);
}

##
## Utility method used to wrap text in an arbitrary 
## HTML tag with attributes
##
sub tag
{
    my ($tag, $str, $attr_hash) = @_;

    my $h = "<$tag";

    if(defined($attr_hash))
    {
        foreach my $key (keys %{$attr_hash})
        {
            $h .= qq( $key="$attr_hash->{$key}");
        }
    }
    
    if(defined($str))
    {
        $h .= ">$str</$tag>";
    }
    else
    {
        $h .= "/>";
    }

    return $h;
}

# utility method to format a pvalue
sub formatPval
{
    my ($pval) = @_;
    if($pval < 1e-6)
    {
	return(sprintf("%.2e", $pval))
    }
    return(sprintf("%.6f", $pval))
}

# R script is expected to be written and executed in $OUTDIR
sub writeRcommands
{
    my ($geneSets) = @_;
    
    open(OUT, ">$R_FILE") || die "Can't open $R_FILE: $!\n";

    my $header = <<EOF;
source("ProbeDist.R")
bkgd.max <- NA
D.list <- list()

EOF

    if($BKGD_FILE ne "")
    {
	$header .= qq(png(file="$OUTDIR/$BKGD_PLOT_FILE", width=300, height=300)\n);
	$header .= qq(dat <- read.table(file="$BKGD_FILE", header=T));
	$header .= q(
all.results <- plot.hist.modular(dat, main="Background distribution")
bkgd.max <-  all.results$h$mids[which.max(all.results$h$counts)]
abline(v=bkgd.max, col="red", lty=2)
dev.off()

);
    }

    my $ylim = $USE_AGILENT ? "c(0,20)" : "c(0,30)";

    print OUT $header;

    foreach my $gs (@{$geneSets})
    {
	next unless(defined($gs->dataFile()));

	my $name = $gs->name();
	
	print OUT sprintf("png(filename=%s, width=300, height=300)\n", qt($OUTDIR . "/" . pngForGS($gs)));
	print OUT sprintf("dat <- read.table(file=%s, header=T)\n", qt($OUTDIR . "/" . $gs->dataFile()));
	print OUT sprintf("results <- plot.hist.modular(dat, main=%s, ylim=%s, bkgd.max=bkgd.max, all.results=all.results)\n", qt($name), $ylim);
	
	print OUT sprintf("D.list <- c(D.list, list(list(cat=%s, D=results\$D)))\n", qt($name));
	print OUT sprintf("dev.off()\n\n");
    }

    print OUT sprintf("png(filename=%s, width=400, height=250)\n", qt($OUTDIR . "/" . $KS_PLOT_FILE));
    print OUT sprintf("plot.pvalues(%s, D.list, all.results)\n", qt($OUTDIR . "/" . $KS_TAB_FILE));
    print OUT qq(dev.off()\n);

    close OUT;
}



sub pngForGS
{
    my ($gs) = @_;

    return $gs->dataFile() . ".png";
}

# enclose a string in double quotes
sub qt
{
    return '"' . shift(@_) . '"';
}

