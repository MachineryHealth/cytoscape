/*
 Copyright (c) 2006, 2007, The Cytoscape Consortium (www.cytoscape.org)

 The Cytoscape Consortium is:
 - Institute for Systems Biology
 - University of California San Diego
 - Memorial Sloan-Kettering Cancer Center
 - Institut Pasteur
 - Agilent Technologies

 This library is free software; you can redistribute it and/or modify it
 under the terms of the GNU Lesser General Public License as published
 by the Free Software Foundation; either version 2.1 of the License, or
 any later version.

 This library is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF
 MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and
 documentation provided hereunder is on an "as is" basis, and the
 Institute for Systems Biology and the Whitehead Institute
 have no obligations to provide maintenance, support,
 updates, enhancements or modifications.  In no event shall the
 Institute for Systems Biology and the Whitehead Institute
 be liable to any party for direct, indirect, special,
 incidental or consequential damages, including lost profits, arising
 out of the use of this software and its documentation, even if the
 Institute for Systems Biology and the Whitehead Institute
 have been advised of the possibility of such damage.  See
 the GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with this library; if not, write to the Free Software Foundation,
 Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
*/
package org.cytoscape.view.vizmap.gui.internal.editor.valueeditor;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;

import org.cytoscape.view.model.VisualProperty;
import org.jdesktop.swingx.border.DropShadowBorder;
import org.jdesktop.swingx.painter.gradient.BasicGradientPainter;


/**
 * Chooser for any discrete values.  This includes:
 * <ul>
 *     <li>node shape</li>
 *     <li>arrow shape</li>
 *     <li>line style</li>
 *     <li>etc.</li>
 * </ul>
 *
 * @author kono
 */
public class DiscreteValueChooser<T> extends JDialog {
	private final static long serialVersionUID = 1202339876950593L;
	
	private final VisualProperty<T> type;
	private Map<T, Icon> valueMap;
	private List<T> orderedKeyList;
	private T defaultValue;
	private boolean canceled = false;

	/**
	 * Creates a new DiscreteValueChooser object.
	 *
	 * @param vp  DOCUMENT ME!
	 */
	public DiscreteValueChooser(VisualProperty<T> vp, Map<T, Icon> valueMap, T defaultValue) {
		super();
		this.setModal(true);
		this.type = vp;
		this.setTitle("Select " + type.getDisplayName());

		this.valueMap = valueMap;
		initComponents();
		setListItems();

		this.defaultValue = defaultValue;
	}

	/**
	 * Static method to show dialog and get a value from user.
	 *
	 * @param type
	 * @param parent
	 * @return
	 */
	public T showDialog(Component parentComponent) {
		setLocationRelativeTo(parentComponent);
		setVisible(true);

		return getValue();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed" desc=" Generated Code ">
	private void initComponents() {
		mainPanel = new org.jdesktop.swingx.JXTitledPanel();
		iconListScrollPane = new javax.swing.JScrollPane();
		iconList = new javax.swing.JList();
		applyButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("Select New Value");
		mainPanel.setTitlePainter(new BasicGradientPainter(new Point2D.Double(.2d, 0),
		                                                   new Color(Color.gray.getRed(),
		                                                             Color.gray.getGreen(),
		                                                             Color.gray.getBlue(), 100),
		                                                   new Point2D.Double(.8d, 0), Color.WHITE));
		
		mainPanel.setTitleFont(new java.awt.Font("SansSerif", 1, 14));

		iconList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		iconListScrollPane.setViewportView(iconList);

		applyButton.setText("Apply");
		applyButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					applyButtonActionPerformed(evt);
				}
			});

		cancelButton.setText("Cancel");
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					cancelButtonActionPerformed(evt);
				}
			});
		// Currently not implemented
		cancelButton.setVisible(true);

		org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel
		                                                                                      .getContentContainer());
		mainPanel.getContentContainer().setLayout(mainPanelLayout);
		mainPanelLayout.setHorizontalGroup(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
		                                                  .add(org.jdesktop.layout.GroupLayout.TRAILING,
		                                                       mainPanelLayout.createSequentialGroup()
		                                                                      .addContainerGap(128,
		                                                                                       Short.MAX_VALUE)
		                                                                      .add(cancelButton)
		                                                                      .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
		                                                                      .add(applyButton)
		                                                                      .addContainerGap())
		                                                  .add(iconListScrollPane,
		                                                       org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
		                                                       291, Short.MAX_VALUE));
		mainPanelLayout.setVerticalGroup(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
		                                                .add(org.jdesktop.layout.GroupLayout.TRAILING,
		                                                     mainPanelLayout.createSequentialGroup()
		                                                                    .add(iconListScrollPane,
		                                                                         org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
		                                                                         312,
		                                                                         Short.MAX_VALUE)
		                                                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
		                                                                    .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
		                                                                                        .add(applyButton)
		                                                                                        .add(cancelButton))
		                                                                    .addContainerGap()));

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
		                                .add(mainPanel,
		                                     org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
		                                     org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
		                                     Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
		                              .add(mainPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
		                                   org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
		                                   Short.MAX_VALUE));
		pack();
	} // </editor-fold>

	private void cancelButtonActionPerformed(ActionEvent evt) {
		dispose();
		canceled = true;
	}

	private void applyButtonActionPerformed(ActionEvent evt) {
		dispose();
	}

	// Variables declaration - do not modify
	private javax.swing.JButton applyButton;
	private javax.swing.JButton cancelButton;
	private javax.swing.JList iconList;
	private javax.swing.JScrollPane iconListScrollPane;
	private org.jdesktop.swingx.JXTitledPanel mainPanel;
	private DefaultListModel model;

	// End of variables declaration
	/**
	 * DOCUMENT ME!
	 *
	 * @return DOCUMENT ME!
	 */
	public T getValue() {
		if (canceled == true)
			return defaultValue;

		final int selectedIndex = iconList.getSelectedIndex();

		if ((0 <= selectedIndex) && (selectedIndex < orderedKeyList.size()))
			return orderedKeyList.get(selectedIndex);
		else

			return defaultValue;
	}


	private void setListItems() {
		List<Icon> icons = new ArrayList<Icon>();
		orderedKeyList = new ArrayList<T>();

		model = new DefaultListModel();
		iconList.setModel(model);

		Icon icon;

		for (T key : valueMap.keySet()) {
			icon = valueMap.get(key);

			icons.add(icon);
			orderedKeyList.add(key);
			model.addElement(key);
		}

		iconList.setCellRenderer(new IconCellRenderer());
		iconList.repaint();
	}

	
	// TODO: tuning icon layout
	public class IconCellRenderer extends JLabel implements ListCellRenderer {
		private final static long serialVersionUID = 1202339876940871L;
		private final Font SELECTED_FONT = new Font("SansSerif", Font.ITALIC, 18);
		private final Font NORMAL_FONT = new Font("SansSerif", Font.BOLD, 14);
		private final Color SELECTED_COLOR = new Color(30, 30, 80, 25);
		private final Color SELECTED_FONT_COLOR = new Color(0, 150, 255, 120);

		public IconCellRenderer() {
			setOpaque(true);
		}

		public Component getListCellRendererComponent(JList list, Object value, int index,
		                                              boolean isSelected, boolean cellHasFocus) {
			// Get icon for the target value
			final Icon icon = valueMap.get(value);

			setText(value.toString());
			//icon.setLeftPadding(15);
			setIcon(icon);
			setFont(isSelected ? SELECTED_FONT : NORMAL_FONT);

			this.setVerticalTextPosition(SwingConstants.CENTER);
			this.setVerticalAlignment(SwingConstants.CENTER);
			this.setIconTextGap(35);

			setBackground(isSelected ? SELECTED_COLOR : list.getBackground());
			setForeground(isSelected ? SELECTED_FONT_COLOR : list.getForeground());
			setPreferredSize(new Dimension(icon.getIconWidth(), icon.getIconHeight() + 20));
			this.setBorder(new DropShadowBorder());

			return this;
		}
	}
}
