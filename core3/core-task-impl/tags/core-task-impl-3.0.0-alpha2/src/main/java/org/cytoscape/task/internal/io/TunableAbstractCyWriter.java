package org.cytoscape.task.internal.io;


import org.cytoscape.work.Tunable;
import org.cytoscape.work.util.ListSingleSelection;
import org.cytoscape.io.CyFileFilter;
import org.cytoscape.io.write.AbstractCyWriter;
import org.cytoscape.io.write.CyWriterManager;

import java.io.File;

import java.util.Map;
import java.util.TreeMap;
import java.util.ArrayList;


/**
 * An abstract utility implementation of a Task that writes a user defined 
 * file to a file type determined by a provided writer manager.  This class
 * is meant to be extended for specific file types such that the appropriate
 * {@link org.cytoscape.io.write.CyWriter} can be identified.
 */
public abstract class TunableAbstractCyWriter<T extends CyWriterManager> extends AbstractCyWriter<T> {
	/**
	 * This method gets the file to be written.  This method should not
	 * be called directly, but rather handled by the {@link org.cytoscape.work.Tunable}
	 * processing. This method is the "getter" portion of a
	 * getter/setter tunable method pair.
	 * @return The file to be written.
	 */
	@Tunable(description="Select the output file name")
	public final File getOutputFile() {
		return outputFile;
	}

	/**
	 * The list of file type options generated by the file types
	 * available from the CyWriterManager.  This field should not
	 * be set directly, but rather handled by the {@link org.cytoscape.work.Tunable}
	 * processing.
	 */
	@Tunable(description = "Select the export file format")
	public final ListSingleSelection<String> options;

	protected final String getExportFileFormat() {
		return options.getSelectedValue();
	}

	/**
	 * @param writerManager The CyWriterManager to be used to determine which
	 * {@link org.cytoscape.io.write.CyWriter} to be used to write the file chosen by the user. 
	 */
	public TunableAbstractCyWriter(T writerManager) {
		super(writerManager);
		options = new ListSingleSelection<String>(new ArrayList<String>(descriptionFilterMap.keySet()));
	}
}
