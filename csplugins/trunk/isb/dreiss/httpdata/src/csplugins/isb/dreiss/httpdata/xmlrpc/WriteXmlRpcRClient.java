package csplugins.isb.dreiss.httpdata.xmlrpc;

import java.io.*;
import java.util.Hashtable;

import csplugins.isb.dreiss.util.MyUtils;

/**
 * Class <code>WriteXmlRpcRClient</code>
 *
 * @author <a href="mailto:dreiss@systemsbiology.org">David Reiss</a>
 * @version 0.6 (Tue Sep 02 11:12:29 PDT 2003)
 */
public class WriteXmlRpcRClient {
   public static void main( String args[] ) {
      if ( args.length < 2 ) {
	 System.err.println( "Usage: java WriteXmlRpcRClient <handlerClassName> " +
			     "<serviceName> [<outRFile>]" );
	 System.exit( -1 );
      }
      
      Hashtable written = new Hashtable();
      String cname = args[ 0 ];
      String ccname = cname.substring( cname.lastIndexOf( '.' ) + 1 ) + "Client";

      String fname = args.length >= 3 ? args[ 2 ] : null;
      PrintStream ps = null;
      if ( fname != null ) {
	 System.out.println( "Saving R file to " + fname );
	 OutputStream os = null;
	 try { os = MyUtils.OpenOutputFile( fname ); } catch ( Exception e ) { os = null; }
	 if ( os != null ) ps = new PrintStream( os );
	 if ( ps != null ) System.setOut( ps );
	 File f = new File( fname );
	 ccname = f.getName();
	 if ( ccname.endsWith( ".R" ) ) 
	    ccname = ccname.substring( 0, ccname.lastIndexOf( '.' ) );
      }
      
      try {
	 Class cls = Class.forName( cname );
	 String sname = cls.getSuperclass() != null ? cls.getSuperclass().getName() : "";
	 String pkg = cname.indexOf( '.' ) > 0 ?
	    cname.substring( 0, cname.lastIndexOf( '.' ) ) : "";

	 System.out.println( "#" );
	 System.out.println( "# Class " + ccname + " automatically generated by" );
	 System.out.println( "# csplugins.isb.dreiss.httpdata.xmlrpc.WriteXmlRpcRClient based on handler class" );
	 System.out.println( "# " + cname + " by dreiss (dreiss@systemsbiology.org)" );
	 System.out.println( "#\n" );

	 System.out.println( "java.inited <- FALSE\n" );
	 System.out.println( "initJava <- function() {" );
	 System.out.println( "\tif ( ! java.inited ) {" );
	 System.out.println( "\t\tcat( \"INITIALIZING JAVA VM...\\n\" )" );
	 System.out.println( "\t\tlibrary( SJava )" );
	 System.out.println( "\t\t.JavaInit( classPath=c( paste( \"cytoTalk.jar:cytoscape.jar\", sep=\"\" ) )," );
	 System.out.println( "\t\t\toptions=c( \"-Xmx512m\" ), verbose=FALSE )" );
	 System.out.println( "\t\tjava.inited <<- TRUE" );
	 System.out.println( "\t\tcat( \"DONE INITIALIZING JAVA VM.\\n\" )" );
	 System.out.println( "\t}\n}\n" );

	 System.out.println( "cyservers <- list()\n" );

	 System.out.println( "CytoTalkClient <- function( hostname = \"localhost\", port = 8082 ) {" );
	 System.out.println( "initJava()\n" );
	 System.out.println( "list (\n" );

	 System.out.println( "cyservers[[ port ]] <<- .JNew( \"csplugins.isb.dreiss.cytoTalk.CytoTalkClient\", " );
	 System.out.println( "\t\tpaste( \"http://\", hostname, \":\", port, sep=\"\" ) ),\n" );

	 System.out.println( "getURL = function(  ) {" );
	 System.out.println( "\tpaste( \"http://\", hostname, \":\", port, sep=\"\" )" );
	 System.out.println( "},\n" );

	 java.lang.reflect.Method methods[] = cls.getMethods();
	 for ( int i = 0; i < methods.length; i ++ ) {
	    String mname = methods[ i ].toString();
	    if ( mname.indexOf( "java.lang.Object." ) > 0 ) continue;
	    mname = mname.replaceAll( "public ", "" );
	    mname = mname.replaceAll( "static ", "" );
	    mname = mname.replaceAll( "native ", "" );
	    mname = mname.replaceAll( "final ", "" );
	    mname = mname.replaceAll( "java.lang.", "" );
	    mname = mname.replaceAll( "java.util.", "" );
	    mname = mname.replaceAll( cname + ".", "" );
	    mname = mname.replaceAll( sname + ".", "" );
	    if ( mname.indexOf( "throws " ) > 0 ) 
	       mname = mname.substring( 0, mname.indexOf( "throws " ) - 1 );
	    if ( mname.startsWith( "void " ) ) continue;

	    String mm = methods[ i ].getName();
	    if ( written.get( mm ) != null ) {
	       System.err.println( "WARNING: Method " + mm + " has duplicate definition." );
	       continue;
	    }
	    Class params[] = methods[ i ].getParameterTypes();
	    String ret = methods[ i ].getReturnType().getName();
	    if ( ret.equals( "java.lang.String" ) ) ret = "String";
	    else if ( ret.equals( "java.util.Vector" ) ) ret = "Vector";
	    else if ( ret.equals( "java.util.Hashtable" ) ) ret = "Hashtable";
	    else if ( ret.equals( "java.util.Date" ) ) ret = "Date";

	    boolean isObject = false;
	    try { isObject = java.lang.Object.class.isAssignableFrom( Class.forName( ret ) );
	    } catch( Exception eee ) { isObject = false; }
	    System.out.print( mm + " = function( " );
	    for ( int j = 0; j < params.length; j ++ ) {
	       String pname = params[ j ].getName();
	       if ( pname.equals( "java.lang.String" ) ) pname = "String";
	       else if ( pname.equals( "java.util.Vector" ) ) pname = "Vector";
	       else if ( pname.equals( "java.util.Hashtable" ) ) pname = "Hashtable";
	       else if ( pname.equals( "java.util.Date" ) ) pname = "Date";
	       System.out.print( pname + j );
	       if ( j < params.length-1 ) System.out.print( ", " );
	    }
	    System.out.println( " ) {" );
	    if ( params.length > 0 ) {
	       System.out.print( "\tout <- cyservers[[ port ]]$" + mm + "( " );
	       for ( int j = 0; j < params.length; j ++ ) {
		  String pname = params[ j ].getName();
		  if ( pname.equals( "java.lang.String" ) ) pname = "String";
		  else if ( pname.equals( "java.util.Vector" ) ) pname = "Vector";
		  else if ( pname.equals( "java.util.Hashtable" ) ) pname = "Hashtable";
		  else if ( pname.equals( "java.util.Date" ) ) pname = "Date";
		  if ( pname.equals( "int" ) ) 
		     System.out.print( "as.integer( " + pname + j + " )" );
		  else if ( pname.equals( "double" ) ) 
		     System.out.print( "as.double( " + pname + j + " )" );
		  else if ( pname.equals( "boolean" ) ) 
		     System.out.print( "as.boolean( " + pname + j + " )" );
		  else if ( pname.equals( "Vector" ) ) 
		     System.out.print( "toJavaVector( " + pname + j + " )" );
		  else if ( pname.equals( "Hashtable" ) ) 
		     System.out.print( "toJavaHashtable( " + pname + j + " )" );
		  else System.out.print( pname + j );
		  if ( j < params.length-1 ) System.out.print( ", " );
	       }
	       System.out.println( " )" );
	    } else {
	        System.out.println( "\tout <- cyservers[[ port ]]$" + mm + "()" );
	    }
	    
	    if ( ret.equals( "Vector" ) ) 
	       System.out.println( "\tfromJavaVector( out )" );
	    else if ( ret.equals( "Hashtable" ) ) 
	       System.out.println( "\tfromJavaHashtable( out )" );
	    else System.out.println( "\tout" );
	    System.out.println( "},\n" );
	    written.put( mm, "true" );
	 }

	 System.out.println( ")" );
	 System.out.println( "}\n" );

	 System.out.println( "fromJavaVector <- function( vec ) {" );
	 System.out.println( "\tsize <- vec$size()" );
	 System.out.println( "\tif ( size <= 0 ) return( character() ) #stop( \"Vector size is zero\" )" );
	 System.out.println( "\telse if ( size == 1 ) return( vec$get( as.integer( 0 ) ) )" );
	 System.out.println( "\tfirst <- vec$get( as.integer( 0 ) )" );
	 System.out.println( "\tisVec <- FALSE" );
	 System.out.println( "\tif ( is.character( first ) || is.numeric( first ) || is.logical( first ) ) isVec <- TRUE" );
	 System.out.println( "\tif ( is.character( first ) ) list <- character()" );
	 System.out.println( "\telse if ( is.numeric( first ) ) list <- numeric()" );
	 System.out.println( "\telse if ( is.logical( first ) ) list <- logical()" );
	 System.out.println( "\telse if ( ! isVec ) list <- list()" );
	 System.out.println( "\tfor ( i in 1:size ) {" );
	 System.out.println( "\t\telement <- vec$get( as.integer(i-1) )" );
	 System.out.println( "\t\tif ( is.character( element ) || is.numeric( element ) || is.logical( element ) )\n\t\t\tlist[i] <- element" );
	 System.out.println( "\t\telse if ( element$getClass()$getName() == \"java.util.Vector\" )\n\t\t\tlist[[i]] <- fromJavaVector( element )" );
	 System.out.println( "\t\telse if ( element$getClass()$getName() == \"java.util.Hashtable\" )\n\t\t\tlist[[i]] <- fromJavaHashtable( element )" );
	 System.out.println( "\t}" );
	 System.out.println( "\tlist" );
	 System.out.println( "}\n" );

	 System.out.println( "toJavaVector <- function( list ) {" );
	 System.out.println( "\tif ( length( list ) <= 0 ) stop( \"List size is zero\" )" );
	 System.out.println( "\tvec <- .JNew( \"java.util.Vector\" )" );
	 System.out.println( "\tfor ( i in 1:length( list ) ) {" );
	 System.out.println( "\t\ttemp <- list[i]" );
         System.out.println( "\t\tif ( is.list( temp ) ) vec$add( toJavaHashtable( temp ) )" );
	 System.out.println( "\t\telse if ( is.vector( temp ) && length( temp ) > 1 ) vec$add( toJavaVector( temp ) )" );
         System.out.println( "\t\telse vec$add( as.character( temp ) )" );
         System.out.println( "\t}" );
	 System.out.println( "\tvec" );
	 System.out.println( "}\n" );

	 System.out.println( "fromJavaHashtable <- function( map ) {" );
	 System.out.println( "\tlist <- list()" );
	 System.out.println( "\te <- map$keys()" );
	 System.out.println( "\twhile( e$hasMoreElements() ) {" );
	 System.out.println( "\t\ttmp <- e$nextElement()" );
	 System.out.println( "\t\telement <- map$get( tmp )" );
	 System.out.println( "\t\tif ( is.character( element ) || is.numeric( element ) || is.logical( element ) )\n\t\t\tlist[[tmp]] <- element" );
	 System.out.println( "\t\telse if ( element$getClass()$getName() == \"java.util.Vector\" )\n\t\t\tlist[[tmp]] <- fromJavaVector( element )" );
	 System.out.println( "\t\telse if ( element$getClass()$getName() == \"java.util.Hashtable\" )\n\t\t\tlist[[tmp]] <- fromJavaHashtable( element )" );
	 System.out.println( "\t}" );
	 System.out.println( "\tlist" );
	 System.out.println( "}\n" );

	 System.out.println( "toJavaHashtable <- function( list ) {" );
	 System.out.println( "\tif ( length( list ) <= 0 ) stop( \"List size is zero\" )" );
	 System.out.println( "\tmap <- .JNew( \"java.util.Hashtable\" )" );
	 System.out.println( "\tfor ( i in 1:length( list ) ) {" );
         System.out.println( "\t\ttemp <- list[[i]]" );
         System.out.println( "\t\tif ( is.list( temp ) ) map$put( names(list)[i], toJavaHashtable( temp ) )" );
         System.out.println( "\t\telse if ( is.vector( temp ) && length( temp ) > 1 ) map$put( names(list)[i], toJavaVector( temp ) )" );
         System.out.println( "\t\telse map$put( names(list)[i], as.character( temp ) )" );
         System.out.println( "\t}" );
	 System.out.println( "\tmap" );
	 System.out.println( "}\n" );

      } catch( Exception e ) {
	 e.printStackTrace();
      }
      if ( ps != null ) { ps.flush(); ps.close(); }
   }
}
