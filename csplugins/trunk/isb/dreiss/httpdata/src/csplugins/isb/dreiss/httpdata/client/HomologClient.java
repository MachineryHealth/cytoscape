package csplugins.isb.dreiss.httpdata.client;

import java.util.*;
import java.io.IOException;
import org.apache.xmlrpc.*;

import csplugins.isb.dreiss.httpdata.xmlrpc.*;

/**
 * Class HomologClient automatically generated by
 * csplugins.isb.dreiss.httpdata.xmlrpc.WriteXmlRpcClient based on class
 * DBHomologHandler by dreiss (dreiss@systemsbiology.org)
 **/

public class HomologClient extends AuthenticatedDataClient {
   public HomologClient( String url ) throws XmlRpcException,
					     java.net.MalformedURLException {
      super( url );
      SERVICE_NAME = "homolog";
   }

   public boolean put( String arg0, String arg1, double arg2, String arg3, String arg4, String arg5 ) throws XmlRpcException, IOException {
      Object out = call( SERVICE_NAME + ".put", arg0, arg1, new Double( arg2 ), arg3, arg4, arg5 );
      return ( (Boolean) out ).booleanValue();
   }

   public boolean put( String arg0, String arg1, double arg2, String arg3, String arg4 ) throws XmlRpcException, IOException {
      Object out = call( SERVICE_NAME + ".put", arg0, arg1, new Double( arg2 ), arg3, arg4 );
      return ( (Boolean) out ).booleanValue();
   }

   public boolean addSpecies( String arg0, String arg1 ) throws XmlRpcException, IOException {
      Object out = call( SERVICE_NAME + ".addSpecies", arg0, arg1 );
      return ( (Boolean) out ).booleanValue();
   }

   public boolean hasSpecies( String arg0 ) throws XmlRpcException, IOException {
      Object out = call( SERVICE_NAME + ".hasSpecies", arg0 );
      return ( (Boolean) out ).booleanValue();
   }

   public String getSpeciesFullName( String arg0 ) throws XmlRpcException, IOException {
      Object out = call( SERVICE_NAME + ".getSpeciesFullName", arg0 );
      return (String) out;
   }

   public Hashtable getAvailableSpecies(  ) throws XmlRpcException, IOException {
      Object out = call( SERVICE_NAME + ".getAvailableSpecies" );
      return (Hashtable) out;
   }

   public boolean hasHomolog( String arg0, String arg1, String arg2, String arg3 ) throws XmlRpcException, IOException {
      Object out = call( SERVICE_NAME + ".hasHomolog", arg0, arg1, arg2, arg3 );
      return ( (Boolean) out ).booleanValue();
   }

   public Vector getAllHomologs( String arg0, String arg1, String arg2 ) throws XmlRpcException, IOException {
      Object out = call( SERVICE_NAME + ".getAllHomologs", arg0, arg1, arg2 );
      return (Vector) out;
   }

   public Vector getAllHomologs( String arg0, String arg1 ) throws XmlRpcException, IOException {
      Object out = call( SERVICE_NAME + ".getAllHomologs", arg0, arg1 );
      return (Vector) out;
   }

   public Vector getAllHomologsAndInfo( String arg0, String arg1, String arg2 ) throws XmlRpcException, IOException {
      Object out = call( SERVICE_NAME + ".getAllHomologsAndInfo", arg0, arg1, arg2 );
      return (Vector) out;
   }

   public Vector getAllHomologsAndInfo( String arg0, String arg1 ) throws XmlRpcException, IOException {
      Object out = call( SERVICE_NAME + ".getAllHomologsAndInfo", arg0, arg1 );
      return (Vector) out;
   }

   public Vector getAllHomologsAndInfo( String arg0, String arg1, String arg2, double arg3 ) throws XmlRpcException, IOException {
      Object out = call( SERVICE_NAME + ".getAllHomologsAndInfo", arg0, arg1, arg2, new Double( arg3 ) );
      return (Vector) out;
   }

   public Vector getAllHomologsAndInfo( String arg0, String arg1, double arg2 ) throws XmlRpcException, IOException {
      Object out = call( SERVICE_NAME + ".getAllHomologsAndInfo", arg0, arg1, new Double( arg2 ) );
      return (Vector) out;
   }

   public void test() throws Exception { };

   public static void main( String args[] ) {
      try {
	 HomologClient client = new HomologClient( args[ 0 ] );

	 //... do your stuff here...

      } catch( Exception e ) { e.printStackTrace(); }
   }
}

