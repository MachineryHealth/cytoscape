package csplugins.isb.dreiss.httpdata.xmlrpc;

import java.util.*;
import java.io.IOException;
import org.apache.xmlrpc.*;

/**
 * Class MapHandlerClient automatically generated by
 * csplugins.isb.dreiss.httpdata.xmlrpc.WriteXmlRpcClient based on class 
 * MapHandler by dreiss (dreiss@systemsbiology.org)
 **/

public class MapHandlerClient {
   static final String SERVICE_NAME = "map";
   Vector args = new Vector();
   XmlRpcClientLite client;

   public String put( String arg0, String arg1 ) throws XmlRpcException, IOException {
      args.clear();
      args.add( arg0 );
      args.add( arg1 );
      Object out = client.execute( SERVICE_NAME + ".put", args );
      return (String) out;
   }

   public String get( String arg0 ) throws XmlRpcException, IOException {
      args.clear();
      args.add( arg0 );
      Object out = client.execute( SERVICE_NAME + ".get", args );
      return (String) out;
   }

   public Hashtable get(  ) throws XmlRpcException, IOException {
      args.clear();
      Object out = client.execute( SERVICE_NAME + ".get", args );
      return (Hashtable) out;
   }

   public int size(  ) throws XmlRpcException, IOException {
      args.clear();
      Object out = client.execute( SERVICE_NAME + ".size", args );
      return ( (Integer) out ).intValue();
   }

   public Vector values(  ) throws XmlRpcException, IOException {
      args.clear();
      Object out = client.execute( SERVICE_NAME + ".values", args );
      return (Vector) out;
   }

   public String remove( String arg0 ) throws XmlRpcException, IOException {
      args.clear();
      args.add( arg0 );
      Object out = client.execute( SERVICE_NAME + ".remove", args );
      return (String) out;
   }

   public boolean clear(  ) throws XmlRpcException, IOException {
      args.clear();
      Object out = client.execute( SERVICE_NAME + ".clear", args );
      return ( (Boolean) out ).booleanValue();
   }

   public Vector keys(  ) throws XmlRpcException, IOException {
      args.clear();
      Object out = client.execute( SERVICE_NAME + ".keys", args );
      return (Vector) out;
   }

   public boolean containsKey( String arg0 ) throws XmlRpcException, IOException {
      args.clear();
      args.add( arg0 );
      Object out = client.execute( SERVICE_NAME + ".containsKey", args );
      return ( (Boolean) out ).booleanValue();
   }

   public boolean containsValue( String arg0 ) throws XmlRpcException, IOException {
      args.clear();
      args.add( arg0 );
      Object out = client.execute( SERVICE_NAME + ".containsValue", args );
      return ( (Boolean) out ).booleanValue();
   }

   public boolean putAll( Hashtable arg0 ) throws XmlRpcException, IOException {
      args.clear();
      args.add( arg0 );
      Object out = client.execute( SERVICE_NAME + ".putAll", args );
      return ( (Boolean) out ).booleanValue();
   }

   public MapHandlerClient( String url ) throws XmlRpcException,
						java.net.MalformedURLException {
      client = new XmlRpcClientLite( url );
   }

   public static void main( String args[] ) {
      try {
	 MapHandlerClient client = new MapHandlerClient( args[ 0 ] );

	 //... do your stuff here...
	 client.put( "key1", "val1" );
	 client.put( "key2", "val2" );
	 System.out.println( "KEYS = " + client.keys() );
	 System.out.println( "VALUES = " + client.values() );
	 System.out.println( "MAP = " + client.get() );

      } catch( Exception e ) { e.printStackTrace(); }
   }
}

