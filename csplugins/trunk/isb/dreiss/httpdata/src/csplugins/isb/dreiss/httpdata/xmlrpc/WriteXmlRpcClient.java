package csplugins.isb.dreiss.httpdata.xmlrpc;

import java.io.*;

import csplugins.isb.dreiss.util.MyUtils;

/**
 * Class <code>WriteXmlRpcClient</code>
 *
 * @author <a href="mailto:dreiss@systemsbiology.org">David Reiss</a>
 * @version 0.6 (Tue Sep 02 11:12:29 PDT 2003)
 */
public class WriteXmlRpcClient {
   public static void main( String args[] ) {
      if ( args.length < 2 ) {
	 System.err.println( "Usage: java WriteXmlRpcClient <handlerClassName> " +
			     "<serviceName> [<outJavaFile>]" );
	 System.exit( -1 );
      }
      
      String cname = args[ 0 ];
      String ccname = cname.substring( cname.lastIndexOf( '.' ) + 1 ) + "Client";

      String fname = args.length >= 3 ? args[ 2 ] : null;
      PrintStream ps = null;
      if ( fname != null ) {
	 System.out.println( "Saving Java file to " + fname );
	 OutputStream os = null;
	 try { os = MyUtils.OpenOutputFile( fname ); } catch ( Exception e ) { os = null; }
	 if ( os != null ) ps = new PrintStream( os );
	 if ( ps != null ) System.setOut( ps );
	 File f = new File( fname );
	 ccname = f.getName();
	 if ( ccname.endsWith( ".java" ) ) 
	    ccname = ccname.substring( 0, ccname.lastIndexOf( '.' ) );
      }
      
      try {
	 Class cls = Class.forName( cname );
	 String sname = cls.getSuperclass() != null ? cls.getSuperclass().getName() : "";
	 String pkg = cname.indexOf( '.' ) > 0 ?
	    cname.substring( 0, cname.lastIndexOf( '.' ) ) : "";

	 if ( ! "".equals( pkg ) ) System.out.println( "package " + pkg + ";\n" );
	 System.out.println( "import java.util.*;" );
	 System.out.println( "import java.io.IOException;" );
	 System.out.println( "import org.apache.xmlrpc.*;\n" );
	 System.out.println( "/**" );
	 System.out.println( " * Class " + ccname + " automatically generated by" );
	 System.out.println( " * csplugins.isb.dreiss.httpdata.xmlrpc.WriteXmlRpcClient based on handler class" );
	 System.out.println( " * " + cname + " by dreiss (dreiss@systemsbiology.org)" );
	 System.out.println( " **/\n" );
	 System.out.println( "public class " + ccname + " {" );
	 System.out.println( "\tstatic final String SERVICE_NAME = \"" + args[ 1 ] + 
			     "\";" );
	 System.out.println( "\tVector args = new Vector();" );
	 System.out.println( "\tXmlRpcClient client;\n" );

	 java.lang.reflect.Method methods[] = cls.getMethods();
	 for ( int i = 0; i < methods.length; i ++ ) {
	    String mname = methods[ i ].toString();
	    if ( mname.indexOf( "java.lang.Object." ) > 0 ) continue;
	    mname = mname.replaceAll( "public ", "" );
	    mname = mname.replaceAll( "static ", "" );
	    mname = mname.replaceAll( "native ", "" );
	    mname = mname.replaceAll( "final ", "" );
	    mname = mname.replaceAll( "java.lang.", "" );
	    mname = mname.replaceAll( "java.util.", "" );
	    mname = mname.replaceAll( cname + ".", "" );
	    mname = mname.replaceAll( sname + ".", "" );
	    if ( mname.indexOf( "throws " ) > 0 ) 
	       mname = mname.substring( 0, mname.indexOf( "throws " ) - 1 );
	    if ( mname.startsWith( "void " ) ) continue;

	    String mm = methods[ i ].getName();
	    Class params[] = methods[ i ].getParameterTypes();
	    String ret = methods[ i ].getReturnType().getName();
	    if ( ret.equals( "java.lang.String" ) ) ret = "String";
	    else if ( ret.equals( "java.util.Vector" ) ) ret = "Vector";
	    else if ( ret.equals( "java.util.Hashtable" ) ) ret = "Hashtable";
	    else if ( ret.equals( "java.util.Date" ) ) ret = "Date";

	    boolean isObject = false;
	    try { isObject = java.lang.Object.class.isAssignableFrom( Class.forName( ret ) );
	    } catch( Exception eee ) { isObject = false; }
	    System.out.print( "\tpublic " + ret + " " + mm + "( " );
	    for ( int j = 0; j < params.length; j ++ ) {
	       String pname = params[ j ].getName();
	       if ( pname.equals( "java.lang.String" ) ) pname = "String";
	       else if ( pname.equals( "java.util.Vector" ) ) pname = "Vector";
	       else if ( pname.equals( "java.util.Hashtable" ) ) pname = "Hashtable";
	       else if ( pname.equals( "java.util.Date" ) ) pname = "Date";
	       System.out.print( pname + " arg" + j );
	       if ( j < params.length-1 ) System.out.print( ", " );
	    }
	    System.out.println( " ) throws XmlRpcException, IOException {" );
	    System.out.println( "\t\targs.clear();" );
	    for ( int j = 0; j < params.length; j ++ ) {
	       String pname = params[ j ].getName();
	       if ( pname.equals( "int" ) ) 
		  System.out.println( "\t\targs.add( new Integer( arg" + j + " ) );" );
	       else if ( pname.equals( "double" ) ) 
		  System.out.println( "\t\targs.add( new Double( arg" + j + " ) );" );
	       else if ( pname.equals( "boolean" ) ) 
		  System.out.println( "\t\targs.add( new Boolean( arg" + j + " ) );" );
	       else System.out.println( "\t\targs.add( arg" + j + " );" );
	    }
	    System.out.println( "\t\tObject out = client.execute( SERVICE_NAME + \"." +
				mm + "\", args );" );
	    if ( ret.equals( "boolean" ) )
	       System.out.println( "\t\treturn ( (Boolean) out ).booleanValue();" );
	    else if ( ret.equals( "int" ) )
	       System.out.println( "\t\treturn ( (Integer) out ).intValue();" );
	    else if ( ret.equals( "double" ) )
	       System.out.println( "\t\treturn ( (Double) out ).doubleValue();" );
	    else if ( isObject )
	       System.out.println( "\t\treturn (" + ret + ") csplugins.isb.dreiss.httpdata.xmlrpc.XmlRpcUtils.GetObjectFromStruct( (Hashtable) out );" );
	    else System.out.println( "\t\treturn (" + ret + ") out;" );
	    System.out.println( "\t}\n" );
	 }

	 System.out.println( "\tpublic " + ccname + 
			     "( String url ) throws XmlRpcException,\n" +
			     "\t\t\t\tjava.net.MalformedURLException {" );
	 System.out.println( "\t\tclient = new XmlRpcClient( url );" );
	 System.out.println( "\t}\n" );
	 System.out.println( "\tpublic XmlRpcClient getClient() {" );
	 System.out.println( "\t\treturn client;" );
	 System.out.println( "\t}\n" );
	 System.out.println( "\tpublic static void main( String args[] ) {" );
	 System.out.println( "\t\ttry {" );
	 System.out.println( "\t\t\t" + ccname + " client = new " + ccname + 
			     "( args[ 0 ] );" );
	 System.out.println( "\n\t\t\t//... do your stuff here..." );
	 System.out.println( "\n\t\t} catch( Exception e ) { e.printStackTrace(); }" );
	 System.out.println( "\t}" );
	 System.out.println( "}\n" );
      } catch( Exception e ) {
	 e.printStackTrace();
      }
      if ( ps != null ) { ps.flush(); ps.close(); }
   }
}
