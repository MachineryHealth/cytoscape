package csplugins.isb.dreiss.httpdata.xmlrpc;

/**
 * Class <code>WriteXmlRpcHandlerInterface</code>
 *
 * @author <a href="mailto:dreiss@systemsbiology.org">David Reiss</a>
 * @version 0.6 (Tue Sep 02 11:12:29 PDT 2003)
 */
public class WriteXmlRpcHandlerInterface {
   public static void main( String args[] ) {
      if ( args.length < 2 ) {
	 System.err.println( "Usage: java WriteXmlRpcHandlerInterface " +
			     "<handlerClassName> <serviceName>" );
	 System.exit( -1 );
      }
      
      String cname = args[ 0 ];
      try {
	 Class cls = Class.forName( cname );
	 String ccname = cname.substring( cname.lastIndexOf( '.' ) + 1 );
	 String sname = cls.getSuperclass() != null ? cls.getSuperclass().getName() : "";
	 String pkg = cname.indexOf( '.' ) > 0 ?
	    cname.substring( 0, cname.lastIndexOf( '.' ) ) : "";

	 if ( ! "".equals( pkg ) ) System.out.println( "package " + pkg + ";\n" );
	 System.out.println( "import java.io.IOException;" );
	 System.out.println( "import org.apache.xmlrpc.XmlRpcException;\n" );
	 System.out.println( "/**" );
	 System.out.println( " * Interface " + ccname + "Handler automatically generated by" );
	 System.out.println( " * csplugins.isb.dreiss.httpdata.xmlrpc.WriteXmlRpcHandlerInterface based on class" );
	 System.out.println( " * " + ccname + " by dreiss (dreiss@systemsbiology.org)" );
	 System.out.println( " **/\n" );
	 System.out.println( "public interface " + ccname + "Handler {" );
	 System.out.println( "\tstatic final String SERVICE_NAME = \"" + args[ 1 ] + 
			     "\";" );

	 java.lang.reflect.Method methods[] = cls.getMethods();
	 for ( int i = 0; i < methods.length; i ++ ) {
	    String mname = methods[ i ].toString();
	    if ( mname.indexOf( "java.lang.Object." ) > 0 ) continue;
	    mname = mname.replaceAll( "public ", "" );
	    mname = mname.replaceAll( "static ", "" );
	    mname = mname.replaceAll( "native ", "" );
	    mname = mname.replaceAll( "final ", "" );
	    mname = mname.replaceAll( "java.lang.", "" );
	    mname = mname.replaceAll( "java.util.", "" );
	    mname = mname.replaceAll( cname + ".", "" );
	    mname = mname.replaceAll( sname + ".", "" );
	    if ( mname.indexOf( "throws " ) > 0 ) 
	       mname = mname.substring( 0, mname.indexOf( "throws " ) - 1 );
	    if ( mname.startsWith( "void " ) ) continue;

	    String mm = methods[ i ].getName();
	    Class params[] = methods[ i ].getParameterTypes();
	    String ret = methods[ i ].getReturnType().getName();
	    if ( ret.equals( "java.lang.String" ) ) ret = "String";
	    else if ( ret.equals( "java.util.Vector" ) ) ret = "Vector";
	    else if ( ret.equals( "java.util.Hashtable" ) ) ret = "Hashtable";
	    else if ( ret.equals( "java.util.Date" ) ) ret = "Date";

	    boolean isObject = false;
	    try { isObject = java.lang.Object.class.isAssignableFrom( Class.forName( ret ) );
	    } catch( Exception eee ) { isObject = false; }
	    System.out.print( "\tpublic " + ret + " " + mm + "( " );
	    for ( int j = 0; j < params.length; j ++ ) {
	       String pname = params[ j ].getName();
	       if ( pname.equals( "java.lang.String" ) ) pname = "String";
	       else if ( pname.equals( "java.util.Vector" ) ) pname = "Vector";
	       else if ( pname.equals( "java.util.Hashtable" ) ) pname = "Hashtable";
	       else if ( pname.equals( "java.util.Date" ) ) pname = "Date";
	       System.out.print( pname + " arg" + j );
	       if ( j < params.length-1 ) System.out.print( ", " );
	    }
	    System.out.println( " ) throws XmlRpcException, IOException;" );
	 }
	 System.out.println( "}\n" );
      } catch( Exception e ) {
	 e.printStackTrace();
      }
   }
}
