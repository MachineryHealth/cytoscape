package csplugins.isb.dreiss.httpdata.client;

import java.util.*;
import java.io.IOException;
import org.apache.xmlrpc.*;

import csplugins.isb.dreiss.httpdata.*;
import csplugins.isb.dreiss.httpdata.xmlrpc.*;

/**
 * Class BlastClient automatically generated by
 * csplugins.isb.dreiss.httpdata.xmlrpc.WriteXmlRpcClient based on class
 * BlastHandler by dreiss (dreiss@systemsbiology.org)
 **/

public class BlastClient extends AuthenticatedDataClient {
   public BlastClient( String url ) throws XmlRpcException,
						  java.net.MalformedURLException {
      super( url );
      SERVICE_NAME = "blast";
   }

   public boolean run(  ) throws Exception {
      Object out = call( SERVICE_NAME + ".run" );
      return ( (Boolean) out ).booleanValue();
   }

   public boolean setup( String arg0, String arg1, String arg2, String arg3, String arg4 ) throws Exception {
      Object out = call( SERVICE_NAME + ".setup", arg0, arg1, arg2, arg3, arg4 );
      return ( (Boolean) out ).booleanValue();
   }

   public boolean setup( String arg0, String arg1, String arg2, String arg3, String arg4, double arg5 ) throws Exception {
      Object out = call( SERVICE_NAME + ".setup", arg0, arg1, arg2, arg3, arg4, new Double( arg5 ) );
      return ( (Boolean) out ).booleanValue();
   }
 
   public Vector getSequenceFileNames(  ) throws Exception {
      Object out = call( SERVICE_NAME + ".getSequenceFileNames" );
      return (Vector) out;
   }

   public boolean setMatrix( String arg0 ) throws Exception {
      Object out = call( SERVICE_NAME + ".setMatrix", arg0 );
      return ( (Boolean) out ).booleanValue();
   }

   public boolean setCostToOpenGap( int arg0 ) throws Exception {
      Object out = call( SERVICE_NAME + ".setCostToOpenGap", new Integer( arg0 ) );
      return ( (Boolean) out ).booleanValue();
   }

   public boolean setCostToExtendGap( int arg0 ) throws Exception {
      Object out = call( SERVICE_NAME + ".setCostToExtendGap", new Integer( arg0 ) );
      return ( (Boolean) out ).booleanValue();
   }

   public int getInvocationCount(  ) throws Exception {
      Object out = call( SERVICE_NAME + ".getInvocationCount" );
      return ( (Integer) out ).intValue();
   }

   public String getBlastCommand(  ) throws Exception {
      Object out = call( SERVICE_NAME + ".getBlastCommand" );
      return (String) out;
   }

   public String getErrorMessage(  ) throws Exception {
      Object out = call( SERVICE_NAME + ".getErrorMessage" );
      return (String) out;
   }

   public HomologSet getResults(  ) throws Exception {
      Hashtable out = (Hashtable) call( SERVICE_NAME + ".getResults" );
      return (HomologSet) csplugins.isb.dreiss.httpdata.xmlrpc.XmlRpcUtils.GetObjectFromStruct( out );
   }

   public String describe(  ) throws Exception {
      Object out = call( SERVICE_NAME + ".describe" );
      return (String) out;
   }

   public String getProtocol(  ) throws Exception {
      Object out = call( SERVICE_NAME + ".getProtocol" );
      return (String) out;
   }

   public String getServiceName(  ) throws Exception {
      Object out = call( SERVICE_NAME + ".getServiceName" );
      return (String) out;
   }

   public void test() throws Exception {
      System.out.println ("invocation count: " + getInvocationCount ());

      String blastVariant = "blastp";
      String sequenceName = "Myc";
      String sourceSpecies = "Homo sapiens";
      String targetSequenceFile = "yeast.aa";
      String sequence = "msdnddievesdeeqprfqsaadkrahhnalerkrrdhikdsfhslrdsvpslqgekasr" +
	 "aqildkateyiqymrrknhthqqdiddlkrqnalleqqvralekarssaqlqtnypssdnslytnakgst" +
	 "isafdggsdsssesepeepqsrkklrmeas";

      setup (blastVariant, sequence, sequenceName, sourceSpecies, 
		    targetSequenceFile);
      System.out.println( "sequence fnames: " + getSequenceFileNames() );

      run ();

      System.out.println( "blast command: " + getBlastCommand() );

      HomologSet homologSet = getResults ();
      System.out.println (homologSet);
      for (int i=0; i < homologSet.size (); i++)
	 System.out.println (homologSet.get (i));
   }

   public static void main( String args[] ) {
      try {
	 BlastClient client = new BlastClient( args[ 0 ] );
	 //Vector vargs = new Vector(); vargs.addElement( new Boolean( true ) );
	 //client.getClient().execute( "server.debug", vargs );

	 client.test();
      } catch( Exception e ) { e.printStackTrace(); }
   }
}

