package csplugins.isb.dreiss.httpdata.xmlrpc;

import java.io.*;
import java.util.Hashtable;

import csplugins.isb.dreiss.util.MyUtils;

/**
 * Class <code>WriteXmlRpcPerlClient</code>
 *
 * @author <a href="mailto:dreiss@systemsbiology.org">David Reiss</a>
 * @version 0.6 (Tue Sep 02 11:12:29 PDT 2003)
 */
public class WriteXmlRpcPerlClient {
   public static void main( String args[] ) {
      if ( args.length < 2 ) {
	 System.err.println( "Usage: java WriteXmlRpcPerlClient <handlerClassName> " +
			     "<serviceName> [<outPerlFile>]" );
	 System.exit( -1 );
      }

      Hashtable written = new Hashtable();
      String cname = args[ 0 ];
      String ccname = cname.substring( cname.lastIndexOf( '.' ) + 1 ) + "Client";

      String fname = args.length >= 3 ? args[ 2 ] : null;
      PrintStream ps = null;
      if ( fname != null ) {
	 System.out.println( "Saving Perl file to " + fname );
	 OutputStream os = null;
	 try { os = MyUtils.OpenOutputFile( fname ); } catch ( Exception e ) { os = null; }
	 if ( os != null ) ps = new PrintStream( os );
	 if ( ps != null ) System.setOut( ps );
	 File f = new File( fname );
	 ccname = f.getName();
	 if ( ccname.endsWith( ".pl" ) || ccname.endsWith( ".pm" ) ) 
	    ccname = ccname.substring( 0, ccname.lastIndexOf( '.' ) );
      }
      
      try {
	 Class cls = Class.forName( cname );
	 String sname = cls.getSuperclass() != null ? cls.getSuperclass().getName() : "";
	 String pkg = cname.indexOf( '.' ) > 0 ?
	    cname.substring( 0, cname.lastIndexOf( '.' ) ) : "";

	 System.out.println( "package " + ccname + ";\n" );
	 System.out.println( "#" );
	 System.out.println( "# Class " + ccname + " automatically generated by" );
	 System.out.println( "# csplugins.isb.dreiss.httpdata.xmlrpc.WriteXmlRpcPerlClient based on handler class" );
	 System.out.println( "# " + cname + " by dreiss (dreiss@systemsbiology.org)" );
	 System.out.println( "#\n" );
	 System.out.println( "use XMLRPC::Lite;\n" );
	 System.out.println( "require Exporter;\n@ISA = qw( Exporter );\n" );
	 System.out.println( "@EXPORT = qw( " + ccname + " );\n" );

	 System.out.println( "sub new {" );
	 System.out.println( "\tmy $invocant = shift;" );
	 System.out.println( "\tmy $class = ref( $invocant ) || $invocant;" );
	 System.out.println( "\tmy $self = {" );
	 System.out.println( "\t\tservice => 'cy'," );
	 System.out.println( "\t\tport => 8082," );
	 System.out.println( "\t\thostname => 'localhost'," );
	 System.out.println( "\t\t@_, };    # Remaining args become attributes" );
	 System.out.println( "\tbless( $self, $class );" );
	 System.out.println( "\t$self->{server} = XMLRPC::Lite->proxy( 'http://' . " );
	 System.out.println( "\t\t$self->{hostname} . ':' . $self->{port} );" );
	 System.out.println( "\treturn $self;" );
	 System.out.println( "}\n" );

         System.out.println( "# An alias for " + ccname + "->new():" );
	 System.out.println( "sub " + ccname + " {" );
	 System.out.println( "\treturn " + ccname + "->new( @_ );" );
	 System.out.println( "}\n" );

	 System.out.println( "sub DESTROY {" );
	 System.out.println( "\tmy $self = shift;" );
	 System.out.println( "\tundef $self->{port};" );
	 System.out.println( "\tundef $self->{hostname};" );
	 System.out.println( "\tundef $self->{server};" );
	 System.out.println( "\tundef $self;" );
	 System.out.println( "}\n" );

	 java.lang.reflect.Method methods[] = cls.getMethods();
	 for ( int i = 0; i < methods.length; i ++ ) {
	    String mname = methods[ i ].toString();
	    if ( mname.indexOf( "java.lang.Object." ) > 0 ) continue;
	    mname = mname.replaceAll( "public ", "" );
	    mname = mname.replaceAll( "static ", "" );
	    mname = mname.replaceAll( "native ", "" );
	    mname = mname.replaceAll( "final ", "" );
	    mname = mname.replaceAll( "java.lang.", "" );
	    mname = mname.replaceAll( "java.util.", "" );
	    mname = mname.replaceAll( cname + ".", "" );
	    mname = mname.replaceAll( sname + ".", "" );
	    if ( mname.indexOf( "throws " ) > 0 ) 
	       mname = mname.substring( 0, mname.indexOf( "throws " ) - 1 );
	    if ( mname.startsWith( "void " ) ) continue;

	    String mm = methods[ i ].getName();
	    if ( written.get( mm ) != null ) {
	       System.err.println( "WARNING: Method " + mm + " has duplicate definition." );
	       continue;
	    }
	    System.out.println( "sub " + mm + " {" );
	    System.out.println( "\tmy $self = shift;" );
	    System.out.println( "\treturn $self->{server}->call( $self->{service} . '." + mm + "', @_ )->result;" );
	    System.out.println( "}\n" );
	    written.put( mm, "true" );
	 }
	 System.out.println( "\n1;\n" );
      } catch( Exception e ) {
	 e.printStackTrace();
      }
      if ( ps != null ) { ps.flush(); ps.close(); }
   }
}
