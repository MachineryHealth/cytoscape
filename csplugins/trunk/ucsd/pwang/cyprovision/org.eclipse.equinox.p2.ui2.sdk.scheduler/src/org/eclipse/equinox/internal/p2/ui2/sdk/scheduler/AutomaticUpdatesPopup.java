/*******************************************************************************
 * Copyright (c) 2007, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package org.eclipse.equinox.internal.p2.ui2.sdk.scheduler;

//import org.eclipse.core.runtime.*;
//import org.eclipse.core.runtime.jobs.Job;
//import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
//import org.cytoscape.cyprovision.internal.IDialogSettings;

//import org.eclipse.osgi.util.NLS;

import javax.swing.JDialog;

import org.cytoscape.cyprovision.CyP2Adapter;
import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.Point;

//import org.cytoscape.cyprovision.internal.IPreferenceStore;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;
import java.util.Properties;

/**
 * AutomaticUpdatesPopup is an async popup dialog for notifying
 * the user of updates.
 * 
 * @since 3.4
 */
public class AutomaticUpdatesPopup extends JDialog {
	public static final String[] ELAPSED = {AutomaticUpdateMessages.AutomaticUpdateScheduler_30Minutes, AutomaticUpdateMessages.AutomaticUpdateScheduler_60Minutes, AutomaticUpdateMessages.AutomaticUpdateScheduler_240Minutes};
	//private static final long MINUTE = 60 * 1000L;
	//private static final String PREFS_HREF = "PREFS"; //$NON-NLS-1$
	//private static final String DIALOG_SETTINGS_SECTION = "AutomaticUpdatesPopup"; //$NON-NLS-1$
	//private static final int POPUP_OFFSET = 20;

	//IPreferenceStore prefs;
	Properties prefs;
	long remindDelay = -1L;
	IPropertyChangeListener prefListener; // defined as inner class
	//WorkbenchJob remindJob;
	boolean downloaded;
	//Composite dialogArea;
	//Link remindLink;
	MouseAdapter clickListener;

	//public AutomaticUpdatesPopup(javax.swing.JFrame parentShell, boolean alreadyDownloaded, Properties prefs) {
	//	System.out.println("Scheduler.AutoamticUpatesPopup constructor A");
	//}
	
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        taMessage = new javax.swing.JTextArea();
        lbSetUp = new javax.swing.JLabel();
        lbReminderOptions = new javax.swing.JLabel();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Updates Available");
        setBackground(new java.awt.Color(255, 255, 0));
        setResizable(false);
        taMessage.setBackground(new java.awt.Color(255, 255, 51));
        taMessage.setColumns(20);
        taMessage.setRows(5);
        taMessage.setText("Updates are available for your software.\nClick to review and install updates.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(taMessage, gridBagConstraints);

        lbSetUp.setBackground(new java.awt.Color(255, 255, 0));
        lbSetUp.setText("Set up ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        getContentPane().add(lbSetUp, gridBagConstraints);

        lbReminderOptions.setBackground(new java.awt.Color(255, 255, 0));
        lbReminderOptions.setForeground(new java.awt.Color(0, 0, 255));
        lbReminderOptions.setText("Reminder options");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(lbReminderOptions, gridBagConstraints);

        pack();
    }// </editor-fold>
    
     
    // Variables declaration - do not modify
    private javax.swing.JLabel lbReminderOptions;
    private javax.swing.JLabel lbSetUp;
    private javax.swing.JTextArea taMessage;
    // End of variables declaration
	
	private IInstallableUnit[] ius;
	private AutomaticUpdater automaticUpdater;
	//public AutomaticUpdatesPopup(JComponent parentShell, boolean alreadyDownloaded, IPreferenceStore prefs) {
	//public AutomaticUpdatesPopup(javax.swing.JFrame parentShell, boolean alreadyDownloaded, Properties prefs, boolean p) {
	public AutomaticUpdatesPopup(AutomaticUpdater automaticUpdater, javax.swing.JFrame parentShell, boolean alreadyDownloaded, IInstallableUnit[] ius) {

		//System.out.println("Scheduler.AutoamticUpatesPopup constructor");
		this.ius = ius;
		this.automaticUpdater = automaticUpdater;
		initComponents();
		this.pack();
		
		//super(parentShell, PopupDialog.INFOPOPUPRESIZE_SHELLSTYLE | SWT.MODELESS, false, true, true, false, false, AutomaticUpdateMessages.AutomaticUpdatesPopup_UpdatesAvailableTitle, null);

		downloaded = alreadyDownloaded;
		//this.prefs = prefs;
		remindDelay = computeRemindDelay();
		
		clickListener = new MyMouseListener(this,ius);
		taMessage.addMouseListener(clickListener);
		
		MouseAdapter l = new MouseAdapter() {
			public void mouseClicked(MouseEvent e) {
				System.out.println("Reminder options is clicked!");
				//PreferenceDialog dialog = PreferencesUtil.createPreferenceDialogOn(getShell(), PreferenceConstants.PREF_PAGE_AUTO_UPDATES, null, null);
				//dialog.open();
			}
		};
		lbReminderOptions.addMouseListener(l);
		
		prefListener = new IPropertyChangeListener();
		//prefs.addPropertyChangeListener(prefListener);
	}
	
	
	class MyMouseListener extends MouseAdapter {
		private AutomaticUpdatesPopup popup;
		private IInstallableUnit[] ius;
		public MyMouseListener(AutomaticUpdatesPopup popup, IInstallableUnit[] ius){
			this.popup = popup;
			this.ius = ius;
		}
		
		public void mouseClicked(MouseEvent e) {
			//AutomaticUpdatePlugin.getDefault().getAutomaticUpdater().launchUpdate();

			popup.dispose();
			UpdateDialog dlg = new UpdateDialog(automaticUpdater);
			CyP2Adapter adapter = (CyP2Adapter) ServiceHelper.getService(AutomaticUpdatePlugin.getContext(), CyP2Adapter.PROVISION_SERVICE_NAME);
			dlg.setLocationRelativeTo(adapter.getCyDesktop());
		}
	}
	

	class IPropertyChangeListener implements PropertyChangeListener{
		public void propertyChange(PropertyChangeEvent evt){
			handlePreferenceChange(evt);
		}
	}

	/*
	protected Control createDialogArea(Composite parent) {
		dialogArea = new Composite(parent, SWT.NONE);
		dialogArea.setLayoutData(new GridData(GridData.FILL_BOTH));
		GridLayout layout = new GridLayout();
		layout.numColumns = 1;
		dialogArea.setLayout(layout);
		dialogArea.addMouseListener(clickListener);

		// The "click to update" label
		Label infoLabel = new Label(dialogArea, SWT.NONE);
		if (downloaded)
			infoLabel.setText(AutomaticUpdateMessages.AutomaticUpdatesPopup_ClickToReviewDownloaded);
		else
			infoLabel.setText(AutomaticUpdateMessages.AutomaticUpdatesPopup_ClickToReviewNotDownloaded);
		infoLabel.setLayoutData(new GridData(GridData.FILL_BOTH));
		infoLabel.addMouseListener(clickListener);

		createRemindSection(dialogArea);

		return dialogArea;

	}


	private void createRemindSection(Composite parent) {
		remindLink = new Link(parent, SWT.MULTI | SWT.WRAP | SWT.RIGHT);
		updateRemindText();
		remindLink.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				PreferenceDialog dialog = PreferencesUtil.createPreferenceDialogOn(getShell(), PreferenceConstants.PREF_PAGE_AUTO_UPDATES, null, null);
				dialog.open();

			}
		});
		remindLink.setLayoutData(new GridData(GridData.FILL_BOTH));
	}

	private void updateRemindText() {
		if (prefs.getBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE))
			lbReminderOptions.setText(NLS.bind(AutomaticUpdateMessages.AutomaticUpdatesPopup_RemindAndPrefLink, new String[] {prefs.getString(PreferenceConstants.PREF_REMIND_ELAPSED), PREFS_HREF}));
		else
			lbReminderOptions.setText(AutomaticUpdateMessages.AutomaticUpdatesPopup_PrefLinkOnly);
		//lbReminderOptions.getParent().layout(true);
	}
*/
	
	/*
	protected IDialogSettings getDialogBoundsSettings() {
		IDialogSettings settings = AutomaticUpdatePlugin.getDefault().getDialogSettings();
		IDialogSettings section = settings.getSection(DIALOG_SETTINGS_SECTION);
		if (section == null) {
			section = settings.addNewSection(DIALOG_SETTINGS_SECTION);
		}
		return section;
	}
*/

	
	/*
	public int open() {
		prefListener = new IPropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent event) {
				handlePreferenceChange(event);
			}
		};
		prefs.addPropertyChangeListener(prefListener);
		return super.open();
	}
*/
	public boolean close() {
		return close(true);
	}

	public boolean close(boolean remind) {
		/*
		if (remind && prefs.getBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE))
			scheduleRemindJob();
		else
			cancelRemindJob();
		if (prefListener != null) {
			//prefs.removePropertyChangeListener(prefListener);
			prefListener = null;
		}
		*/
		return true; //super.close();

	}

	void scheduleRemindJob() {
		// Cancel any pending remind job if there is one
		//if (remindJob != null)
		//	remindJob.cancel();
		// If no updates have been found, there is nothing to remind
		if (remindDelay < 0)
			return;
		//remindJob = new WorkbenchJob(AutomaticUpdateMessages.AutomaticUpdatesPopup_ReminderJobTitle) {
		//	public IStatus runInUIThread(IProgressMonitor monitor) {
		//		if (monitor.isCanceled())
		//			return Status.CANCEL_STATUS;
		//		open();
		//		return Status.OK_STATUS;
		//	}
		//};
		//remindJob.setSystem(true);
		//remindJob.setPriority(Job.INTERACTIVE);
		//remindJob.schedule(remindDelay);

	}

	/*
	 * Computes the number of milliseconds for the delay
	 * in reminding the user of updates
	 */
	long computeRemindDelay() {
		/*
		if (prefs.getBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE)) {
			String elapsed = prefs.getString(PreferenceConstants.PREF_REMIND_ELAPSED);
			for (int d = 0; d < ELAPSED.length; d++)
				if (ELAPSED[d].equals(elapsed))
					switch (d) {
						case 0 :
							// 30 minutes
							return 30 * MINUTE;
						case 1 :
							// 60 minutes
							return 60 * MINUTE;
						case 2 :
							// 240 minutes
							return 240 * MINUTE;
					}
		}
		*/
		return -1L;
	}

	void cancelRemindJob() {
		//if (remindJob != null) {
		//	remindJob.cancel();
		//	remindJob = null;
		//}
	}

	//protected void configureShell(Shell newShell) {
	//	super.configureShell(newShell);
	//	newShell.setText(AutomaticUpdateMessages.AutomaticUpdatesPopup_UpdatesAvailableTitle);
	//}

	/**
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.jface.window.Window#getInitialLocation(org.eclipse.swt.graphics.Point)
	 */
	protected Point getInitialLocation(Point initialSize) {
		return new Point(100,100);
	}

	void handlePreferenceChange(PropertyChangeEvent event) {
		/*
		
		if (PreferenceConstants.PREF_REMIND_SCHEDULE.equals(event.getProperty())) {
			// Reminders turned on
			if (prefs.getBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE)) {
				if (remindLink == null)
					createRemindSection(dialogArea);
				else {
					updateRemindText();
					getShell().layout(true, true);
				}
				computeRemindDelay();
				scheduleRemindJob();
			} else { // reminders turned off
				if (remindLink != null) {
					updateRemindText();
					getShell().layout(true, true);
				}
				cancelRemindJob();
			}
		} else if (PreferenceConstants.PREF_REMIND_ELAPSED.equals(event.getProperty())) {
			// Reminding schedule changed
			computeRemindDelay();
			scheduleRemindJob();
		}
		*/
		
	}

	/*
	 * Overridden so that clicking in the title menu area closes the dialog.
	 * Also creates a close box menu in the title area.
	 */
	/*
	protected Control createTitleMenuArea(Composite parent) {
		Composite titleComposite = (Composite) super.createTitleMenuArea(parent);
		titleComposite.addMouseListener(clickListener);

		ToolBar toolBar = new ToolBar(titleComposite, SWT.FLAT);
		ToolItem closeButton = new ToolItem(toolBar, SWT.PUSH, 0);

		GridDataFactory.fillDefaults().align(SWT.END, SWT.CENTER).applyTo(toolBar);
		closeButton.setImage(ProvUIImages.getImage(ProvUIImages.IMG_TOOL_CLOSE));
		closeButton.setHotImage(ProvUIImages.getImage(ProvUIImages.IMG_TOOL_CLOSE_HOT));
		closeButton.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				close();
			}
		});
		// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=177183
		toolBar.addMouseListener(new MouseAdapter() {
			public void mouseDown(MouseEvent e) {
				close();
			}
		});
		return titleComposite;
	}
*/
	
	/*
	 * Overridden to adjust the span of the title label.
	 * Reachy, reachy....
	 * (non-Javadoc)
	 * @see org.eclipse.jface.dialogs.PopupDialog#createTitleControl(org.eclipse.swt.widgets.Composite)
	 */
	
	/*
	protected Control createTitleControl(Composite parent) {
		Control control = super.createTitleControl(parent);
		Object data = control.getLayoutData();
		if (data instanceof GridData) {
			((GridData) data).horizontalSpan = 1;
		}
		return control;
	}
	*/
}
