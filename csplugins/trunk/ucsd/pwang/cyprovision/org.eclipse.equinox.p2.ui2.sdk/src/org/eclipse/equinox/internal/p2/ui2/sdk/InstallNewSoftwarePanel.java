package org.eclipse.equinox.internal.p2.ui2.sdk;

import java.awt.event.*;
import javax.swing.*;
import org.eclipse.equinox.internal.provisional.p2.ui2.QueryableMetadataRepositoryManager;
import org.eclipse.equinox.internal.provisional.p2.ui2.dialogs.AddSiteDialog;
import org.eclipse.equinox.internal.provisional.p2.ui2.policy.Policy;

public class InstallNewSoftwarePanel extends JPanel implements ActionListener, ItemListener {

	JDialog dlg;
	Policy policy;
	String profileId;
	QueryableMetadataRepositoryManager manager;

	/** Creates new form AvailableSoftwarePanel */
	public InstallNewSoftwarePanel(JDialog dlg, Policy policy, String profileId, QueryableMetadataRepositoryManager manager) {
		initComponents();
		this.dlg = dlg;
		this.policy = policy;
		this.profileId = profileId;
		this.manager = manager;

		taAvailableSoftware.setEditable(false);
		
		btnCancel.addActionListener(this);
		btnInstall.addActionListener(this);
		btnAddSite.addActionListener(this);

		chkGroupByCategory.addItemListener(this);
		chkShowOnlyLatestVersion.addItemListener(this);
		chkHideAlreadyInstalled.addItemListener(this);
	}

	public void actionPerformed(ActionEvent e) {
		if (e.getSource() instanceof JButton) {
			JButton btn = (JButton) e.getSource();
			if (btn == btnCancel) {
				dlg.dispose();
			} else if (btn == btnInstall) {
				System.out.println("btnInstall is clicked");
			} else if (btn == btnAddSite) {
				//System.out.println("btnAddSite is clicked");
				AddSiteDialog addSiteDlg = new AddSiteDialog(dlg, true, policy);
				addSiteDlg.setLocationRelativeTo(dlg);
				addSiteDlg.setSize(400, 150);
				addSiteDlg.setVisible(true);
			}

		}
	}

	public void itemStateChanged(ItemEvent ie) {

		if (ie.getSource() instanceof JCheckBox) {
			JCheckBox chk = (JCheckBox) ie.getSource();
			if (chk == chkGroupByCategory) {
				System.out.println("chbGroupByCategory is clicked");
			} else if (chk == chkShowOnlyLatestVersion) {
				System.out.println("chkShowOnlyLatestVersion is clicked");
			} else if (chk == chkHideAlreadyInstalled) {
				System.out.println("btnAddSite is clicked");
			}

		}

	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc=" Generated Code ">                          
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;

		taAvailableSoftware = new javax.swing.JTextArea();
		jPanel5 = new javax.swing.JPanel();
		jLabel3 = new javax.swing.JLabel();
		tfAllAvailableSites = new javax.swing.JComboBox();
		btnAddSite = new javax.swing.JButton();
		jLabel1 = new javax.swing.JLabel();
		tfFilter = new javax.swing.JTextField();
		pnlTree = new javax.swing.JPanel();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTree1 = new javax.swing.JTree();
		pnlDetails = new javax.swing.JPanel();
		jPanel3 = new javax.swing.JPanel();
		chkShowOnlyLatestVersion = new javax.swing.JCheckBox();
		chkGroupByCategory = new javax.swing.JCheckBox();
		chkHideAlreadyInstalled = new javax.swing.JCheckBox();
		jLabel2 = new javax.swing.JLabel();
		pnlButton = new javax.swing.JPanel();
		btnInstall = new javax.swing.JButton();
		btnCancel = new javax.swing.JButton();

		setLayout(new java.awt.GridBagLayout());

		taAvailableSoftware.setColumns(20);
		taAvailableSoftware.setRows(5);
		taAvailableSoftware.setText("Available Software\nCheck the items that you wish to install\n");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
		add(taAvailableSoftware, gridBagConstraints);

		jPanel5.setLayout(new java.awt.GridBagLayout());

		jLabel3.setText("Work with:");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
		jPanel5.add(jLabel3, gridBagConstraints);

		tfAllAvailableSites.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"All Available Sites", "Item 4"}));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		jPanel5.add(tfAllAvailableSites, gridBagConstraints);

		btnAddSite.setText("Add...");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
		jPanel5.add(btnAddSite, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.gridheight = 2;
		gridBagConstraints.ipadx = 373;
		gridBagConstraints.ipady = 45;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
		add(jPanel5, gridBagConstraints);

		jLabel1.setText("Go to the Available Software Sites preferences");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
		add(jLabel1, gridBagConstraints);

		tfFilter.setText("Type filter text");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
		add(tfFilter, gridBagConstraints);

		pnlTree.setLayout(new java.awt.GridBagLayout());

		pnlTree.setBorder(javax.swing.BorderFactory.createCompoundBorder());
		pnlTree.setPreferredSize(new java.awt.Dimension(276, 324));
		pnlTree.setVerifyInputWhenFocusTarget(false);
		jScrollPane1.setViewportView(jTree1);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		pnlTree.add(jScrollPane1, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 5;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
		add(pnlTree, gridBagConstraints);

		pnlDetails.setBorder(javax.swing.BorderFactory.createTitledBorder("Details"));
		pnlDetails.setMinimumSize(new java.awt.Dimension(0, 50));
		pnlDetails.setPreferredSize(new java.awt.Dimension(0, 50));
		javax.swing.GroupLayout pnlDetailsLayout = new javax.swing.GroupLayout(pnlDetails);
		pnlDetails.setLayout(pnlDetailsLayout);
		pnlDetailsLayout.setHorizontalGroup(pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 620, Short.MAX_VALUE));
		pnlDetailsLayout.setVerticalGroup(pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 24, Short.MAX_VALUE));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 6;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 10);
		add(pnlDetails, gridBagConstraints);

		jPanel3.setLayout(new java.awt.GridBagLayout());

		chkShowOnlyLatestVersion.setSelected(true);
		chkShowOnlyLatestVersion.setText("Show only the latest versions of available software");
		chkShowOnlyLatestVersion.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
		chkShowOnlyLatestVersion.setMargin(new java.awt.Insets(0, 0, 0, 0));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
		jPanel3.add(chkShowOnlyLatestVersion, gridBagConstraints);

		chkGroupByCategory.setText("Group items by category");
		chkGroupByCategory.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
		chkGroupByCategory.setMargin(new java.awt.Insets(0, 0, 0, 0));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
		jPanel3.add(chkGroupByCategory, gridBagConstraints);

		chkHideAlreadyInstalled.setText("Hide items that are already installed");
		chkHideAlreadyInstalled.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
		chkHideAlreadyInstalled.setMargin(new java.awt.Insets(0, 0, 0, 0));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
		jPanel3.add(chkHideAlreadyInstalled, gridBagConstraints);

		jLabel2.setText("What is already installed?");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridy = 1;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
		jPanel3.add(jLabel2, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 7;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 10);
		add(jPanel3, gridBagConstraints);

		btnInstall.setText("Install");
		pnlButton.add(btnInstall);

		btnCancel.setText("Cancel");
		pnlButton.add(btnCancel);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 8;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		gridBagConstraints.insets = new java.awt.Insets(10, 10, 20, 10);
		add(pnlButton, gridBagConstraints);

	}// </editor-fold>                        

	// Variables declaration - do not modify                     
	private javax.swing.JButton btnAddSite;
	private javax.swing.JButton btnCancel;
	private javax.swing.JButton btnInstall;
	private javax.swing.JCheckBox chkGroupByCategory;
	private javax.swing.JCheckBox chkShowOnlyLatestVersion;
	private javax.swing.JCheckBox chkHideAlreadyInstalled;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel5;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTree jTree1;
	private javax.swing.JPanel pnlButton;
	private javax.swing.JPanel pnlDetails;
	private javax.swing.JPanel pnlTree;
	private javax.swing.JTextArea taAvailableSoftware;
	private javax.swing.JComboBox tfAllAvailableSites;
	private javax.swing.JTextField tfFilter;
	// End of variables declaration                   

}
