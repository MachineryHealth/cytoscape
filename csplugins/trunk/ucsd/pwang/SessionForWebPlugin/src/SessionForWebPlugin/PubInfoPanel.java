package SessionForWebPlugin;

import java.io.File;
import javax.swing.JFileChooser;
//import java.awt.image.ImageFilter;
import javax.swing.filechooser.FileFilter;
import javax.swing.JOptionPane;
import java.io.BufferedReader;
import java.io.FileReader;
import java.net.URL;
/**
*
* @author  pwang
*/
public class PubInfoPanel extends javax.swing.JPanel {
   

    
    /** Creates new form PubInfoPanel */
    public PubInfoPanel() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">                          
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lbPublicationURL = new javax.swing.JLabel();
        tfPublicationURL = new javax.swing.JTextField();
        btnChooserPublicationURL = new javax.swing.JButton();
        lbCoverImage = new javax.swing.JLabel();
        tfCoverImage = new javax.swing.JTextField();
        btnChooserCoverImage = new javax.swing.JButton();
        lbPDFFile = new javax.swing.JLabel();
        tfPDFFile = new javax.swing.JTextField();
        btnChooserPDFFile = new javax.swing.JButton();
        lbSuplementURL = new javax.swing.JLabel();
        tfSupplementURL = new javax.swing.JTextField();
        btnChooserSupplementURL = new javax.swing.JButton();
        lbSuplementMaterial = new javax.swing.JLabel();
        tfSupplementMaterial = new javax.swing.JTextField();
        btnChooserSupplementMaterial = new javax.swing.JButton();
        lbLegends = new javax.swing.JLabel();
        tfLegends = new javax.swing.JTextField();
        btnChooserLegends = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        lbPublicationURL.setText("Publication URL");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        add(lbPublicationURL, gridBagConstraints);

        tfPublicationURL.setEnabled(false);
        tfPublicationURL.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(tfPublicationURL, gridBagConstraints);

        btnChooserPublicationURL.setText("...");
        btnChooserPublicationURL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooserPublicationURLActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 10);
        add(btnChooserPublicationURL, gridBagConstraints);

        lbCoverImage.setText("Cover Image");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        add(lbCoverImage, gridBagConstraints);

        tfCoverImage.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(tfCoverImage, gridBagConstraints);

        btnChooserCoverImage.setText("...");
        btnChooserCoverImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooserCoverImageActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 10);
        add(btnChooserCoverImage, gridBagConstraints);

        lbPDFFile.setText("PDF file");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        add(lbPDFFile, gridBagConstraints);

        tfPDFFile.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(tfPDFFile, gridBagConstraints);

        btnChooserPDFFile.setText("...");
        btnChooserPDFFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooserPDFFileActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 10);
        add(btnChooserPDFFile, gridBagConstraints);

        lbSuplementURL.setText("Supplement URL");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        add(lbSuplementURL, gridBagConstraints);

        tfSupplementURL.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(tfSupplementURL, gridBagConstraints);

        btnChooserSupplementURL.setText("...");
        btnChooserSupplementURL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooserSupplementURLActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 10);
        add(btnChooserSupplementURL, gridBagConstraints);

        lbSuplementMaterial.setText("Supplement material");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        add(lbSuplementMaterial, gridBagConstraints);

        tfSupplementMaterial.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(tfSupplementMaterial, gridBagConstraints);

        btnChooserSupplementMaterial.setText("...");
        btnChooserSupplementMaterial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooserSupplementMaterialActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 10);
        add(btnChooserSupplementMaterial, gridBagConstraints);

        lbLegends.setText("Legends");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        add(lbLegends, gridBagConstraints);

        tfLegends.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(tfLegends, gridBagConstraints);

        btnChooserLegends.setText("...");
        btnChooserLegends.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooserLegendsActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 10);
        add(btnChooserLegends, gridBagConstraints);

    }// </editor-fold>                        

    private void btnChooserLegendsActionPerformed(java.awt.event.ActionEvent evt) {                                                  
    	JFileChooser fc = new JFileChooser();
    	fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    	int retValue = fc.showDialog(this, "OK");
    	if (retValue == JFileChooser.APPROVE_OPTION){
        	if (valiateLegends(fc.getSelectedFile())){
        		this.legendsDir = fc.getSelectedFile();
            	this.tfLegends.setText(legendsDir.getAbsolutePath());        		
        	}
        	else {
        		JOptionPane.showMessageDialog(this, "No Legend_FAQ.html file is found in the directory", "Warning", JOptionPane.WARNING_MESSAGE);
        	}
    	}    	
    }                                         


    // Legends directory must have a file 'legend_FAQ.html'
    private boolean valiateLegends(File pLegendsDir){
    	File[] files = pLegendsDir.listFiles();
    	for (int i=0; i< files.length; i++){
    		if (files[i].getName().endsWith("legend_FAQ.html")){
    			return true;
    		}
    	}
    	return false;
    }
    
    private void btnChooserSupplementMaterialActionPerformed(java.awt.event.ActionEvent evt) {                                                             
    	JFileChooser fc = new JFileChooser();
    	int retValue = fc.showDialog(this, "OK");
    	if (retValue == JFileChooser.APPROVE_OPTION){
        	this.supplementMaterialFile = fc.getSelectedFile();
        	this.tfSupplementMaterial.setText(supplementMaterialFile.getAbsolutePath());
    	}    }                                                            

    private void btnChooserSupplementURLActionPerformed(java.awt.event.ActionEvent evt) {                                                        
    	JFileChooser fc = new JFileChooser();
    	int retValue = fc.showDialog(this, "OK");
    	if (retValue == JFileChooser.APPROVE_OPTION){
    		if (containsURL(fc.getSelectedFile())){
            	supplementURLFile = fc.getSelectedFile();
            	this.tfSupplementURL.setText(supplementURLFile.getAbsolutePath());    			
    		}
    		else {
           		JOptionPane.showMessageDialog(this, "Please make sure URL exists in the file", "Warning", JOptionPane.WARNING_MESSAGE);
    		}
    	}
    }                                                       

    // Check if a file contains a URL
    private boolean containsURL(File pFile){
    	String url = "";
    	try {
            BufferedReader in = new BufferedReader(new FileReader(pFile));
            String str;
            while ((str = in.readLine()) != null) {
                url += str;
            }
            in.close();
        } catch (Exception e) {
        }

       try {
            URL theURL = new URL(url);        	
        }
        catch(Exception e){
        	return false;
        }
        
    	return true;
    }
    
    private void btnChooserPDFFileActionPerformed(java.awt.event.ActionEvent evt) {                                                  
    	JFileChooser fc = new JFileChooser();
    	fc.addChoosableFileFilter(new PDFFilter());
    	
    	int retValue = fc.showDialog(this, "OK");
    	if (retValue == JFileChooser.APPROVE_OPTION){
        	pdfFile = fc.getSelectedFile();
        	tfPDFFile.setText(pdfFile.getAbsolutePath());
    	}

    }                                                 

    private void btnChooserCoverImageActionPerformed(java.awt.event.ActionEvent evt) {                                                     
    	JFileChooser fc = new JFileChooser();
    	int retValue = fc.showDialog(this, "OK");
    	if (retValue == JFileChooser.APPROVE_OPTION){
        	coverImageFile = fc.getSelectedFile();
        	tfCoverImage.setText(coverImageFile.getAbsolutePath());
    	}
    }                                                    

    private void btnChooserPublicationURLActionPerformed(java.awt.event.ActionEvent evt) {                                                         
    	JFileChooser fc = new JFileChooser();
    	int retValue = fc.showDialog(this, "OK");
    	if (retValue == JFileChooser.APPROVE_OPTION){
    		if (containsURL(fc.getSelectedFile())){
            	this.publicationURLFile = fc.getSelectedFile();
            	this.tfPublicationURL.setText(publicationURLFile.getAbsolutePath());    			
    		}
    		else {
           		JOptionPane.showMessageDialog(this, "Please make sure URL exists in the file", "Warning", JOptionPane.WARNING_MESSAGE);
    		}
    	}
    }                                                        
    
    
    // Variables declaration - do not modify                     
    private javax.swing.JButton btnChooserCoverImage;
    private javax.swing.JButton btnChooserLegends;
    private javax.swing.JButton btnChooserPDFFile;
    private javax.swing.JButton btnChooserPublicationURL;
    private javax.swing.JButton btnChooserSupplementMaterial;
    private javax.swing.JButton btnChooserSupplementURL;
    private javax.swing.JLabel lbCoverImage;
    private javax.swing.JLabel lbLegends;
    private javax.swing.JLabel lbPDFFile;
    private javax.swing.JLabel lbPublicationURL;
    private javax.swing.JLabel lbSuplementMaterial;
    private javax.swing.JLabel lbSuplementURL;
    private javax.swing.JTextField tfCoverImage;
    private javax.swing.JTextField tfLegends;
    private javax.swing.JTextField tfPDFFile;
    private javax.swing.JTextField tfPublicationURL;
    private javax.swing.JTextField tfSupplementMaterial;
    private javax.swing.JTextField tfSupplementURL;
    // End of variables declaration                   
 
    public File coverImageFile = null;
    public File legendsDir = null;
    public File pdfFile = null;
    public File publicationURLFile = null;
    public File supplementURLFile = null;
    public File supplementMaterialFile = null;
    
    
    //
    class PDFFilter extends FileFilter {
    	public boolean accept(File f){
    		if (f.isDirectory()){
    			return true;
    		}
    		
    		String ext = Utils.getExtension(f);
    		if (ext != null && ext.equalsIgnoreCase("pdf")){
    			return true;
    		}
    		return false;
    	}
    	public String getDescription(){
    		return "pdf";
    	}
    }
}