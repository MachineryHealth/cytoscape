/*
 Copyright (c) 2006, 2007, The Cytoscape Consortium (www.cytoscape.org)

 The Cytoscape Consortium is:
 - Institute for Systems Biology
 - University of California San Diego
 - Memorial Sloan-Kettering Cancer Center
 - Institut Pasteur
 - Agilent Technologies

 This library is free software; you can redistribute it and/or modify it
 under the terms of the GNU Lesser General Public License as published
 by the Free Software Foundation; either version 2.1 of the License, or
 any later version.

 This library is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF
 MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and
 documentation provided hereunder is on an "as is" basis, and the
 Institute for Systems Biology and the Whitehead Institute
 have no obligations to provide maintenance, support,
 updates, enhancements or modifications.  In no event shall the
 Institute for Systems Biology and the Whitehead Institute
 be liable to any party for direct, indirect, special,
 incidental or consequential damages, including lost profits, arising
 out of the use of this software and its documentation, even if the
 Institute for Systems Biology and the Whitehead Institute
 have been advised of the possibility of such damage.  See
 the GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with this library; if not, write to the Free Software Foundation,
 Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
*/
package org.cytoscape.StringClient;

import java.awt.Color;
import java.net.MalformedURLException;
import java.net.URL;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import cytoscape.actions.LoadNetworkTask;
import cytoscape.data.webservice.CyWebServiceEvent;
import cytoscape.data.webservice.CyWebServiceException;
import cytoscape.data.webservice.NetworkImportWebServiceClient;
import cytoscape.data.webservice.WebServiceClient;
import cytoscape.data.webservice.WebServiceClientImplWithGUI;
import cytoscape.data.webservice.WebServiceClientManager.ClientType;
import cytoscape.layout.Tunable;
import cytoscape.util.ModulePropertiesImpl;
import cytoscape.visual.ArrowShape;
import cytoscape.visual.EdgeAppearanceCalculator;
import cytoscape.visual.GlobalAppearanceCalculator;
import cytoscape.visual.NodeAppearanceCalculator;
import cytoscape.visual.NodeShape;
import cytoscape.visual.VisualPropertyType;
import cytoscape.visual.VisualStyle;
import cytoscape.visual.calculators.AbstractCalculator;
import cytoscape.visual.calculators.EdgeCalculator;
import cytoscape.visual.calculators.NodeCalculator;
import cytoscape.visual.mappings.DiscreteMapping;
import cytoscape.visual.mappings.ObjectMapping;
import cytoscape.visual.mappings.PassThroughMapping;
import static cytoscape.visual.VisualPropertyType.EDGE_LABEL;
import static cytoscape.visual.VisualPropertyType.NODE_LABEL;
import org.cytoscape.StringClient.StringStub;

/**
 * String web service client.
 *
 * Note: String web service API is still in beta testing, unstable (May 2008)
 * subject to change.
 *
 * @author pwang
 * @version 0.1
 * @since Cytoscape 2.6
 *
 */


public class StringClient extends WebServiceClientImplWithGUI<StringStub, JPanel>  implements NetworkImportWebServiceClient {
	
	private static final Icon ABOUT_ICON = new ImageIcon(StringClient.class.getResource("/images/logo_String_smallest.gif"));
	
	// Display name of this client.
	private static final String DISPLAY_NAME = "String Web Service Client";

	// Client ID. This should be unique.
	private static final String CLIENT_ID = "string";

	// Instance of this client.  This is a singleton.
	private static WebServiceClient<StringStub> client = new StringClient();

	// Visual Style name for the networks generated by this client.
	private static final String DEF_VS_NAME = "String Style";
	private VisualStyle defaultVS = null;

	private void setDescription() {
		//description = "http://string.embl.de/";
		description = "http://string-stitch.blogspot.com/2008/02/we-have-api.html";
	}
	
	/**
	 * Return instance of this client.
	 * @return
	 */
	public static WebServiceClient<StringStub> getClient() {
		return client;
	}

	/**
	 * Creates a new StringClient object.
	 */
	private StringClient() {
		super(CLIENT_ID, DISPLAY_NAME, new ClientType[] { ClientType.NETWORK }, null, new StringStub(), null);
		
		setDescription();
		// Set properties for this client.
		setProperty();
	}

	/**
	 * Set props for this client. Will be used by Tunable.
	 */
	private void setProperty() {
		props = new ModulePropertiesImpl(clientID, "wsc");
		
		props.add(new Tunable("additional_network_nodes", "Additional network nodes", Tunable.INTEGER,
               new Integer(0)));
		props.add(new Tunable("limit", "limit", Tunable.INTEGER, new Integer(10)));		
		props.add(new Tunable("network_depth", "Network depth", Tunable.INTEGER, new Integer(1)));
		props.add(new Tunable("required_score", "Required score", Tunable.INTEGER, new Integer(400)));
		props.add(new Tunable("species", "species", Tunable.STRING, new String("auto_detect")));
	}

	/**
	 *  DOCUMENT ME!
	 *
	 * @param e DOCUMENT ME!
	 */
	@Override
	public void executeService(CyWebServiceEvent e) throws CyWebServiceException {
		
		if (e.getSource().equals(CLIENT_ID)) {
			
			String queryStr = e.getParameter().toString();
			clientStub.setQueryParam(props, queryStr);

			//System.out.println("clientStub.getURLstr()="+clientStub.getURLstr()+ "\n");

			// We have to run Network URL loading in a different thread to avoid dead-lock. Otherwise, 
			// The UIs of Task Managers (web service and network loading) would wait for each other
			LoadNetworkThread url_load_thread = new LoadNetworkThread(clientStub.getURLstr(), "URLLoadNetwork_thread");
		}
	}

	
	/**
	 *  Returns default visual style for networks build from this database
	 *
	 * @return  DOCUMENT ME!
	 */
	public VisualStyle getDefaultVisualStyle() {
		if (defaultVS == null) {
			defaultVS = defaultVisualStyleBuilder();
		}

		return defaultVS;
	}

	/**
	 * Generate default visual style.
	 * The style is database-dependent.
	 *
	 * @return default visual style.
	 */
	private VisualStyle defaultVisualStyleBuilder() {
		final VisualStyle defStyle = new VisualStyle(DEF_VS_NAME);

		NodeAppearanceCalculator nac = defStyle.getNodeAppearanceCalculator();
		EdgeAppearanceCalculator eac = defStyle.getEdgeAppearanceCalculator();
		GlobalAppearanceCalculator gac = defStyle.getGlobalAppearanceCalculator();

		gac.setDefaultBackgroundColor(Color.black);

		PassThroughMapping m = new PassThroughMapping("", AbstractCalculator.ID);

		NodeCalculator calc = new NodeCalculator(DEF_VS_NAME + "-" + "NodeLabelMapping", m, null,
		                                         NODE_LABEL);
		PassThroughMapping me = new PassThroughMapping("", "detection method");

		EdgeCalculator calce = new EdgeCalculator(DEF_VS_NAME + "-" + "EdgeLabelMapping", me, null,
		                                          EDGE_LABEL);
		nac.setCalculator(calc);
		nac.getDefaultAppearance().set(VisualPropertyType.NODE_FILL_COLOR, Color.white);
		nac.getDefaultAppearance().set(VisualPropertyType.NODE_SHAPE, NodeShape.ELLIPSE);
		nac.getDefaultAppearance().set(VisualPropertyType.NODE_OPACITY, 100);
		nac.getDefaultAppearance().set(VisualPropertyType.NODE_BORDER_OPACITY, 0);
		nac.getDefaultAppearance().set(VisualPropertyType.NODE_LINE_WIDTH, 1);
		nac.getDefaultAppearance().set(VisualPropertyType.NODE_WIDTH, 80);
		nac.getDefaultAppearance().set(VisualPropertyType.NODE_HEIGHT, 35);
		nac.getDefaultAppearance().set(VisualPropertyType.NODE_LABEL_COLOR, Color.white);
		nac.setNodeSizeLocked(false);

		eac.setCalculator(calce);
		eac.getDefaultAppearance().set(VisualPropertyType.EDGE_COLOR, Color.green);
		eac.getDefaultAppearance().set(VisualPropertyType.EDGE_LABEL_COLOR, Color.red);
		eac.getDefaultAppearance().set(VisualPropertyType.EDGE_FONT_SIZE, 5);
		eac.getDefaultAppearance().set(VisualPropertyType.EDGE_OPACITY, 120);
		eac.getDefaultAppearance().set(VisualPropertyType.EDGE_SRCARROW_OPACITY, 120);
		eac.getDefaultAppearance().set(VisualPropertyType.EDGE_TGTARROW_OPACITY, 120);
		eac.getDefaultAppearance().set(VisualPropertyType.EDGE_LABEL_OPACITY, 80);
		eac.getDefaultAppearance().set(VisualPropertyType.EDGE_LINE_WIDTH, 5);
		eac.getDefaultAppearance().set(VisualPropertyType.EDGE_LABEL, "");

		// Prey and Bait
		DiscreteMapping targetShape = new DiscreteMapping(ArrowShape.NONE,
		                                                  "target experimental role",
		                                                  ObjectMapping.EDGE_MAPPING);

		targetShape.putMapValue("bait", ArrowShape.DIAMOND);
		targetShape.putMapValue("prey", ArrowShape.CIRCLE);

		EdgeCalculator targetShapeCalc = new EdgeCalculator(DEF_VS_NAME + "-"
		                                                    + "EdgeTargetArrowShapeMapping",
		                                                    targetShape, null,
		                                                    VisualPropertyType.EDGE_TGTARROW_SHAPE);

		DiscreteMapping sourceShape = new DiscreteMapping(ArrowShape.NONE,
		                                                  "source experimental role",
		                                                  ObjectMapping.EDGE_MAPPING);

		sourceShape.putMapValue("bait", ArrowShape.DIAMOND);
		sourceShape.putMapValue("prey", ArrowShape.CIRCLE);

		EdgeCalculator sourceShapeCalc = new EdgeCalculator(DEF_VS_NAME + "-"
		                                                    + "EdgeSourceArrowShapeMapping",
		                                                    sourceShape, null,
		                                                    VisualPropertyType.EDGE_SRCARROW_SHAPE);

		DiscreteMapping targetColor = new DiscreteMapping(Color.black, "target experimental role",
		                                                  ObjectMapping.EDGE_MAPPING);

		targetColor.putMapValue("bait", Color.red);
		targetColor.putMapValue("prey", Color.red);

		EdgeCalculator targetColorCalc = new EdgeCalculator(DEF_VS_NAME + "-"
		                                                    + "EdgeTargetArrowColorMapping",
		                                                    targetColor, null,
		                                                    VisualPropertyType.EDGE_TGTARROW_COLOR);

		DiscreteMapping sourceColor = new DiscreteMapping(Color.black, "source experimental role",
		                                                  ObjectMapping.EDGE_MAPPING);

		sourceColor.putMapValue("bait", Color.red);
		sourceColor.putMapValue("prey", Color.red);

		EdgeCalculator sourceColorCalc = new EdgeCalculator(DEF_VS_NAME + "-"
		                                                    + "EdgeSourceArrowColorMapping",
		                                                    targetColor, null,
		                                                    VisualPropertyType.EDGE_SRCARROW_COLOR);

		eac.setCalculator(sourceShapeCalc);
		eac.setCalculator(targetShapeCalc);
		eac.setCalculator(sourceColorCalc);
		eac.setCalculator(targetColorCalc);

		return defStyle;
	}

	public Icon getIcon(IconSize type) {
		return ABOUT_ICON;
	}
	
	// Inner class to do network URL loading
	class LoadNetworkThread implements Runnable {
		Thread runner;
		String URLstr;
		
		public LoadNetworkThread(String URLStr, String thread_name){
			this.URLstr = URLStr;
			runner = new Thread(this, thread_name);
			runner.start();
		}

		public void run() {
			try {
				LoadNetworkTask.loadURL(new URL(URLstr), true);
			} catch (MalformedURLException e3) {
				JOptionPane.showMessageDialog(null, "URL error!", "Warning",
			 	                             JOptionPane.INFORMATION_MESSAGE);
			}
		}
	}
}
