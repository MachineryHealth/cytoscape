package org.cytoscape.groups.results.internal;

// System imports
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.HashMap;
import java.util.Set;
import java.awt.Dimension;

// Swing imports
import javax.swing.JOptionPane;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JPanel;
import javax.swing.DefaultListModel;
import javax.swing.ListSelectionModel;
import javax.swing.BorderFactory;
import javax.swing.SwingConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

// Cytoscape imports
import cytoscape.CyNode;
import cytoscape.CyEdge;
import cytoscape.CyNetwork;
import cytoscape.Cytoscape;
import cytoscape.plugin.CytoscapePlugin;
import cytoscape.util.CyNetworkNaming;
import cytoscape.view.CyNetworkView;
import cytoscape.visual.VisualStyle;

// Cytoscape group system imports
//import cytoscape.actions.Node;
import cytoscape.groups.CyGroup;
import cytoscape.groups.CyGroupManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;


/**
 * The GroupPanel is the implementation for the Cytopanel that presents
 * the group list mechanism to the user.
 */
public class GroupPanel extends JPanel implements ListSelectionListener, ActionListener {
	//JList navList;
	DefaultListModel listModel;

	public GroupPanel() {
		super();

		initComponents();
			
		// Create the listModel
		listModel = new DefaultListModel();

		navList.setModel(listModel);
		navList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		navList.setLayoutOrientation(JList.VERTICAL);

		navList.setBackground(Cytoscape.getDesktop().getBackground());

		listView.setBorder(BorderFactory.createEtchedBorder());
		listView.setBackground(Cytoscape.getDesktop().getBackground());
		
		// Add event listeners
		navList.addListSelectionListener(this);
		btnCreateMetaNode.addActionListener(this);
		btnCreateNetworkView.addActionListener(this);
	}


	public void actionPerformed(ActionEvent e){
		Object obj = e.getSource();
		if (obj instanceof JButton){
			JButton btn = (JButton) obj;
			if (btn == btnCreateMetaNode){				
				Object[] selectedItems = navList.getSelectedValues();
				
				if (selectedItems.length >0){
					for (int i=0; i< selectedItems.length; i++){
						CyGroup theGroup = (CyGroup) selectedItems[i];
						createMetaNode(theGroup);
					}
				}
			}
			else if (btn == btnCreateNetworkView) {
				Object[] selectedItems = navList.getSelectedValues();
				
				if (selectedItems.length >0){
					for (int i=0; i< selectedItems.length; i++){
						CyGroup theGroup = (CyGroup) selectedItems[i];
						createNetworkView(theGroup);
					}
				}				
			}
		}
	}

	
	private void  createMetaNode(CyGroup pGroup){
		System.out.println("Create metaNode for group: "+ pGroup.getGroupName());	
		
		
	}
	
	
	private void  createNetworkView(CyGroup pGroup){

		List<CyNode> nodes = pGroup.getNodes();
		List edges = pGroup.getInnerEdges();
		
		String newNetworkTitle = CyNetworkNaming.getSuggestedNetworkTitle(pGroup.getGroupName());
		CyNetwork new_network = Cytoscape.createNetwork(nodes,edges,newNetworkTitle);

		
		// Should we keep VS and node positions, if yes, we need a reference to the parent network
		//CyNetworkView new_view = Cytoscape.getNetworkView(new_network.getIdentifier());

		/*
		 
		if (new_view == Cytoscape.getNullNetworkView()) {
			return;
		}

        String vsName = "default";
        
        // keep the node positions
        Iterator i = new_network.nodesIterator();

        while (i.hasNext()) {
        	CyNode node = (CyNode) i.next();
        	new_view.getNodeView(node)
        	.setOffset(new_view.getNodeView(node).getXPosition(),
        			new_view.getNodeView(node).getYPosition());
        }

        new_view.fitContent();

        // Set visual style
        VisualStyle newVS = new_view.getVisualStyle();

        if (newVS != null) {
        	vsName = newVS.getName();
        }

        Cytoscape.getVisualMappingManager().setVisualStyle(vsName);

		*/
		
	}
	
	
	
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">                          
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        listView = new javax.swing.JScrollPane();
        navList = new javax.swing.JList();
        pnlButtons = new javax.swing.JPanel();
        btnCreateMetaNode = new javax.swing.JButton();
        btnCreateNetworkView = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        listView.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        navList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listView.setViewportView(navList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(listView, gridBagConstraints);

        pnlButtons.setLayout(new java.awt.GridBagLayout());

        btnCreateMetaNode.setText("Create MetaNode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 20);
        pnlButtons.add(btnCreateMetaNode, gridBagConstraints);

        btnCreateNetworkView.setText("Create Network View");
        pnlButtons.add(btnCreateNetworkView, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(pnlButtons, gridBagConstraints);

    }// </editor-fold>                        
   
    // Variables declaration - do not modify                     
    private javax.swing.JButton btnCreateMetaNode;
    private javax.swing.JButton btnCreateNetworkView;
    private javax.swing.JScrollPane listView;
    private javax.swing.JList navList;
    private javax.swing.JPanel pnlButtons;
    // End of variables declaration                   

	
	/**
	 * This is called when the user changes the selection
 	 *
	 * @param e the event that caused us to be called
 	 */
	public void valueChanged(ListSelectionEvent e) {
		if (e.getValueIsAdjusting() == false) {
			CyNetwork network = Cytoscape.getCurrentNetwork();
			for (int i = 0; i < listModel.getSize(); i++) {
				if (navList.getSelectionModel().isSelectedIndex(i)) {
					CyGroup group = (CyGroup)listModel.getElementAt(i);
					network.setSelectedNodeState(group.getNodes(), true);
				} else {
					CyGroup group = (CyGroup)listModel.getElementAt(i);
					network.setSelectedNodeState(group.getNodes(), false);
				}
			}
			Cytoscape.getCurrentNetworkView().updateView();
		}
	}

	public void groupCreated(CyGroup group) {
		listModel.addElement(group);
	}

	public void groupRemoved(CyGroup group) {
		listModel.removeElement(group);
	}

	public void groupChanged(CyGroup group) {
		System.out.println("groupChanged event for group " + group.toString());
	}
}

