package edu.ucsd.bioeng.kono.keggbrowser.ui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.geom.Point2D;
import java.io.IOException;
import java.util.Map;

import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import org.jdesktop.swingx.border.DropShadowBorder;
import org.jdesktop.swingx.painter.gradient.BasicGradientPainter;

import cytoscape.Cytoscape;
import edu.ucsd.bioeng.kono.keggbrowser.reader.KEGGDataFetcher;

public class KEGGBrowserMainGUI extends JDialog {
	
	private Map<String, String> available;
	KEGGDataFetcher rd;
	
	private final String species;
	
	public KEGGBrowserMainGUI(final String species) {
		super(Cytoscape.getDesktop(), true);
		this.species = species;
		
		
		initComponents();
		iconList.setCellRenderer(new IconCellRenderer());

		available = KEGGDataFetcher.getFiles(species);
		DefaultListModel model = new DefaultListModel();
		iconList.setModel(model);
		for(String name: available.keySet()) {
			
			System.out.println("name ======= " + name);
			
			
			model.addElement(available.get(name));
		}
		iconList.addListSelectionListener(new ListSelectionListener() {

			public void valueChanged(ListSelectionEvent e) {
				
				
			}
			
		});
		repaint();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed" desc=" Generated Code ">
	private void initComponents() {
		mainPanel = new org.jdesktop.swingx.JXTitledPanel();
		iconListScrollPane = new javax.swing.JScrollPane();
		iconList = new javax.swing.JList();
		applyButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();

		//setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		//setTitle("Select New Value");
		mainPanel.setTitlePainter(new BasicGradientPainter(new Point2D.Double(.2d, 0),
		                                                   new Color(Color.gray.getRed(),
		                                                             Color.gray.getGreen(),
		                                                             Color.gray.getBlue(), 100),
		                                                   new Point2D.Double(.8d, 0), Color.WHITE));
		mainPanel.setTitle("KEGG Pathway for " + species);
		mainPanel.setTitleFont(new java.awt.Font("SansSerif", 1, 14));

		iconList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		iconListScrollPane.setViewportView(iconList);

		applyButton.setText("Apply");
		applyButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					applyButtonActionPerformed(evt);
				}
			});

		cancelButton.setText("Cancel");
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					cancelButtonActionPerformed(evt);
				}
			});
		

		org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel
		                                                                                      .getContentContainer());
		mainPanel.getContentContainer().setLayout(mainPanelLayout);
		mainPanelLayout.setHorizontalGroup(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
		                                                  .add(org.jdesktop.layout.GroupLayout.TRAILING,
		                                                       mainPanelLayout.createSequentialGroup()
		                                                                      .addContainerGap(128,
		                                                                                       Short.MAX_VALUE)
		                                                                      .add(cancelButton)
		                                                                      .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
		                                                                      .add(applyButton)
		                                                                      .addContainerGap())
		                                                  .add(iconListScrollPane,
		                                                       org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
		                                                       291, Short.MAX_VALUE));
		mainPanelLayout.setVerticalGroup(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
		                                                .add(org.jdesktop.layout.GroupLayout.TRAILING,
		                                                     mainPanelLayout.createSequentialGroup()
		                                                                    .add(iconListScrollPane,
		                                                                         org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
		                                                                         312,
		                                                                         Short.MAX_VALUE)
		                                                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
		                                                                    .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
		                                                                                        .add(applyButton)
		                                                                                        .add(cancelButton))
		                                                                    .addContainerGap()));

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
		                                .add(mainPanel,
		                                     org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
		                                     org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
		                                     Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
		                              .add(mainPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
		                                   org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
		                                   Short.MAX_VALUE));
//		pack();
	} // </editor-fold>

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
		dispose();
	}

	private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {
		String fileName = "hsa" + available.keySet().toArray()[0].toString() + ".owl";
		
		System.out.print("++++++++ " + fileName);
		
		try {
			rd.loadPathway(fileName);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		dispose();
	}

	// Variables declaration - do not modify
	private javax.swing.JButton applyButton;
	private javax.swing.JButton cancelButton;
	private javax.swing.JList iconList;
	private javax.swing.JScrollPane iconListScrollPane;
	private org.jdesktop.swingx.JXTitledPanel mainPanel;
	private DefaultListModel model;
	
	
	
	
	public class IconCellRenderer extends JLabel implements ListCellRenderer {
		private final Font SELECTED_FONT = new Font("SansSerif", Font.ITALIC, 12);
		private final Font NORMAL_FONT = new Font("SansSerif", Font.BOLD, 10);
		private final Color SELECTED_COLOR = new Color(30, 30, 80, 25);
		private final Color SELECTED_FONT_COLOR = new Color(0, 150, 255, 120);
		

		public IconCellRenderer() {
			
			setOpaque(true);
		}

		public Component getListCellRendererComponent(JList list, Object value, int index,
		                                              boolean isSelected, boolean cellHasFocus) {
			

			setText(value.toString());
			
			setFont(isSelected ? SELECTED_FONT : NORMAL_FONT);

			this.setVerticalTextPosition(SwingConstants.CENTER);
			this.setVerticalAlignment(SwingConstants.CENTER);
			
			this.setHorizontalTextPosition(SwingConstants.CENTER);
			this.setHorizontalAlignment(SwingConstants.CENTER);
			this.setPreferredSize(new Dimension(1, 40));

			setBackground(isSelected ? SELECTED_COLOR : list.getBackground());
			setForeground(isSelected ? SELECTED_FONT_COLOR : list.getForeground());
			
			this.setBorder(new DropShadowBorder());

			return this;
		}
	}

}
