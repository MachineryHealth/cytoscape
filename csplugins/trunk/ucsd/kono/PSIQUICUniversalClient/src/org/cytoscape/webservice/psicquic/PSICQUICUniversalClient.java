package org.cytoscape.webservice.psicquic;

import static cytoscape.data.webservice.CyWebServiceEvent.WSResponseType.SEARCH_FINISHED;

import java.net.URI;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

import javax.swing.JPanel;
import javax.xml.namespace.QName;

import org.cytoscape.webservice.psicquic.mapper.Mitab25Mapper;
import org.cytoscape.webservice.psicquic.ontology.UniprotSearchUtil;
import org.cytoscape.webservice.psicquic.ui.ResultDialog;
import org.hupo.psi.mi.psicquic.DbRef;
import org.hupo.psi.mi.psicquic.QueryResponse;
import org.hupo.psi.mi.psicquic.RequestInfo;

import cytoscape.CyNetwork;
import cytoscape.Cytoscape;
import cytoscape.data.webservice.CyWebServiceEvent;
import cytoscape.data.webservice.CyWebServiceException;
import cytoscape.data.webservice.DatabaseSearchResult;
import cytoscape.data.webservice.NetworkImportWebServiceClient;
import cytoscape.data.webservice.WebServiceClient;
import cytoscape.data.webservice.WebServiceClientImplWithGUI;
import cytoscape.data.webservice.CyWebServiceEvent.WSEventType;
import cytoscape.data.webservice.WebServiceClientManager.ClientType;
import cytoscape.layout.Tunable;
import cytoscape.logger.CyLogger;
import cytoscape.util.ModulePropertiesImpl;
import cytoscape.visual.VisualStyle;

public class PSICQUICUniversalClient extends
		WebServiceClientImplWithGUI<PSICQUICServiceRegistory, JPanel> implements
		NetworkImportWebServiceClient {

	private static final long serialVersionUID = 4485772700287524894L;

	private static final String[] IMPORT_MODE = { "Detection Method",
			"Interaction ID" };
	private static final String[] IMPORT_DATA_FORMAT = { "MITAB25",
			"PSI-MI XML 2.5" };
	private static final String[] SEARCH_MODE = { "Interactor ID(s)", "Query",
			"Interaction ID(s)", "Pipeline" };

	private enum Mode {
		SEARCH, IMPORT;
	}

	private void setDescription() {
		description = "http://code.google.com/p/psicquic/";
	}

	private void setProperty() {
		props = new ModulePropertiesImpl(clientID, "wsc");

		final PSICQUICServiceRegistory searchClient = ((PSICQUICServiceRegistory) clientStub);
		final Map<URI, String> serviceNames = searchClient.getServiceNames();
		int serviceCount = serviceNames.size();

		// General setting

//		props.add(new Tunable("search_mode", "Search Mode",
//				Tunable.LIST, new Integer(0), (Object) SEARCH_MODE,
//				(Object) null, 0));
		props.add(new Tunable("block_size", "Block Size", Tunable.INTEGER,
				new Integer(100)));
		props.add(new Tunable("timeout", "Timeout (sec.)", Tunable.INTEGER,
				new Integer(6000)));

//		int count = 1;
//		for (URI key : serviceNames.keySet()) {
//			props.add(new Tunable(serviceNames.get(key), "Service " + count + ": " + key,
//					Tunable.GROUP, new Integer(2)));
//			props.add(new Tunable(serviceNames.get(key) + "_data_format", "Data format",
//					Tunable.LIST, new Integer(0), (Object) IMPORT_DATA_FORMAT,
//					(Object) null, 0));
//			props.add(new Tunable(serviceNames.get(key) + "_edge_creation", "Edge creation mode",
//					Tunable.LIST, new Integer(0), (Object) IMPORT_MODE,
//					(Object) null, 0));
//			count++;
//		}

	}

	// private static final Icon ABOUT_ICON = new ImageIcon(
	// PSICQUICUniversalClient.class.getResource("/images/psi.gif"));

	// Display name of this client.
	private static final String DISPLAY_NAME = "PSICQUIC Universal Web Service Client";

	// Client ID. This should be unique.
	private static final String CLIENT_ID = "psicquic";

	// // Instance of this client. This is a singleton.
	private static WebServiceClient<PSICQUICServiceRegistory> client;

	// Visual Style name for the networks generated by this client.
	private static final String DEF_VS_NAME = "PSI-MI 25 Style";
	private VisualStyle defaultVS = null;

	private Map<URI, QueryResponse> sResult;
	private List<DbRef> queryList;
	
	static {
		 try {
			client = new PSICQUICUniversalClient();
		} catch (Exception e) {
			CyLogger.getLogger().error("Could not initialize PSICQUIC Client.", e);
		}
	}

	private PSICQUICUniversalClient() throws Exception {
		super(CLIENT_ID, DISPLAY_NAME, new ClientType[] { ClientType.NETWORK },
				null, new PSICQUICServiceRegistory(), null);

		setDescription();
		// Set properties for this client.
		setProperty();
	}

	public static WebServiceClient<PSICQUICServiceRegistory> getClient() {
		return client;
	}

	public VisualStyle getDefaultVisualStyle() {
		return PSI25VisualStyleBuilder.getDefVS();
	}

	@Override
	public void executeService(CyWebServiceEvent e)
			throws CyWebServiceException {

		if (e.getSource().equals(CLIENT_ID)) {
			if (e.getEventType().equals(WSEventType.IMPORT_NETWORK)) {
				importNetwork(e.getParameter(), null);
			} else if (e.getEventType().equals(WSEventType.EXPAND_NETWORK)) {
				importNetwork(e.getParameter(), Cytoscape.getCurrentNetwork());
			} else if (e.getEventType().equals(WSEventType.SEARCH_DATABASE)) {
				search(e.getParameter().toString(), e);
			}
		}

	}

	
	
	private void search(String query, CyWebServiceEvent<?> e)
			throws CyWebServiceException {

		final PSICQUICServiceRegistory searchClient = ((PSICQUICServiceRegistory) clientStub);
		sResult = null;
		int blockSize = 100;
		try{
			blockSize = Integer.parseInt(props.getValue("block_size"));
		} catch( Exception exp ) {
			blockSize = 100;
		}
		
		final RequestInfo info = new RequestInfo();
		info.setResultType(PSICQUICReturnType.COUNT.getTypeName());
		info.setBlockSize(blockSize);
		try {
			System.out.println("** Submit Search Query: " + query);
			
//			List<String> candidates = UniprotSearchUtil.getInteractorByKeyword(query);
//			StringBuilder builder = new StringBuilder();
//			int i=1;
//			for(String id: candidates) {
//				builder.append(id + " ");
//				System.out.println(i + ": " + id);
//				i++;
//			}
			
			queryList = buildInteractorList(query);
			
			sResult = searchClient.getCount(queryList, info, "OR");
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new CyWebServiceException(
					CyWebServiceException.WSErrorCode.REMOTE_EXEC_FAILED);
		}

		if (sResult == null)
			return;

		WSEventType nextMove = e.getNextMove();
		if (nextMove == null)
			nextMove = WSEventType.IMPORT_NETWORK;

		Integer total = 0;
		for (URI key : sResult.keySet())
			total = total + sResult.get(key).getResultInfo().getTotalResults();

		Cytoscape.firePropertyChange(SEARCH_FINISHED.toString(), this.clientID,
				new DatabaseSearchResult<Map<URI, QueryResponse>>(total,
						sResult, nextMove));

	}
	
	private void importNetwork(Object result, CyNetwork e)
			throws CyWebServiceException {
		
		System.out.println("========Import called!!!!!!!!!!!!!!!!!");

		PSICQUICServiceRegistory importClient = ((PSICQUICServiceRegistory) clientStub);
		Map<URI, List<QueryResponse>> importResult = null;
		final RequestInfo info = new RequestInfo();

		info.setResultType(PSICQUICReturnType.MITAB25.getTypeName());
		info.setBlockSize(100);
		try {
			importResult = importClient.getByInteractorList(queryList, info, "OR");
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new CyWebServiceException(
					CyWebServiceException.WSErrorCode.REMOTE_EXEC_FAILED);
		}

		if (importResult == null)
			return;
		
		// Ask user to display names
		final List<String> defNetworkNames = new ArrayList<String>();
		final Date time = new Date(System.currentTimeMillis());
		final Map<URI, String> nameMap = importClient.getServiceNames();
		Map<URI, String> newNameMap = new HashMap<URI, String>();
		String netName = null;
		for(URI name: importResult.keySet()) {
			netName = time.toString() + ": PSICQUIC: " + nameMap.get(name);
			defNetworkNames.add(netName);
			newNameMap.put(name, netName);
		}
		
		ResultDialog report = new ResultDialog(Cytoscape.getDesktop(), true, newNameMap);
		report.setLocationRelativeTo(Cytoscape.getDesktop());
		report.setVisible(true);

		newNameMap = report.getNewNames();
		
		final Mitab25Mapper mapper = new Mitab25Mapper();
		List<CyNetwork> target = new ArrayList<CyNetwork>();
		
		
		for (URI key : importResult.keySet()) {

			System.out.println("========Import Finished2!!!!!!!!!!!!!!!!!!!\n"
					+ importResult.get(key).size());
			
			StringBuilder builder = new StringBuilder();
			List<QueryResponse> res = importResult.get(key);
			for(QueryResponse qr: res) {
				builder.append(qr.getResultSet().getMitab());
			}
			final CyNetwork net = mapper.map(builder.toString(), newNameMap.get(key)); 
			if(net != null)
				target.add(net);
		}
		if (Cytoscape.getVisualMappingManager().getCalculatorCatalog()
				.getVisualStyle(PSI25VisualStyleBuilder.getDefVS().getName()) == null)
			Cytoscape.getVisualMappingManager().getCalculatorCatalog()
					.addVisualStyle(PSI25VisualStyleBuilder.getDefVS());
		
		for(CyNetwork net: target) {
			Cytoscape.getVisualMappingManager().setVisualStyle(
					PSI25VisualStyleBuilder.getDefVS());
			Cytoscape.getNetworkView(net.getIdentifier()).setVisualStyle(PSI25VisualStyleBuilder.getDefVS().getName());
			Cytoscape.getNetworkView(net.getIdentifier()).redrawGraph(true, false);
		}
	}

	// Build interactor list
	private List<DbRef> buildInteractorList(String query) {
		List<DbRef> interactorList = new ArrayList<DbRef>();

		Pattern pattern2 = Pattern.compile(" +|\n|\t+");
		String[] interactorNames = pattern2.split(query);

		for (String name : interactorNames) {
			System.out.println("==> " + name);
			final DbRef dbRef = new DbRef();
			dbRef.setId(name);
			interactorList.add(dbRef);
		}
		return interactorList;
	}

}
