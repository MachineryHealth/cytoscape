package org.cytoscape.webservice.psicquic;

import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import javax.swing.JPanel;
import javax.xml.namespace.QName;
import javax.xml.ws.WebServiceRef;

import org.hupo.psi.mi.psicquic.DbRefRequest;
import org.hupo.psi.mi.psicquic.NotSupportedMethodException;
import org.hupo.psi.mi.psicquic.NotSupportedTypeException;
import org.hupo.psi.mi.psicquic.PsicquicService;
import org.hupo.psi.mi.psicquic.PsicquicServiceException;
import org.hupo.psi.mi.psicquic.PsicquicService_Service;
import org.hupo.psi.mi.psicquic.QueryResponse;

import cytoscape.Cytoscape;
import cytoscape.data.webservice.CyWebServiceEvent;
import cytoscape.data.webservice.CyWebServiceEventListener;
import cytoscape.data.webservice.CyWebServiceException;
import cytoscape.data.webservice.NetworkImportWebServiceClient;
import cytoscape.data.webservice.WebServiceClient;
import cytoscape.data.webservice.WebServiceClientImplWithGUI;
import cytoscape.data.webservice.WebServiceClientManager;
import cytoscape.data.webservice.CyWebServiceEvent.WSEventType;
import cytoscape.data.webservice.WebServiceClientManager.ClientType;
import cytoscape.layout.Tunable;
import cytoscape.util.ModulePropertiesImpl;
import cytoscape.visual.VisualStyle;

public class PSICQUICUniversalClient extends
		WebServiceClientImplWithGUI<PsicquicService_Service, JPanel> implements
		NetworkImportWebServiceClient {

	private static final long serialVersionUID = 8367238061224151737L;

	private void setDescription() {
		description = "http://www.ebi.ac.uk/intact/site/contents/all_printerfriendly.jsf";
	}

	private void setProperty() {
		props = new ModulePropertiesImpl(clientID, "wsc");

		props.add(new Tunable("max_interactions", "Maximum number of results",
				Tunable.INTEGER, new Integer(50000)));

		props.add(new Tunable("timeout", "Timeout (sec.)", Tunable.INTEGER,
				new Integer(1200)));
		props.add(new Tunable("select_interaction", "Data Source 1: IntAct",
				Tunable.BOOLEAN, new Boolean(false)));
	}

	// private static final Icon ABOUT_ICON = new ImageIcon(
	// PSICQUICUniversalClient.class.getResource("/images/psi.gif"));

	// Display name of this client.
	private static final String DISPLAY_NAME = "PSICQUIC Universal Web Service Client";

	// Client ID. This should be unique.
	private static final String CLIENT_ID = "psicquic";

	// // Instance of this client. This is a singleton.
	private static WebServiceClient<PsicquicService_Service> client = new PSICQUICUniversalClient();

	// Visual Style name for the networks generated by this client.
	private static final String DEF_VS_NAME = "PSI-MI 25 Style";
	private VisualStyle defaultVS = null;

	private Map<String, String> serviceProviders;

	private QueryResponse sResult;

	@WebServiceRef(wsdlLocation = "http://psicquic.googlecode.com/svn-history/r6/trunk/src/main/wsdl/psicquic.wsdl")
	static PsicquicService_Service service;

	private PSICQUICUniversalClient() {
		super(CLIENT_ID, DISPLAY_NAME, new ClientType[] { ClientType.NETWORK },
				null, new PsicquicService_Service(), null);
		
		setDescription();
		// Set properties for this client.
		setProperty();
		
		System.out.println("ServiceName = " + clientStub.getServiceName() );
		
		System.out.println("ServiceURL = " + clientStub.getWSDLDocumentLocation());
		Iterator<QName> ports = clientStub.getPorts();
		while(ports.hasNext()) {
			QName port = ports.next();
			
			System.out.println("ServicePort = " + port.toString());
		}
		
		
	}

	public static WebServiceClient<PsicquicService_Service> getClient() {
		return client;
	}

	public VisualStyle getDefaultVisualStyle() {
		return null;
	}

	@Override
	public void executeService(CyWebServiceEvent e)
			throws CyWebServiceException {

		if (e.getSource().equals(CLIENT_ID)) {
			if (e.getEventType().equals(WSEventType.IMPORT_NETWORK)) {
				importNetwork(e.getParameter(), null);
			} else if (e.getEventType().equals(WSEventType.EXPAND_NETWORK)) {
				importNetwork(e.getParameter(), Cytoscape.getCurrentNetwork());
			} else if (e.getEventType().equals(WSEventType.SEARCH_DATABASE)) {
				search(e.getParameter().toString(), e);
			}
		}

	}

	private void search(String string, CyWebServiceEvent e) {
		// TODO Auto-generated method stub

		final ExecutorService exe = Executors.newCachedThreadPool();
		long startTime = System.currentTimeMillis();

		Future<?> res = null;
		try {
			String query = "";
			res = exe.submit(new SearchTask(query, exe));
			res
					.get((Integer) props.get("timeout").getValue(),
							TimeUnit.SECONDS);

			long endTime = System.currentTimeMillis();
			double sec = (endTime - startTime) / (1000.0);
			System.out
					.println("IntAct DB search finished in " + sec + " msec.");
		} catch (Exception ee) {
			// throw new
			// CyWebServiceException(CyWebServiceException.WSErrorCode.REMOTE_EXEC_FAILED);
		} finally {
			res.cancel(true);
			exe.shutdown();
		}

		if (sResult == null)
			return;

		WSEventType nextMove = e.getNextMove();
		if (nextMove == null)
			nextMove = WSEventType.IMPORT_NETWORK;

		// Cytoscape.firePropertyChange(SEARCH_FINISHED.toString(),
		// this.clientID,
		// new DatabaseSearchResult<SimplifiedSearchResult>(
		// sResult.getTotalResults(),sResult, nextMove));

	}

	private void importNetwork(Object parameter, Object object) {
		// TODO Auto-generated method stub

	}

	class SearchTask implements Callable, CyWebServiceEventListener {

		String query;
		ExecutorService exe;

		public SearchTask(String query, ExecutorService exe) {
			this.query = query;
			this.exe = exe;
			WebServiceClientManager.getCyWebServiceEventSupport()
					.addCyWebServiceEventListener(this);
		}

		public Object call() throws CyWebServiceException {
			PsicquicService searchClient = ((PsicquicService_Service) clientStub)
					.getPsicquic();

			try {
				DbRefRequest request = new DbRefRequest();
				sResult = searchClient.getByInteractor(request);
				sResult.getResultInfo().getResultType();
			} catch (NotSupportedMethodException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (NotSupportedTypeException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (PsicquicServiceException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			return null;
		}

		public void executeService(CyWebServiceEvent event)
				throws CyWebServiceException {

			if (event.getEventType().equals(WSEventType.CANCEL)) {
				throw new CyWebServiceException(
						CyWebServiceException.WSErrorCode.REMOTE_EXEC_FAILED);
			}
		}
	}

}
