package org.cytoscape.webservice.psicquic.ui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Frame;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

import org.cytoscape.webservice.psicquic.ServiceState;

public class SearchResultDialog extends javax.swing.JDialog {

	private static final long serialVersionUID = 6996385373168492882L;

	private DefaultTableModel model;

	private final ServiceState state;

	/**
	 * Creates new form PSICQUICResultDialog
	 * 
	 */
	public SearchResultDialog(Frame parent, final ServiceState states) {
		super(parent, true);
		this.state = states;

		setTableModel();
		initComponents();

		setCoumnWidth();

		pack();
		this.setLocationRelativeTo(parent);
	}
	
	public Set<String> getSelected() {
		final Set<String> selectedService = new HashSet<String>();
		
		for(int i=0; i<model.getRowCount(); i++) {
			Boolean selected = (Boolean) model.getValueAt(i, 0);
			
			if(selected) {
				selectedService.add(model.getValueAt(i, 1).toString());
			}
		}
		
		return selectedService;
	}

	private void setCoumnWidth() {

		resultTable.getTableHeader().setReorderingAllowed(false);
		resultTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		// Checkbox
		resultTable.getColumnModel().getColumn(0).setPreferredWidth(70);
		// Name
		resultTable.getColumnModel().getColumn(1).setPreferredWidth(200);
		// Number of result
		resultTable.getColumnModel().getColumn(2).setPreferredWidth(120);
		// Status
		resultTable.getColumnModel().getColumn(3).setPreferredWidth(100);

	}

	private void setTableModel() {
		resultTable = new javax.swing.JTable(new DefaultTableModel() {

			private static final long serialVersionUID = -7798626850196524108L;

			@Override
			public boolean isCellEditable(int row, int column) {
				final int count = (Integer) model.getValueAt(row, 2);
				final String active = model.getValueAt(row, 3).toString();
				
				if (column == 0 && active.equals("Active") && count != 0)
					return true;
				else
					return false;
			}
			
			public Class<?> getColumnClass(int c) {
	            return getValueAt(0, c).getClass();
	        }
		});

		model = (DefaultTableModel) resultTable.getModel();

		model.addColumn("Import?");
		model.addColumn("Service Name");
		model.addColumn("Records Found");
		model.addColumn("Status");

		System.out.println("########Service count = "
				+ state.getServiceNames().size());
		for (final String serviceName : state.getServiceNames()) {
			Object[] vals = new Object[4];

			vals[1] = serviceName;
			vals[2] = state.getRecentResultCount(serviceName);

			if (state.isActive(serviceName)) {
				vals[3] = "Active";
				if((Integer)vals[2] != 0)
					vals[0] = true;
				else
					vals[0] = false;
			} else {
				vals[0] = false;
				vals[3] = "Inactive";
			}
			model.addRow(vals);
		}

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {
		setTitle("PSICQUIC Import Result");

		titlePanel = new javax.swing.JPanel();
		titleLabel = new javax.swing.JLabel();
		resultScrollPane = new javax.swing.JScrollPane();

		buttonPanel = new javax.swing.JPanel();
		okButton = new javax.swing.JButton();
		mergeButton = new javax.swing.JButton();
		mergeButton = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

		titlePanel.setBackground(java.awt.Color.white);

		titleLabel.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
		titleLabel.setText("PSICQUIC DB Search Result");

		org.jdesktop.layout.GroupLayout titlePanelLayout = new org.jdesktop.layout.GroupLayout(
				titlePanel);
		titlePanel.setLayout(titlePanelLayout);
		titlePanelLayout
				.setHorizontalGroup(titlePanelLayout.createParallelGroup(
						org.jdesktop.layout.GroupLayout.LEADING).add(
						titlePanelLayout.createSequentialGroup()
								.addContainerGap().add(titleLabel)
								.addContainerGap(200, Short.MAX_VALUE)));
		titlePanelLayout.setVerticalGroup(titlePanelLayout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(
				titlePanelLayout
						.createSequentialGroup()
						.addContainerGap()
						.add(titleLabel)
						.addContainerGap(
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE)));

		resultScrollPane.setBackground(java.awt.Color.white);

		resultScrollPane.setViewportView(resultTable);

		buttonPanel.setBackground(java.awt.Color.white);

		okButton.setText("OK");
		okButton.setPreferredSize(new java.awt.Dimension(70, 26));
		okButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				okButtonActionPerformed(evt);
			}
		});

		mergeButton.setText("Cancel");
		mergeButton.setPreferredSize(new java.awt.Dimension(70, 26));
		mergeButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				dispose();
			}
		});

		org.jdesktop.layout.GroupLayout buttonPanelLayout = new org.jdesktop.layout.GroupLayout(
				buttonPanel);
		buttonPanel.setLayout(buttonPanelLayout);
		buttonPanelLayout
				.setHorizontalGroup(buttonPanelLayout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(org.jdesktop.layout.GroupLayout.TRAILING,
								buttonPanelLayout
										.createSequentialGroup()
										.addContainerGap(450, Short.MAX_VALUE)
										.add(mergeButton,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(okButton,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												55,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
										.addContainerGap()));
		buttonPanelLayout
				.setVerticalGroup(buttonPanelLayout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(org.jdesktop.layout.GroupLayout.TRAILING,
								buttonPanelLayout
										.createSequentialGroup()
										.addContainerGap(
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)
										.add(buttonPanelLayout
												.createParallelGroup(
														org.jdesktop.layout.GroupLayout.BASELINE)
												.add(okButton,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
														org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
												.add(mergeButton,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
														org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
										.addContainerGap()));

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(titlePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
						org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
						Short.MAX_VALUE)
				.add(resultScrollPane,
						org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 480,
						Short.MAX_VALUE)
				.add(buttonPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
						org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
						Short.MAX_VALUE));
		layout.setVerticalGroup(layout
				.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(layout
						.createSequentialGroup()
						.add(titlePanel,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(
								org.jdesktop.layout.LayoutStyle.RELATED)
						.add(resultScrollPane,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								250, Short.MAX_VALUE)
						.addPreferredGap(
								org.jdesktop.layout.LayoutStyle.RELATED)
						.add(buttonPanel,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)));

		pack();
	}// </editor-fold>

	private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {
		this.dispose();
	}

	// Variables declaration - do not modify
	private javax.swing.JPanel buttonPanel;
	private javax.swing.JButton mergeButton;
	private javax.swing.JButton okButton;
	private javax.swing.JScrollPane resultScrollPane;
	private javax.swing.JTable resultTable;
	private javax.swing.JLabel titleLabel;
	private javax.swing.JPanel titlePanel;

	// End of variables declaration

	static class SearchResultTableRenderer implements TableCellRenderer {

		public SearchResultTableRenderer() {
		}

		public Component getTableCellRendererComponent(JTable table,
				Object value, boolean isSelected, boolean hasFocus, int row,
				int column) {

			if (value == null)
				return null;

			Boolean target = (Boolean) table.getModel().getValueAt(row, 0);
			
			if (column == 0) {
				JCheckBox checkBox = new JCheckBox();
				checkBox.setSelected((Boolean) value);
				if (target == false)
					return checkBox;
			} else {
				JLabel label = new JLabel(value.toString());

				if (target == false) {
					label.setForeground(Color.red);
				}
				return label;
			}

			return null;

		}
	}

}
