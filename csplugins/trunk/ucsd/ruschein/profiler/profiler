#!/usr/bin/env python
import glob
import os
import re
import sys
import xml.etree.ElementTree


verbose = False
temp_pom_name = "temp_pom.xml"


def PrintUsage():
    print "usage: profiler [--verbose] maven_project_directory"
    exit(-1)


# Returns a list of triples (groupId,artifactId,version) upon success or None upon failure.
def ReadBaselineFile(maven_project_directory):
    try:
        file = open(maven_project_directory + "/baseline.xml", "r")
        tree = xml.etree.ElementTree.parse(file)
        root = tree.getroot()
        replacements = []
        for replace in root.getiterator("replace"):
            groupId = replace.find("groupId")
            if groupId == None:
                return None
            artifactId = replace.find("artifactId")
            if artifactId == None:
                return artifactId
            version = replace.find("version")
            if version == None:
                return None
            replacements.append((groupId.text,artifactId.text,version.text))
        return replacements
    except:
        return None


def RunMavenTest(pom_file_name):
    command = "mvn --quiet --file " + pom_file_name + " clean test"
    if verbose:
        print "profiler: Info: About to run \"" + command + "\"."
    if os.system(command) != 0:
    	return False
    return True


# Returns a dictonary upon success or None upon failure.  The dictionary has the test names as the
# keys and the test execution times (in seconds) as the values.
def ExtractTimingInfoFromSurefireReports(maven_project_directory):
    dict = {}
    for file in glob.glob(maven_project_directory + "/target/surefire-reports/*.xml"):
        tree = xml.etree.ElementTree.parse(file)
        root = tree.getroot()
        for testcase in root.getiterator("testcase"):
            time = testcase.get("time")
            classname = testcase.get("classname")
            name = testcase.get("name")
            dict[classname + "." + name] = float(time)
            if verbose:
                print "profiler: Info: test " + classname + "." + name + " took " + time + "sec"
    return dict


# Returns None if no match was found or the replacement (groupId,artifactId,version) if a match was found
def foundGroupAndArtifactIdMatch(dependency, groupId_artifactId_version_list):
    groupId = dependency.find("{http://maven.apache.org/POM/4.0.0}groupId")
    if groupId == None:
        return None
    artifactId = dependency.find("{http://maven.apache.org/POM/4.0.0}artifactId")
    if artifactId == None:
        return None
    for groupId_artifactId_version in groupId_artifactId_version_list:
        if groupId.text != groupId_artifactId_version[0] or artifactId.text != groupId_artifactId_version[1]:
            continue
        return groupId_artifactId_version
    return None


def SwapBundleVersionNumbers(maven_project_directory, groupId_artifactId_version_list):
    pom_file_name = maven_project_directory + "/pom.xml"
    tree = xml.etree.ElementTree.parse(pom_file_name)
    root = tree.getroot()
    dependencies = root.find("{http://maven.apache.org/POM/4.0.0}dependencies")
    expected_replacement_count = len(groupId_artifactId_version_list)
    actual_replacement_count = 0
    for dependency in dependencies.getiterator("{http://maven.apache.org/POM/4.0.0}dependency"):
        replacement_groupId_artifactId_version = \
            foundGroupAndArtifactIdMatch(dependency, groupId_artifactId_version_list)
        if replacement_groupId_artifactId_version == None:
            continue
        version = dependency.find("{http://maven.apache.org/POM/4.0.0}version")
        if version == None:
            print "profiler: Error: \"version\" tag missing for " + replacement_groupId_artifactId_version[1] \
                + ":" + replacement_groupId_artifactId_version[1] + "!"
            return False
        if verbose:
            print "About to replace " + version.text + " with " + replacement_groupId_artifactId_version[2] + \
                " for " + replacement_groupId_artifactId_version[0] + ":" + replacement_groupId_artifactId_version[1]
        version.text = replacement_groupId_artifactId_version[2]
        ++actual_replacement_count

    if actual_replacement_count == actual_replacement_count:
        file = open(maven_project_directory + "/" + temp_pom_name, "w+")
        xml.etree.ElementTree._namespace_map["http://maven.apache.org/POM/4.0.0"] = "XYZ_ABC"
        xml.etree.ElementTree._namespace_map["http://www.w3.org/2001/XMLSchema-instance"] = "xsi"
        tree.write(file, encoding="UTF-8")
        file.seek(0)
        temp_pom = file.read()
        temp_pom = re.sub("XYZ_ABC:", "", temp_pom)
        temp_pom = re.sub(":XYZ_ABC", "", temp_pom, 1)
        file.truncate(0)
        file.seek(0)
        file.write(temp_pom)
        return True
    print "profiler: Error: Not all version number replacements could be carried out!"
    return False


def GenerateTimingReport(current_version, baseline_version):
    max_deviation = 10.0 # in percent
    print "---------------------------------------- Timing Comparison --------------------------------------------"
    failure_count = 0
    for key in baseline_version.keys():
        baseline_time = baseline_version[key]
        current_time  = current_version[key]
        if baseline_time == 0.0:
            percent_deviation = current_time * 100.0
        else:
            percent_deviation = 100.0 * (current_time - baseline_time) / baseline_time
        print str("Test " + key + " ran %.5f" + "%% slower than the baseline.") % percent_deviation
    if failure_count > 0:
        print str(failure_count) + " failed because current tests were running too slow!"
        exit(1)
    print "-------------------------------------------------------------------------------------------------------"
    return


# Main program starts here:
if len(sys.argv) != 2 and len(sys.argv) != 3:
    PrintUsage()

if len(sys.argv) == 2:
    maven_project_directory = sys.argv[1]
else: # We have 3 arguments.
    if sys.argv[1] != "--verbose":
        PrintUsage()
    else:
        verbose = True
        maven_project_directory = sys.argv[2]

if verbose:
    print "profiler: About to parse baseline version file."
groupId_artifactId_version_list = ReadBaselineFile(maven_project_directory)
if groupId_artifactId_version_list == None:
    print "profiler: Failed to read baseline version from file!"
    exit(-2)

if verbose:
    print "profiler: About to run Maven with the current version."
if not RunMavenTest("pom.xml"):
    print "profiler: Failed to run Maven with the current version!"
    exit(-3)

timing_current_version = ExtractTimingInfoFromSurefireReports(maven_project_directory)

if not SwapBundleVersionNumbers(maven_project_directory, groupId_artifactId_version_list):
    print "profiler: Failed to replace the current version with the baseline version!"
    exit(-4)

if verbose:
    print "profiler: About to run Maven with the baseline version."
if not RunMavenTest(temp_pom_name):
    print "profiler: Failed to run Maven with the baseline version!"
    exit(-6)

if verbose:
    print "profiler: About to delete temporary POM."
os.remove(maven_project_directory + "/" + temp_pom_name)

timing_baseline_version = ExtractTimingInfoFromSurefireReports(maven_project_directory)

GenerateTimingReport(timing_current_version, timing_baseline_version)
