#!/usr/bin/env python
import glob
import os
import shutil
import sys
import xml.etree.ElementTree


verbose = False
temp_pom_name = "temp_pom.xml"


def PrintUsage():
    print "usage: profiler [--verbose] maven_project_directory"
    exit(-1)


# Returns a triple [groupId,artifactId,version] upon success or None upon failure.
def ReadBaselineFile(maven_project_directory):
    try:
        file = open(maven_project_directory + "/baseline.xml", "r")
        tree = xml.etree.ElementTree.parse(file)
        root = tree.getroot()
        groupId = root.find("groupId")
        if groupId == None:
            return None
        artifactId = root.find("artifactId")
        if artifactId == None:
            return artifactId
        version = root.find("version")
        if version == None:
            return None
        return groupId.text,artifactId.text,version.text
    except:
        return None


def RunMavenTest(pom_file_name):
    if os.system("mvn --file " + pom_file_name + " clean test") != 0:
    	return False
    return True


# Returns a dictonary upon success or None upon failure.  The dictionary has the test names as the
# keys and the test execution times (in seconds) as the values.
def ExtractTimingInfoFromSurefireReports(maven_project_directory):
    dict = {}
    for file in glob.glob(maven_project_directory + "/target/surefire-reports/*.xml"):
        tree = xml.etree.ElementTree.parse(file)
        root = tree.getroot()
        for testcase in root.getiterator("testcase"):
            time = testcase.get("time")
            classname = testcase.get("classname")
            name = testcase.get("name")
        dict[classname + "." + name] = float(time)
    return dict


def SwapBundleVersionNumber(maven_project_directory, groupId_artifactId_version):
    pom_file_name = maven_project_directory + "/pom.xml"
    tree = xml.etree.ElementTree.parse(pom_file_name)
    root = tree.getroot()
    dependencies = root.find("{http://maven.apache.org/POM/4.0.0}dependencies")
    for dependency in dependencies.getiterator("{http://maven.apache.org/POM/4.0.0}dependency"):
        groupId = dependency.find("{http://maven.apache.org/POM/4.0.0}groupId")
        if groupId == None or groupId.text != groupId_artifactId_version[0]:
            continue
        artifactId = dependency.find("{http://maven.apache.org/POM/4.0.0}artifactId")
        if artifactId == None or artifactId.text != groupId_artifactId_version[1]:
            continue
        version = dependency.find("{http://maven.apache.org/POM/4.0.0}version")
        version.text = groupId_artifactId_version[2]
        file = open( maven_project_directory + "/" + temp_pom_name, "w")
        tree.write(file, encoding="UTF-8")
        return True
    print "profiler: Error: Can't find a dependency on " + groupId_artifactId_version[0] + ":" + groupId_artifactId_version[1] + " in " + pom_file_name
    return False


def GenerateTimingReport(current_version, baseline_version):
    max_deviation = 10 # in percent
    print "---------------------------------------- Timing Comparison --------------------------------------------"
    failure_count = 0
    for key in baseline_version.keys():
        baseline_time = baseline_version[key]
        current_time  = current_version[key]
        if baseline_version == 0.0:
            percent_deviation = current_time * 100.0
        else:
            percent_deviation = 100.0 * (current_time - baseline_time) / baseline_time
        print "Test " + key + " ran " + str(percent_deviation) + "% slower than the baseline."
    if failure_count > 0:
        print str(failure_count) + " failed because current tests were running too slow!"
        exit(1)
    print "-------------------------------------------------------------------------------------------------------"
    return


# Main program starts here:
if len(sys.argv) != 2 and len(sys.argv) != 3:
    PrintUsage()

if len(sys.argv) == 2:
    maven_project_directory = sys.argv[1]
else: # We have 3 arguments.
    if sys.argv[1] != "--verbose":
        PrintUsage()
    else:
        verbose = True
        maven_project_directory = sys.argv[2]

if verbose:
    print "profiler: About to parse baseline version file."
groupId_artifactId_version = ReadBaselineFile(maven_project_directory)
if groupId_artifactId_version == None:
    print "profiler: Failed to read baseline version from file!"
    exit(-2)

if verbose:
    print "profiler: About to run Maven with the current version."
if not RunMavenTest("pom.xml"):
    print "profiler: Failed to run Maven with the current version!"
    exit(-3)

timing_current_version = ExtractTimingInfoFromSurefireReports(maven_project_directory)

if not SwapBundleVersionNumber(maven_project_directory, groupId_artifactId_version):
    print "profiler: Failed to replace the current version with the baseline version!"
    exit(-4)

if verbose:
    print "profiler: About to run Maven with the baseline version."
if not RunMavenTest(temp_pom_name):
    print "profiler: Failed to run Maven with the baseline version!"
    exit(-6)

if verbose:
    print "profiler: About to delete temporary POM."
os.remove(maven_project_directory + "/" + temp_pom_name)

timing_baseline_version = ExtractTimingInfoFromSurefireReports(maven_project_directory)

GenerateTimingReport(timing_current_version, timing_baseline_version)
