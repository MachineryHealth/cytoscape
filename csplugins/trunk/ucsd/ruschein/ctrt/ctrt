#!/usr/bin/env python
import exceptions
import getopt
import glob
import math
import numpy
import os
import re
import scipy.stats
import sys
import xml.etree.ElementTree


verbose = False
loop_count = 20
temp_pom_name = "temp_pom.xml"


def PrintUsage():
    print "usage: ctrt [--help | -h] [--verbose | -v] [--loop-count=count | -lcount]maven_project_directory"
    print "       The loop count must be at least 20 for reasons having to do with the statistics that are"
    print "       being generated."
    exit(-1)


# Returns a list of triples (groupId,artifactId,version) upon success or None upon failure.
def ReadBaselineFile(maven_project_directory):
    try:
        file = open(maven_project_directory + "/baseline.xml", "r")
        tree = xml.etree.ElementTree.parse(file)
        root = tree.getroot()
        replacements = []
        for replace in root.getiterator("replace"):
            groupId = replace.find("groupId")
            if groupId == None:
                return None
            artifactId = replace.find("artifactId")
            if artifactId == None:
                return artifactId
            version = replace.find("version")
            if version == None:
                return None
            replacements.append((groupId.text,artifactId.text,version.text))
        return replacements
    except:
        return None


# Updates and returns a map from test names to lists of test execution times in ns.
def ExtractTimingInfo(file_name, test_name_to_times_map):
    for line in open(file_name):
        if line.startswith("*** CTRT: "):
            parts = line.split()
            test = parts[2]
            time = float(parts[3])
            if test not in test_name_to_times_map:
                test_name_to_times_map[test] = [time]
            else:
                test_name_to_times_map[test].append(time)
    return test_name_to_times_map


# Runs Maven loop_count times and extracts timing information from the
# .../target/surefire-reports/*-output.txt files and returns it.  Upon failure we return None.
def RunMavenTestAndExtractTimingInfo(pom_file_name, maven_project_directory):
    test_name_to_times_map = { }
    command = "mvn --quiet --file " + pom_file_name + " clean test"
    if verbose:
        print "ctrt: Info: About to run \"" + command + "\" " + str(loop_count) + " times."
    for i in range(loop_count):
        if os.system(command) != 0:
            return None
        for file in glob.glob(maven_project_directory + "/target/surefire-reports/*-output.txt"):
            if verbose:
                print "ctrt: About to extract timing information from " + file
            test_name_to_times_map = ExtractTimingInfo(file, test_name_to_times_map)
    return test_name_to_times_map


# Returns None if no match was found or the replacement (groupId,artifactId,version) if a match was found
def foundGroupAndArtifactIdMatch(dependency, groupId_artifactId_version_list):
    groupId = dependency.find("{http://maven.apache.org/POM/4.0.0}groupId")
    if groupId == None:
        return None
    artifactId = dependency.find("{http://maven.apache.org/POM/4.0.0}artifactId")
    if artifactId == None:
        return None
    for groupId_artifactId_version in groupId_artifactId_version_list:
        if groupId.text != groupId_artifactId_version[0] or artifactId.text != groupId_artifactId_version[1]:
            continue
        return groupId_artifactId_version
    return None


def SwapBundleVersionNumbers(maven_project_directory, groupId_artifactId_version_list):
    effective_pom_file_name = maven_project_directory + "/effective.pom"
    os.system("mvn --quiet help:effective-pom -Doutput='" + effective_pom_file_name + "'")
    tree = xml.etree.ElementTree.parse(effective_pom_file_name)
    os.remove(effective_pom_file_name)
    root = tree.getroot()
    dependencies = root.find("{http://maven.apache.org/POM/4.0.0}dependencies")
    expected_replacement_count = len(groupId_artifactId_version_list)
    actual_replacement_count = 0
    for dependency in dependencies.getiterator("{http://maven.apache.org/POM/4.0.0}dependency"):
        replacement_groupId_artifactId_version = \
            foundGroupAndArtifactIdMatch(dependency, groupId_artifactId_version_list)
        if replacement_groupId_artifactId_version == None:
            continue
        version = dependency.find("{http://maven.apache.org/POM/4.0.0}version")
        if version == None:
            print "ctrt: Error: \"version\" tag missing for " + replacement_groupId_artifactId_version[1] \
                + ":" + replacement_groupId_artifactId_version[1] + "!"
            return False
        if verbose:
            print "About to replace " + version.text + " with " + replacement_groupId_artifactId_version[2] + \
                " for " + replacement_groupId_artifactId_version[0] + ":" + replacement_groupId_artifactId_version[1]
        version.text = replacement_groupId_artifactId_version[2]
        ++actual_replacement_count

    if actual_replacement_count == actual_replacement_count:
        file = open(maven_project_directory + "/" + temp_pom_name, "w+")
        xml.etree.ElementTree._namespace_map["http://maven.apache.org/POM/4.0.0"] = "XYZ_ABC"
        xml.etree.ElementTree._namespace_map["http://www.w3.org/2001/XMLSchema-instance"] = "xsi"
        tree.write(file, encoding="UTF-8")
        file.seek(0)
        temp_pom = file.read()
        temp_pom = re.sub("XYZ_ABC:", "", temp_pom)
        temp_pom = re.sub(":XYZ_ABC", "", temp_pom, 1)
        file.truncate(0)
        file.seek(0)
        file.write(temp_pom)
        return True
    print "ctrt: Error: Not all version number replacements could be carried out!"
    return False


# Returns "dataset1" and "dataset2" with their values replaced by the ranks of the union of their
# values.  (Helper function for MannWhitneyUTest())
def calcRanks(dataset1, dataset2):
    combined = []
    combined += dataset1
    combined += dataset2
    combined_ranks = scipy.stats.rankdata(combined)
    
    ranks1 = []
    len1 = len(dataset1)
    for i in range(len1):
        ranks1.append(combined_ranks[i])

    ranks2 = []
    for i in range(len(dataset2)):
        ranks2.append(combined_ranks[i + len1])

    return ranks1, ranks2


# Returns (significance,median(dataset1),median(dataset2)).  The difference in the medians is
# significant is "significance" <= 0.05.
# Note: This implementatn is based on http://en.wikipedia.org/wiki/Mann-whitney
def MannWhitneyUTest(dataset1, dataset2):
    if len(dataset1) < 20:
        raise ValueError("dataset1 must contain at least 20 values!")
    if len(dataset2) < 20:
        raise ValueError("dataset2 must contain at least 20 values!")

    ranks1, ranks2 = calcRanks(dataset1, dataset2)
    R1 = sum(ranks1)
    R2 = sum(ranks2)
    n1 = len(dataset1)
    n2 = len(dataset2)
    
    U1 = R1 - n1 * (n1 + 1.0) / 2.0
    U2 = R2 - n2 * (n2 + 1.0) / 2.0
    U = min(U1, U2)

    mU = n1 * n2 / 2.0
    sigmaU = math.sqrt((n1 * n2 * (n1 + n2 + 1)) / 12.0)
    z = (U - mU - 0.5) / sigmaU # The -0.5 is a continuity correction
    phi = scipy.stats.norm.cdf(z)
    return 2.0 * min(phi, 1.0 - phi), numpy.median(dataset1), numpy.median(dataset2)


# Returns True if no timing issues were found and False otherwise.  A return value of False is not
# always bad news since a significant speedup also causes a false return since we would then like to
# update the baseline version to the current version in the baseline.xml file.
def GenerateTimingReport(current_test_name_to_times_map, baseline_test_name_to_times_map):
    print "=============================== Test Results =============================================="
    number_of_tests = len(current_test_name_to_times_map)
    no_problems_found = True
    for test_name in current_test_name_to_times_map.keys():
        if not test_name in baseline_test_name_to_times_map:
            print "ctrt: Warning test is only in current version but not the baseline version: " + test_name
            continue
        significance,current_mean,baseline_mean = \
            MannWhitneyUTest(current_test_name_to_times_map[test_name],\
                             baseline_test_name_to_times_map[test_name])
        significance *= n
        is_significant = significance < 0.05
        if is_significant:
            no_problems_found = False
            if baseline_mean == 0.0:
                percent_difference = "unknown"
            else:
                percent_difference = 100.0 * (baseline_mean - current_mean) / baseline_mean
            if percent_difference < 0.0:
                print test_name + ": is " + str(percent_difference) + "% slower than the baseline!"
            else:
                print test_name + ": is " + str(-percent_difference) + "% faster than the baseline!"
        else:
            test_name + ": no significant change found!"
    print "==========================================================================================="
    return no_problems_found


def PrintUsage():
    print "usage: ctrt [--verbose|-v] [[--loop-count=|-l] loop_count] maven_project_directory"
    print "       (Default for loop count is 20.)"
    exit(1)


# Returns the Maven project directory upon success and does not return upon failure.
# Also updates global variables "verbose" and "loop_count".
def ProcessArgs():
    global loop_count, verbose

    try:
        opts, args = getopt.getopt(sys.argv[1:], "hvl:", ["help", "verbose", "loop-count="])
    except getopt.GetoptError, err:
        print str(err)
        exit(2)
    for opt, arg in opts:
        if opt in ("-v", "--verbose"):
            verbose = True
        elif opt in ("-h", "--help"):
            PrintUsage()
        elif opt in ("-l", "--loop-count"):
            try:
                loop_count = int(arg)
                if loop_count < 20:
                    print "ctrt: Error: loop count argument must be at least 20!"
                    PrintUsage()
            except exceptions.ValueError:
                print "ctrt: " + arg + " is not a valid loop count!"
                PrintUsage()
        else:
            assert False, "unhandled option"
    if len(args) != 1:
        PrintUsage()
    return args[0]


def main():
    maven_project_directory = ProcessArgs()
    test_name_to_times_map = { }

    if verbose:
        print "ctrt: About to parse baseline version file."
    groupId_artifactId_version_list = ReadBaselineFile(maven_project_directory)
    if groupId_artifactId_version_list == None:
        print "ctrt: Failed to read baseline version from file!"
        exit(-2)

    if verbose:
        print "ctrt: About to run Maven with the current version."
    current_test_name_to_times_map = RunMavenTestAndExtractTimingInfo("pom.xml", maven_project_directory)
    if current_test_name_to_times_map == None:
        print "ctrt: Failed to run Maven with the current version!"

    if not SwapBundleVersionNumbers(maven_project_directory, groupId_artifactId_version_list):
        print "ctrt: Failed to replace the current version with the baseline version!"
        exit(-4)

    if verbose:
        print "ctrt: About to run Maven with the baseline version."
    baseline_test_name_to_times_map = RunMavenTestAndExtractTimingInfo(temp_pom_name, maven_project_directory)
    if baseline_test_name_to_times_map == None:
        print "ctrt: Failed to run Maven with the baseline version!"
        exit(-6)

    if verbose:
        print "ctrt: About to delete temporary POM."
    os.remove(maven_project_directory + "/" + temp_pom_name)

    if not GenerateTimingReport(current_test_name_to_times_map, baseline_test_name_to_times_map):
        print "*** SIGNIFICANT CHANGES HAVE BEEN DETECTED!! ***"
        exit(1)
    else:
        exit(0)


main()
