package org.idekerlab.ModFindPlugin.ui;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Arrays;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;

import javax.swing.AbstractAction;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingConstants;

import org.idekerlab.ModFindPlugin.SearchParameters;
import org.idekerlab.ModFindPlugin.SearchTask;
import org.jdesktop.layout.GroupLayout;
import org.jdesktop.layout.LayoutStyle;

import cytoscape.CyNetwork;
import cytoscape.Cytoscape;
import cytoscape.data.CyAttributes;
import cytoscape.data.attr.MultiHashMapDefinition;
import cytoscape.data.attr.MultiHashMapDefinitionListener;
import cytoscape.task.ui.JTaskConfig;
import cytoscape.task.util.TaskManager;
import cytoscape.util.swing.NetworkSelectorPanel;
import cytoscape.view.cytopanels.CytoPanel;

/**
 * 
 * @author kono
 */
public class SearchPropertyPanel extends JPanel implements MultiHashMapDefinitionListener {
	private static final long serialVersionUID = -3352470909434196700L;

	private static final double DEF_ALPHA = 1.6;
	private static final double DEF_ALPHA_MUL = 1.0;
	private static final int DEF_DEGREE = 1;
	private static final double DEF_CUTOFF = 20.0;
	
	private Container container;
	private SearchParameters parameters;

	/** Creates new form SearchPropertyPanel */
	public SearchPropertyPanel() {
		initComponents();

		Cytoscape.getEdgeAttributes().getMultiHashMapDefinition()
				.addDataDefinitionListener(this);

		updateAttributeLists();

		// Set defaults
		this.alphaTextField.setText(Double.toString(DEF_ALPHA));
		this.alphaMultiplierTextField.setText(Double.toString(DEF_ALPHA_MUL));
		this.degreeTextField.setText(Integer.toString(DEF_DEGREE));
		this.edgeScoreTextField.setText(Double.toString(DEF_CUTOFF));
	}

	public SearchParameters getParameters() {
		return parameters;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	private void initComponents() {
		this.setLayout(new BorderLayout());
		topPanel = new JPanel();
		
		networkPanel = new NetworkSelectorPanel();
		networkPanel.setBorder(BorderFactory.createTitledBorder("Target Network"));
		
		this.add(networkPanel, BorderLayout.PAGE_START);
		
		edgeAttributePanel = new javax.swing.JPanel();
		physicalEdgeLabel = new javax.swing.JLabel();
		physicalEdgeComboBox = new javax.swing.JComboBox();
		geneticEdgeLabel = new javax.swing.JLabel();
		geneticEdgeComboBox = new javax.swing.JComboBox();
		scorePanel = new javax.swing.JPanel();
		alphaLabel = new javax.swing.JLabel();
		alphaMultiplierLabel = new javax.swing.JLabel();
		alphaTextField = new javax.swing.JTextField();
		alphaMultiplierTextField = new javax.swing.JTextField();
		degreeLabel = new javax.swing.JLabel();
		degreeTextField = new javax.swing.JTextField();
		searchButton = new javax.swing.JButton();
		helpButton = new javax.swing.JButton();
		closeButton = new javax.swing.JButton();
		visualizationPanel = new javax.swing.JPanel();
		edgeScoreLabel = new javax.swing.JLabel();
		edgeScoreTextField = new javax.swing.JTextField();


		edgeAttributePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Edge Attributes"));

		physicalEdgeLabel.setText("Physical:");

		physicalEdgeComboBox.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					edgeComboBoxActionPerformed(evt);
				}
			});

		geneticEdgeLabel.setText("Genetic:");

		geneticEdgeComboBox.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					edgeComboBoxActionPerformed(evt);
				}
			});

		GroupLayout edgeAttributePanelLayout = new GroupLayout(edgeAttributePanel);
		edgeAttributePanel.setLayout(edgeAttributePanelLayout);
		edgeAttributePanelLayout.setHorizontalGroup(
							    edgeAttributePanelLayout.createParallelGroup(GroupLayout.LEADING)
							    .add(edgeAttributePanelLayout.createSequentialGroup()
								 .addContainerGap()
								 .add(edgeAttributePanelLayout.createParallelGroup(GroupLayout.TRAILING, false)
								      .add(geneticEdgeLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								      .add(physicalEdgeLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
								 .add(18, 18, 18)
								 .add(edgeAttributePanelLayout.createParallelGroup(GroupLayout.LEADING)
								      .add(geneticEdgeComboBox, 0, 180, 180)
								      .add(physicalEdgeComboBox, 0, 180, 180))
								 .addContainerGap())
							    );
		edgeAttributePanelLayout.setVerticalGroup(
							  edgeAttributePanelLayout.createParallelGroup(GroupLayout.LEADING)
							  .add(edgeAttributePanelLayout.createSequentialGroup()
							       .add(edgeAttributePanelLayout.createParallelGroup(GroupLayout.BASELINE)
								    .add(physicalEdgeLabel)
								    .add(physicalEdgeComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
							       .addPreferredGap(LayoutStyle.RELATED)
							       .add(edgeAttributePanelLayout.createParallelGroup(GroupLayout.LEADING)
								    .add(geneticEdgeLabel)
								    .add(geneticEdgeComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
							       .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
							  );

		scorePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Score Parameters"));

		alphaLabel.setText("Alpha:");

		alphaMultiplierLabel.setText("Alpha Multiplier:");

		alphaTextField.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					alphaTextFieldActionPerformed(evt);
				}
			});

		alphaMultiplierTextField.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					alphaMultiplierTextFieldActionPerformed(evt);
				}
			});

		degreeLabel.setText("Physical network filter degree (opt.):");

		GroupLayout scorePanelLayout = new GroupLayout(scorePanel);
		scorePanel.setLayout(scorePanelLayout);
		scorePanelLayout.setHorizontalGroup(
						    scorePanelLayout.createParallelGroup(GroupLayout.LEADING)
						    .add(scorePanelLayout.createSequentialGroup()
							 .addContainerGap()
							 .add(scorePanelLayout.createParallelGroup(GroupLayout.LEADING)
							      .add(scorePanelLayout.createSequentialGroup()
								   .add(alphaLabel)
								   .add(70, 70, 70)
								   .add(alphaTextField, GroupLayout.DEFAULT_SIZE, 60, 60))
							      .add(scorePanelLayout.createSequentialGroup()
								   .add(alphaMultiplierLabel)
								   .addPreferredGap(LayoutStyle.RELATED)
								   .add(alphaMultiplierTextField, GroupLayout.DEFAULT_SIZE, 60, 60))
							      .add(scorePanelLayout.createSequentialGroup()
								   .add(degreeLabel)
								   .addPreferredGap(LayoutStyle.RELATED)
								   .add(degreeTextField, GroupLayout.DEFAULT_SIZE, 30, 30)))
							 .addContainerGap())
						    );
		scorePanelLayout.setVerticalGroup(
						  scorePanelLayout.createParallelGroup(GroupLayout.LEADING)
						  .add(scorePanelLayout.createSequentialGroup()
						       .add(scorePanelLayout.createParallelGroup(GroupLayout.BASELINE)
							    .add(alphaLabel)
							    .add(alphaTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
						       .addPreferredGap(LayoutStyle.RELATED)
						       .add(scorePanelLayout.createParallelGroup(GroupLayout.BASELINE)
							    .add(alphaMultiplierLabel)
							    .add(alphaMultiplierTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
						       .addPreferredGap(LayoutStyle.RELATED)
						       .add(scorePanelLayout.createParallelGroup(GroupLayout.BASELINE)
							    .add(degreeLabel)
							    .add(degreeTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
						       .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
						  );

		searchButton.setText("Search");
		searchButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					searchButtonActionPerformed(evt);
				}
			});

		helpButton.setText("?");
		helpButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					helpButtonActionPerformed(evt);
				}
			});

		closeButton.setText("Close");
		closeButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					final CytoPanel cytoPanel = Cytoscape.getDesktop().getCytoPanel(SwingConstants.WEST);
					final int index = cytoPanel.indexOfComponent(container);
					if (index >= 0)
						cytoPanel.remove(index);
				}
			});

		visualizationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Visualization Options"));

		edgeScoreLabel.setText("Edge Score Cutoff:");


		GroupLayout visualizationPanelLayout = new GroupLayout(visualizationPanel);
		visualizationPanel.setLayout(visualizationPanelLayout);
		visualizationPanelLayout.setHorizontalGroup(
							    visualizationPanelLayout.createParallelGroup(GroupLayout.LEADING)
							    .add(visualizationPanelLayout.createSequentialGroup()
								 .addContainerGap()
								 .add(edgeScoreLabel)
								 .add(18, 18, 18)
								 .add(edgeScoreTextField, GroupLayout.DEFAULT_SIZE, 50, 50)
								 .addContainerGap())
							    );
		visualizationPanelLayout.setVerticalGroup(
							  visualizationPanelLayout.createParallelGroup(GroupLayout.LEADING)
							  .add(visualizationPanelLayout.createSequentialGroup()
							       .add(visualizationPanelLayout.createParallelGroup(GroupLayout.BASELINE)
								    .add(edgeScoreLabel)
								    .add(edgeScoreTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
							       .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
							  );

		GroupLayout layout = new GroupLayout(topPanel);
		topPanel.setLayout(layout);
		layout.setHorizontalGroup(
					  layout.createParallelGroup(GroupLayout.LEADING)
					  .add(layout.createSequentialGroup()
					       .addContainerGap()
					       .add(layout.createParallelGroup(GroupLayout.LEADING)
						    .add(GroupLayout.TRAILING, layout.createSequentialGroup()
							 .add(12, 12, 12))
						    .add(GroupLayout.TRAILING, layout.createSequentialGroup()
							 .add(layout.createParallelGroup(GroupLayout.LEADING/*TRAILING*/)
							      .add(visualizationPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							      .add(edgeAttributePanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							      .add(scorePanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							      .add(layout.createSequentialGroup()
								   .add(helpButton, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
								   .addPreferredGap(LayoutStyle.RELATED, 90, 90)
								   .add(closeButton, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
								   .addPreferredGap(LayoutStyle.RELATED)
								   .add(searchButton))
							      )
							 .addContainerGap())))
					  );
		layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.LEADING)
					.add(layout.createSequentialGroup()
					     .addContainerGap()
					     .add(layout.createParallelGroup(GroupLayout.BASELINE))
					     .addPreferredGap(LayoutStyle.RELATED)
					     .add(edgeAttributePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					     .addPreferredGap(LayoutStyle.RELATED)
					     .add(scorePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					     .addPreferredGap(LayoutStyle.RELATED)
					     .add(visualizationPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					     .addPreferredGap(LayoutStyle.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
					     .add(layout.createParallelGroup(GroupLayout.BASELINE)
						  .add(searchButton)
						  .add(closeButton)
						  .add(helpButton))
					     .addContainerGap())
					);
		
		this.add(topPanel, BorderLayout.CENTER);
	}// </editor-fold>

	private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// Build parameter object
		if (buildSearchParameter() == false)
			return;

		// Run search algorithm

		JTaskConfig jTaskConfig = new JTaskConfig();
		jTaskConfig.displayCancelButton(false);
		jTaskConfig.displayCloseButton(true);
		jTaskConfig.displayStatus(true);
		jTaskConfig.displayTimeElapsed(true);
		jTaskConfig.displayTimeRemaining(false);
		jTaskConfig.setAutoDispose(false);
		jTaskConfig.setModal(true);
		jTaskConfig.setOwner(Cytoscape.getDesktop());
		TaskManager.executeTask(new SearchTask(parameters), jTaskConfig);
	}

	private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void alphaMultiplierTextFieldActionPerformed(
			java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// Close parent tab
		final CytoPanel cytoPanel = Cytoscape.getDesktop().getCytoPanel(
				SwingConstants.WEST);
		cytoPanel.remove(this);
	}


	/**
	 *  This message handler will be invoked if either the phyiscal or genetic edge attribute selection has changed.
	 */
	private void edgeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {
		updateSearchButtonState();
	}

	private void alphaTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	// Variables declaration - do not modify
	private javax.swing.JLabel alphaLabel;
	private javax.swing.JLabel alphaMultiplierLabel;
	private javax.swing.JTextField alphaMultiplierTextField;
	private javax.swing.JTextField alphaTextField;
	private javax.swing.JButton closeButton;
	private javax.swing.JLabel degreeLabel;
	private javax.swing.JTextField degreeTextField;
	private javax.swing.JPanel edgeAttributePanel;
	private javax.swing.JLabel edgeScoreLabel;
	private javax.swing.JTextField edgeScoreTextField;
	private javax.swing.JComboBox geneticEdgeComboBox;
	private javax.swing.JLabel geneticEdgeLabel;
	private javax.swing.JButton helpButton;
	private javax.swing.JComboBox physicalEdgeComboBox;
	private javax.swing.JLabel physicalEdgeLabel;
	private javax.swing.JPanel scorePanel;
	private javax.swing.JButton searchButton;
	private javax.swing.JPanel visualizationPanel;
	
	private NetworkSelectorPanel networkPanel;
	private JPanel topPanel;
	 

	// End of variables declaration

	private void updateAttributeLists() {
		// Save current selection
		final Object geneticSelected = geneticEdgeComboBox.getSelectedItem();
		final Object physicalSelected = physicalEdgeComboBox.getSelectedItem();

		// Reset the children
		geneticEdgeComboBox.removeAllItems();
		physicalEdgeComboBox.removeAllItems();

		final CyAttributes edgeAttr = Cytoscape.getEdgeAttributes();
		final Set<String> edgeAttrNames = new TreeSet<String>(Arrays
				.asList(edgeAttr.getAttributeNames()));

		boolean isGeneticSelectedExist = false;
		boolean isPhysicalSelectedExist = false;
		for (String name : edgeAttrNames) {
			// Use only double or int attributes
			final byte attribType = edgeAttr.getMultiHashMapDefinition().getAttributeValueType(name);
			if (attribType == MultiHashMapDefinition.TYPE_FLOATING_POINT || attribType == MultiHashMapDefinition.TYPE_INTEGER) {
				geneticEdgeComboBox.addItem(name);
				physicalEdgeComboBox.addItem(name);
				if (name.equals(geneticSelected))
					isGeneticSelectedExist = true;
				if (name.equals(physicalSelected))
					isPhysicalSelectedExist = true;
			}
		}

		if (isGeneticSelectedExist)
			geneticEdgeComboBox.setSelectedItem(geneticSelected);
		if (isPhysicalSelectedExist)
			physicalEdgeComboBox.setSelectedItem(physicalSelected);

		updateSearchButtonState();
	}


	public void updateState() {
		updateAttributeLists();
	}

	private boolean buildSearchParameter() {
		parameters = new SearchParameters();
		
		// Set network
		parameters.setNetwork(networkPanel.getSelectedNetwork());

		// Set edge attributes.
		final Object geneticEdgeItem  = geneticEdgeComboBox.getSelectedItem();
		final Object physicalEdgeItem = physicalEdgeComboBox.getSelectedItem();
		if (geneticEdgeItem == null || physicalEdgeItem == null) {
			JOptionPane.showMessageDialog(this,
						      "Either the genetic or physical edge attribute is missing!",
						      "Missing Attribute(s)", JOptionPane.ERROR_MESSAGE);
			return false;
		}
		final String geneticEdgeAttrName = geneticEdgeItem.toString();
		final String physicalEdgeAttrName = physicalEdgeItem.toString();
		if (geneticEdgeAttrName.equals(physicalEdgeAttrName)) {
			JOptionPane.showMessageDialog(this,
						      "Please select different attributes for physical and genetic edges!",
						      "Invalid Attribute Selections", JOptionPane.ERROR_MESSAGE);
			return false;
		}
		parameters.setGeneticEdgeAttrName(geneticEdgeAttrName);
		parameters.setPhysicalEdgeAttrName(physicalEdgeAttrName);

		try {
			parameters.setAlpha(Double.parseDouble(alphaTextField.getText()));
			parameters.setAlphaMultiplier(Double
					.parseDouble(alphaMultiplierTextField.getText()));
			parameters.setAlphaMultiplier(Integer.parseInt(degreeTextField.getText()));
			parameters.setEdgeCutoff(Double.parseDouble(edgeScoreTextField.getText()));
		} catch (NumberFormatException e) {
			e.printStackTrace();
			JOptionPane.showMessageDialog(this,
					"Invalid numbers.  Please re-enter values.",
					"Invalid Number", JOptionPane.ERROR_MESSAGE);
			return false;
		}

		return true;
	}

	public void attributeDefined(String attrName) {
		final CyAttributes edgeAttr = Cytoscape.getEdgeAttributes();
		if (edgeAttr.getMultiHashMapDefinition()
				.getAttributeValueType(attrName) == MultiHashMapDefinition.TYPE_FLOATING_POINT) {
			geneticEdgeComboBox.addItem(attrName);
			physicalEdgeComboBox.addItem(attrName);
		}

	}

	public void attributeUndefined(String attrName) {
		geneticEdgeComboBox.removeItem(attrName);
		physicalEdgeComboBox.removeItem(attrName);
	}

	public void setContainer(final Container container) {
		this.container = container;
	}

	private void updateSearchButtonState() {
		final String geneticAttrName = (String)geneticEdgeComboBox.getSelectedItem();
		final String physicalAttrName = (String)physicalEdgeComboBox.getSelectedItem();
		searchButton.setEnabled(geneticAttrName != null && physicalAttrName != null && !geneticAttrName.equals(physicalAttrName));
	}
}
