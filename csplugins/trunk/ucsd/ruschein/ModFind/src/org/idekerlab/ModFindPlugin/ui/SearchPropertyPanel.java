package org.idekerlab.ModFindPlugin.ui;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Arrays;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;

import javax.swing.AbstractAction;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingConstants;

import org.idekerlab.ModFindPlugin.SearchParameters;
import org.idekerlab.ModFindPlugin.SearchTask;
import org.jdesktop.layout.GroupLayout;
import org.jdesktop.layout.LayoutStyle;

import cytoscape.CyNetwork;
import cytoscape.Cytoscape;
import cytoscape.data.CyAttributes;
import cytoscape.data.attr.MultiHashMapDefinition;
import cytoscape.data.attr.MultiHashMapDefinitionListener;
import cytoscape.task.ui.JTaskConfig;
import cytoscape.task.util.TaskManager;
import cytoscape.util.swing.NetworkSelectorPanel;
import cytoscape.view.cytopanels.CytoPanel;

/**
 * 
 * @author kono
 */
public class SearchPropertyPanel extends JPanel implements MultiHashMapDefinitionListener {
	private static final long serialVersionUID = -3352470909434196700L;

	private static final double DEF_ALPHA = 1.6;
	private static final double DEF_ALPHA_MUL = 1.0;
	private static final int DEF_DEGREE = 1;
	private static final double DEF_CUTOFF = 20.0;
	private static final double DEF_PERCENTILE = 0.05;
	
	private Container container;
	private SearchParameters parameters;

	/** Creates new form SearchPropertyPanel */
	public SearchPropertyPanel() {
		initComponents();
		
		// add the target network to topPanel
		networkPanel = new NetworkSelectorPanel();
		networkPanel.setBorder(BorderFactory.createTitledBorder("Target Network"));
		
		java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
		topPane.add(networkPanel, gridBagConstraints);

		closeButton.setPreferredSize(new java.awt.Dimension(67, 23));
		aboutButton.setPreferredSize(new java.awt.Dimension(67, 23));
		closeButton.setPreferredSize(new java.awt.Dimension(67, 23));
		searchButton.setPreferredSize(new java.awt.Dimension(67, 23));
		 
		// about button is a place holder for now, hide it
		this.aboutButton.setVisible(false);
		
		Cytoscape.getEdgeAttributes().getMultiHashMapDefinition()
				.addDataDefinitionListener(this);

		updateAttributeLists();

		// Set defaults
		this.alphaTextField.setText(Double.toString(DEF_ALPHA));
		this.alphaMultiplierTextField.setText(Double.toString(DEF_ALPHA_MUL));
		this.degreeTextField.setText(Integer.toString(DEF_DEGREE));
		this.percentileThresholdTextField.setText(Double.toString(DEF_PERCENTILE));

	}

	public SearchParameters getParameters() {
		return parameters;
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">                          
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        topPane = new javax.swing.JPanel();
        edgeAttributePanel = new javax.swing.JPanel();
        physicalEdgeLabel = new javax.swing.JLabel();
        geneticEdgeLabel = new javax.swing.JLabel();
        physicalEdgeComboBox = new javax.swing.JComboBox();
        geneticEdgeComboBox = new javax.swing.JComboBox();
        scorePanel = new javax.swing.JPanel();
        alphaLabel = new javax.swing.JLabel();
        alphaMultiplierLabel = new javax.swing.JLabel();
        degreeLabel = new javax.swing.JLabel();
        alphaTextField = new javax.swing.JTextField();
        alphaMultiplierTextField = new javax.swing.JTextField();
        degreeTextField = new javax.swing.JTextField();
        lbPlaceHolder1 = new javax.swing.JLabel();
        edgeFilteringPanel = new javax.swing.JPanel();
        percentileThresholdLabel = new javax.swing.JLabel();
        percentileThresholdTextField = new javax.swing.JTextField();
        lbPlaceHolder2 = new javax.swing.JLabel();
        lbPlaceHolder3 = new javax.swing.JLabel();
        buttonPanel = new javax.swing.JPanel();
        helpButton = new javax.swing.JButton();
        aboutButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        topPane.setLayout(new java.awt.GridBagLayout());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(topPane, gridBagConstraints);

        edgeAttributePanel.setLayout(new java.awt.GridBagLayout());

        edgeAttributePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Edge Attributes"));
        physicalEdgeLabel.setText("Physical:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        edgeAttributePanel.add(physicalEdgeLabel, gridBagConstraints);

        geneticEdgeLabel.setText("Genetic:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        edgeAttributePanel.add(geneticEdgeLabel, gridBagConstraints);

        physicalEdgeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                physicalEdgeComboBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        edgeAttributePanel.add(physicalEdgeComboBox, gridBagConstraints);

        geneticEdgeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geneticEdgeComboBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        edgeAttributePanel.add(geneticEdgeComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(edgeAttributePanel, gridBagConstraints);

        scorePanel.setLayout(new java.awt.GridBagLayout());

        scorePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Score Patameters"));
        alphaLabel.setText("Alpha:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        scorePanel.add(alphaLabel, gridBagConstraints);

        alphaMultiplierLabel.setText("Alpha Multiplier:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        scorePanel.add(alphaMultiplierLabel, gridBagConstraints);

        degreeLabel.setText("Physical network filter degree (optional):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        scorePanel.add(degreeLabel, gridBagConstraints);

        alphaTextField.setPreferredSize(new java.awt.Dimension(50, 20));
        alphaTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alphaTextFieldActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        scorePanel.add(alphaTextField, gridBagConstraints);

        alphaMultiplierTextField.setPreferredSize(new java.awt.Dimension(50, 20));
        alphaMultiplierTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alphaMultiplierTextFieldActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        scorePanel.add(alphaMultiplierTextField, gridBagConstraints);

        degreeTextField.setPreferredSize(new java.awt.Dimension(50, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        scorePanel.add(degreeTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        scorePanel.add(lbPlaceHolder1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(scorePanel, gridBagConstraints);

        edgeFilteringPanel.setLayout(new java.awt.GridBagLayout());

        edgeFilteringPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Edge Filtering"));
        percentileThresholdLabel.setText("Percentile Threshold:");
        edgeFilteringPanel.add(percentileThresholdLabel, new java.awt.GridBagConstraints());

        percentileThresholdTextField.setText("0.05");
        percentileThresholdTextField.setPreferredSize(new java.awt.Dimension(50, 20));
        edgeFilteringPanel.add(percentileThresholdTextField, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        edgeFilteringPanel.add(lbPlaceHolder2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(edgeFilteringPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(lbPlaceHolder3, gridBagConstraints);

        buttonPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(helpButton);

        aboutButton.setText("About");
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(aboutButton);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(closeButton);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(searchButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(buttonPanel, gridBagConstraints);

    }// </editor-fold>                        


	
	private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// Make sure the edge attributes of Physical and Genetic are types of Integer or Float
		String geneticSelected = geneticEdgeComboBox.getSelectedItem().toString();
		String physicalSelected = physicalEdgeComboBox.getSelectedItem().toString();
		
		if (geneticSelected.trim().equals("")|| physicalSelected.trim().equals("")){
			JOptionPane.showMessageDialog(Cytoscape.getDesktop(), "Please select Physical and Genetic attributes", "Error", JOptionPane.ERROR_MESSAGE);
			return;			
		}
		
		if ((Cytoscape.getEdgeAttributes().getType(geneticSelected) == CyAttributes.TYPE_INTEGER ||
				Cytoscape.getEdgeAttributes().getType(geneticSelected) == CyAttributes.TYPE_FLOATING) &&
				(Cytoscape.getEdgeAttributes().getType(physicalSelected) == CyAttributes.TYPE_INTEGER ||
				Cytoscape.getEdgeAttributes().getType(physicalSelected) == CyAttributes.TYPE_FLOATING)) {
		}
		else {
			JOptionPane.showMessageDialog(Cytoscape.getDesktop(), "The attribute type of Physical and Genetic must be Integer or Float", "Error", JOptionPane.ERROR_MESSAGE);
			return;
		}
		
		// Build parameter object
		if (buildSearchParameter() == false)
			return;

		// Run search algorithm

		JTaskConfig jTaskConfig = new JTaskConfig();
		jTaskConfig.displayCancelButton(false);
		jTaskConfig.displayCloseButton(true);
		jTaskConfig.displayStatus(true);
		jTaskConfig.displayTimeElapsed(true);
		jTaskConfig.displayTimeRemaining(false);
		jTaskConfig.setAutoDispose(false);
		jTaskConfig.setModal(true);
		jTaskConfig.setOwner(Cytoscape.getDesktop());
		TaskManager.executeTask(new SearchTask(parameters), jTaskConfig);
	}

	private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void alphaMultiplierTextFieldActionPerformed(
			java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// Close parent tab
		final CytoPanel cytoPanel = Cytoscape.getDesktop().getCytoPanel(
				SwingConstants.WEST);
		cytoPanel.remove(this);
	}

	private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
    	// TODO add your handling code here:	    
	}                                           


    private void geneticEdgeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {
		updateSearchButtonState();
    }


    private void physicalEdgeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {
    	updateSearchButtonState();
    }


	private void alphaTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

    // Variables declaration - do not modify                     
    private javax.swing.JButton aboutButton;
    private javax.swing.JLabel alphaLabel;
    private javax.swing.JLabel alphaMultiplierLabel;
    private javax.swing.JTextField alphaMultiplierTextField;
    private javax.swing.JTextField alphaTextField;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel degreeLabel;
    private javax.swing.JTextField degreeTextField;
    private javax.swing.JPanel edgeAttributePanel;
    private javax.swing.JPanel edgeFilteringPanel;
    private javax.swing.JComboBox geneticEdgeComboBox;
    private javax.swing.JLabel geneticEdgeLabel;
    private javax.swing.JButton helpButton;
    private javax.swing.JLabel lbPlaceHolder1;
    private javax.swing.JLabel lbPlaceHolder2;
    private javax.swing.JLabel lbPlaceHolder3;
    private javax.swing.JLabel percentileThresholdLabel;
    private javax.swing.JTextField percentileThresholdTextField;
    private javax.swing.JComboBox physicalEdgeComboBox;
    private javax.swing.JLabel physicalEdgeLabel;
    private javax.swing.JPanel scorePanel;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel topPane;
    // End of variables declaration                   
  
	private NetworkSelectorPanel networkPanel;

	private void updateAttributeLists() {
		// Save current selection
		final Object geneticSelected = geneticEdgeComboBox.getSelectedItem();
		final Object physicalSelected = physicalEdgeComboBox.getSelectedItem();

		// Reset the children
		geneticEdgeComboBox.removeAllItems();
		physicalEdgeComboBox.removeAllItems();

		final CyAttributes edgeAttr = Cytoscape.getEdgeAttributes();
		final Set<String> edgeAttrNames = new TreeSet<String>(Arrays
				.asList(edgeAttr.getAttributeNames()));

		boolean isGeneticSelectedExist = false;
		boolean isPhysicalSelectedExist = false;
		for (String name : edgeAttrNames) {
			// Use only double or int attributes
			final byte attribType = edgeAttr.getMultiHashMapDefinition().getAttributeValueType(name);
			if (attribType == MultiHashMapDefinition.TYPE_FLOATING_POINT || attribType == MultiHashMapDefinition.TYPE_INTEGER) {
				geneticEdgeComboBox.addItem(name);
				physicalEdgeComboBox.addItem(name);
				if (name.equals(geneticSelected))
					isGeneticSelectedExist = true;
				if (name.equals(physicalSelected))
					isPhysicalSelectedExist = true;
			}
		}

		if (isGeneticSelectedExist)
			geneticEdgeComboBox.setSelectedItem(geneticSelected);
		if (isPhysicalSelectedExist)
			physicalEdgeComboBox.setSelectedItem(physicalSelected);

		updateSearchButtonState();
	}


	public void updateState() {
		updateAttributeLists();
	}

	private boolean buildSearchParameter() {
		parameters = new SearchParameters();
		
		// Set network
		parameters.setNetwork(networkPanel.getSelectedNetwork());

		// Set edge attributes.
		final Object geneticEdgeItem  = geneticEdgeComboBox.getSelectedItem();
		final Object physicalEdgeItem = physicalEdgeComboBox.getSelectedItem();
		if (geneticEdgeItem == null || physicalEdgeItem == null) {
			JOptionPane.showMessageDialog(this,
						      "Either the genetic or physical edge attribute is missing!",
						      "Missing Attribute(s)", JOptionPane.ERROR_MESSAGE);
			return false;
		}
		final String geneticEdgeAttrName = geneticEdgeItem.toString();
		final String physicalEdgeAttrName = physicalEdgeItem.toString();
		if (geneticEdgeAttrName.equals(physicalEdgeAttrName)) {
			JOptionPane.showMessageDialog(this,
						      "Please select different attributes for physical and genetic edges!",
						      "Invalid Attribute Selections", JOptionPane.ERROR_MESSAGE);
			return false;
		}
		parameters.setGeneticEdgeAttrName(geneticEdgeAttrName);
		parameters.setPhysicalEdgeAttrName(physicalEdgeAttrName);

		try {
			parameters.setAlpha(Double.parseDouble(alphaTextField.getText()));
			parameters.setAlphaMultiplier(Double
					.parseDouble(alphaMultiplierTextField.getText()));
			parameters.setAlphaMultiplier(Integer.parseInt(degreeTextField.getText()));
			//parameters.setEdgeCutoff(Double.parseDouble(edgeScoreTextField.getText()));
		} catch (NumberFormatException e) {
			e.printStackTrace();
			JOptionPane.showMessageDialog(this,
					"Invalid numbers.  Please re-enter values.",
					"Invalid Number", JOptionPane.ERROR_MESSAGE);
			return false;
		}

		return true;
	}

	public void attributeDefined(String attrName) {
		final CyAttributes edgeAttr = Cytoscape.getEdgeAttributes();
		if (edgeAttr.getMultiHashMapDefinition()
				.getAttributeValueType(attrName) == MultiHashMapDefinition.TYPE_FLOATING_POINT) {
			geneticEdgeComboBox.addItem(attrName);
			physicalEdgeComboBox.addItem(attrName);
		}

	}

	public void attributeUndefined(String attrName) {
		geneticEdgeComboBox.removeItem(attrName);
		physicalEdgeComboBox.removeItem(attrName);
	}

	public void setContainer(final Container container) {
		this.container = container;
	}

	private void updateSearchButtonState() {
		final String geneticAttrName = (String)geneticEdgeComboBox.getSelectedItem();
		final String physicalAttrName = (String)physicalEdgeComboBox.getSelectedItem();
		searchButton.setEnabled(geneticAttrName != null && physicalAttrName != null && !geneticAttrName.equals(physicalAttrName));
	}
}
