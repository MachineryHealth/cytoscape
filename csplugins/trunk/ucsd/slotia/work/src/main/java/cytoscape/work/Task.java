package cytoscape.work;

/**
 * <code>Task</code>s are units of work that require a user interface
 * to display information about its execution and to provide a means to
 * cleanly terminate the <code>Task</code> if the user cancels it.
 *
 * <code>Task</code> is an extension of the idea behind
 * <code>Thread</code> in that <code>Task</code> has a user
 * interface along with it generated by <code>TaskManager</code>.
 *
 * This interface is structurally paired with <code>TaskManager</code>
 * such that <code>TaskManager</code>'s purpose is to execute
 * a <code>Task</code>.
 *
 * Classes that implement <code>Task</code> can also implement
 * <code>Progressable</code> if one wishes to display a progress
 * bar in the interface.
 */
public interface Task
{
	/**
	 * Execute a unit of work.
	 * This method is invoked in its own thread.
	 *
	 * If this method throws an exception that is uncaught and is
	 * not <code>TaskException</code>, the task's interface will
	 * be closed without any notification to the user.
	 *
	 * @throws Exception If the task encounters a fatal error,
	 *   it should throw an exception so that the error can
	 *   be displayed in the user interface generated by
	 *   <code>TaskManager</code> in order to provide
	 *   feedback to the user. It is <i>highly</i>
	 *   encouraged to have <code>Exception</code>'s
	 *   <code>getMessage()</code> return a description
	 *   of the error for a non-technical user.
	 */
	public void run() throws Exception;

	/**
	 * Returns the title of the task.
	 *
	 * This method is typically only invoked once.
	 * This method should return quickly, otherwise
	 * it could delay execution.
	 *
	 * This method can be called before <code>run()</code>
	 * is invoked.
	 */
	public String getTitle();

	/**
	 * Prematurely terminate the task.
	 *
	 * This method is invoked when the user wishes
	 * to cancel the task. It should do any necessary
	 * cleaning up before the task is finished.
	 */
	public void cancel();
}
