package edu.ucsd.bioeng.idekerlab.PathwayWalkingPlugin;

import static cytoscape.visual.VisualPropertyType.NODE_LABEL;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import giny.model.Edge;
import giny.model.Node;
/*
 * GUI.java
 *
 * Created on February 4, 2008, 11:38 AM
 */
 
/**
 *
 * @author  Administrator
 */
import cytoscape.CyNetwork;
import cytoscape.Cytoscape;
import cytoscape.data.CyAttributes;
import cytoscape.data.webservice.DatabaseSearchResult;
import cytoscape.data.webservice.WebServiceClient;
import cytoscape.data.webservice.WebServiceClientManager;
import edu.ucsd.bioeng.idekerlab.intactplugin.IntactClient;
import cytoscape.data.webservice.CyWebServiceEvent.WSEventType;
import cytoscape.data.webservice.CyWebServiceEvent; 
import cytoscape.data.webservice.WebServiceClientImpl;
import cytoscape.layout.Tunable;
import uk.ac.ebi.intact.binarysearch.wsclient.BinarySearchServiceClient;
import uk.ac.ebi.intact.binarysearch.wsclient.generated.Alias;
import uk.ac.ebi.intact.binarysearch.wsclient.generated.BinaryInteraction;
import uk.ac.ebi.intact.binarysearch.wsclient.generated.Confidence;
import uk.ac.ebi.intact.binarysearch.wsclient.generated.CrossReference;
import uk.ac.ebi.intact.binarysearch.wsclient.generated.InteractionDetectionMethod;
import uk.ac.ebi.intact.binarysearch.wsclient.generated.Interactor;
import uk.ac.ebi.intact.binarysearch.wsclient.generated.SearchResult;
import cytoscape.util.ModuleProperties;
import cytoscape.util.ModulePropertiesImpl;
import cytoscape.visual.EdgeAppearanceCalculator;
import cytoscape.visual.GlobalAppearanceCalculator;
import cytoscape.visual.NodeAppearanceCalculator;
import cytoscape.visual.NodeShape;
import cytoscape.visual.VisualPropertyType;
import cytoscape.visual.VisualStyle;
import cytoscape.visual.calculators.AbstractCalculator;
import cytoscape.visual.calculators.NodeCalculator;
import cytoscape.visual.mappings.PassThroughMapping;

public class GUI extends javax.swing.JFrame {
 
	private static final String CLIENT_ID = "intact";
	
    /** Creates new form GUI */
    public GUI(Node nd) {
    	node = nd;
    	cyAtts = Cytoscape.getNodeAttributes();
    	nodeId = node.getIdentifier();
        initComponents();
    }
 
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
    private void initComponents() {
        titleText = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        nodeIDText = new javax.swing.JLabel();
        databaseNameText = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jProgressBar2 = new javax.swing.JProgressBar();
        jProgressBar3 = new javax.swing.JProgressBar();
        jProgressBar4 = new javax.swing.JProgressBar();
        jProgressBar5 = new javax.swing.JProgressBar();
        jProgressBar6 = new javax.swing.JProgressBar();
        jLabel10 = new javax.swing.JLabel();
        jProgressBar7 = new javax.swing.JProgressBar();
 
        setTitle("Pathway Walking Plugin");
        
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        titleText.setFont(new java.awt.Font("Tahoma", 1, 18));
        titleText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleText.setText("");
 
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel2.setText("Current Node ID:");
 
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel3.setText("Database Name:");
 
        nodeIDText.setText(nodeId);
 
        databaseNameText.setText("default");
 
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel1.setText("Available Databases");
 
        jCheckBox1.setText("IntAct");
        jCheckBox1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox1.setMargin(new java.awt.Insets(0, 0, 0, 0));
 
        jCheckBox2.setText("MINT");
        jCheckBox2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox2.setMargin(new java.awt.Insets(0, 0, 0, 0));
 
        jCheckBox3.setText("HPRD");
        jCheckBox3.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox3.setMargin(new java.awt.Insets(0, 0, 0, 0));
 
        jCheckBox4.setText("BioCyc");
        jCheckBox4.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox4.setMargin(new java.awt.Insets(0, 0, 0, 0));
 
        jCheckBox5.setText("PUMA2");
        jCheckBox5.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox5.setMargin(new java.awt.Insets(0, 0, 0, 0));
 
        jCheckBox6.setText("Reactome");
        jCheckBox6.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox6.setMargin(new java.awt.Insets(0, 0, 0, 0));
 
        jCheckBox7.setText("KEGG");
        jCheckBox7.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox7.setMargin(new java.awt.Insets(0, 0, 0, 0));
 
        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel4.setText("Progress");
 
        jLabel6.setText("0");
 
        jLabel7.setText("0");
 
        jLabel8.setText("0");
 
        jLabel9.setText("0");
 
        jLabel11.setText("0");
 
        jLabel12.setText("0");
 
        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel5.setText("Nodes");
        
        jList1.setListData(cyAtts.getAttributeNames()) ;
 
        jScrollPane1.setViewportView(jList1);
 
        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel13.setText("Results:");
 
        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel14.setText("Name");
 
        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel15.setText("Database");
 
        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel16.setText("Name");
 
        jButton1.setText("Start Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
 
        jButton2.setText("Add to Existing Network");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
 
        jButton3.setText("Advanced");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
 
        jLabel10.setText("0");
 
        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(layout.createSequentialGroup()
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(jLabel2)
                                            .add(jLabel3))
                                        .add(14, 14, 14)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                            .add(org.jdesktop.layout.GroupLayout.LEADING, databaseNameText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 172, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(org.jdesktop.layout.GroupLayout.LEADING, nodeIDText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE))
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                                    .add(layout.createSequentialGroup()
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(jCheckBox2)
                                            .add(jCheckBox1)
                                            .add(jCheckBox3)
                                            .add(jCheckBox4)
                                            .add(jCheckBox5)
                                            .add(jCheckBox7))
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 132, Short.MAX_VALUE)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(jProgressBar5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(jProgressBar4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(jLabel4)
                                            .add(jProgressBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(jProgressBar3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(jProgressBar2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(jProgressBar6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(jProgressBar7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                        .add(19, 19, 19)))
                                .add(28, 28, 28)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel6)
                                    .add(jLabel7)
                                    .add(jLabel8)
                                    .add(jLabel11)
                                    .add(jLabel9)
                                    .add(jLabel12)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel10))
                                .add(19, 19, 19))
                            .add(layout.createSequentialGroup()
                                .add(jLabel5)
                                .addContainerGap())))
                    .add(layout.createSequentialGroup()
                        .add(39, 39, 39)
                        .add(titleText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(jCheckBox6)
                        .addContainerGap(312, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(jLabel13)
                        .addContainerGap(328, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(jLabel14)
                        .add(75, 75, 75)
                        .add(jLabel15)
                        .add(70, 70, 70)
                        .add(jLabel16)
                        .add(97, 97, 97))
                    .add(layout.createSequentialGroup()
                        .add(jButton1)
                        .add(21, 21, 21)
                        .add(jButton2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 25, Short.MAX_VALUE)
                        .add(jButton3)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(titleText)
                .add(30, 30, 30)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(nodeIDText))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(databaseNameText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(19, 19, 19)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jLabel5)
                    .add(jLabel4))
                .add(17, 17, 17)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jCheckBox1)
                    .add(jLabel6)
                    .add(jProgressBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(12, 12, 12)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jCheckBox2)
                    .add(jLabel7)
                    .add(jProgressBar2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(14, 14, 14)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jCheckBox3)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(jProgressBar3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel8)))
                .add(16, 16, 16)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel9)
                    .add(jCheckBox4)
                    .add(jProgressBar4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(16, 16, 16)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel11)
                            .add(jCheckBox5))
                        .add(15, 15, 15)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(jCheckBox6)
                                .add(3, 3, 3))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jProgressBar6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jLabel12))
                                .add(4, 4, 4))))
                    .add(jProgressBar5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(13, 13, 13)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jCheckBox7)
                            .add(jLabel10))
                        .add(17, 17, 17)
                        .add(jLabel13))
                    .add(layout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(jProgressBar7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel14)
                    .add(jLabel15)
                    .add(jLabel16))
                .add(3, 3, 3)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 154, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton1)
                    .add(jButton3)
                    .add(jButton2))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>
 
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
        System.out.println("Advanced");
        AdvancedGUI advG = new AdvancedGUI();
        advG.openGUI();
    }
    
    
 
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
    	if(jCheckBox1.isSelected() == true)
    	{
    		jProgressBar1.setIndeterminate(true);
	        System.out.println("Start Search Button Pressed");
	        
	        WebServiceClientImpl try2 = (IntactClient) IntactClient.getClient();
	//        System.out.println(try2);
	        
	        try{
	        	setProperty();
	//        	public void search(String id, int i) {}
	//        	try1.execute("executeService", new Class[]{String.class,Integer.class}, new Object[]{"brca2",new Integer(5)});
	
	//			This following line only works if try2 is of type IntActClient
	//        	try2.execute("executeService", new Class[]{CyWebServiceEvent.class}, new Object[]{new CyWebServiceEvent("IntAct", WSEventType.SEARCH_DATABASE, node)});
	        	
	        	Object blah1 = try2.execute("findBinaryInteractions", new Class[]{String.class}, new Object[]{nodeId});
	
	        	SearchResult result = (SearchResult) blah1;
	        	  	
	        	Cytoscape.firePropertyChange("SEARCH_RESULT", "uk.ac.ebi.intact.binarysearch.wsclient", new DatabaseSearchResult(result.getTotalCount(), result, WSEventType.IMPORT_NETWORK));
	
	        	CyWebServiceEvent cyweb1 = new CyWebServiceEvent("IntAct", WSEventType.SEARCH_DATABASE, node);
	        	
	        	
	        	System.out.println("RESULTS.GETINTERACTIONS() RETURNS...");
	        	System.out.println(result.getInteractions().toString());
	        	System.out.println("END OF RESULTS.GETINTERACTIONS");
	        	
	        	
	        	search(cyweb1.getParameter().toString(), cyweb1);
	        	
	        	System.out.println("SEARCH RESULTS (blah1):");
	        	System.out.println(blah1);
	        	System.out.println("SEARCH RESULTS (cyweb1.getParameter):");
	        	System.out.println(cyweb1.getParameter());
	
	        	importNetwork(blah1, null);
	        	importNetwork(blah1, Cytoscape.getCurrentNetwork());
				
	        } catch(Exception e){
	        	System.out.println(e.toString());
	        }
	        System.out.println("After Intact Client was called.");
	        jProgressBar1.setIndeterminate(false);
    	}
    }
    
 
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        System.out.println("Add to existing network");
    }
 
    /**
     * @param args the command line arguments
     */
    public void loadGui(Node nd) {
    	final Node node = nd;
        java.awt.EventQueue.invokeLater(new Runnable() {
        	public void run() {
                new GUI(node).setVisible(true);
            }
        });
    }
    
    Object stub;
    ModuleProperties props;
    
    public void importNetwork(Object searchResult, CyNetwork net) {
		try {
			if (stub == null) {
				stub = new BinarySearchServiceClient();
			}
	
			if(searchResult instanceof SearchResult == false) {
				return;
			}

			System.out.println("searchResult:");
			System.out.println(searchResult);
			System.out.println("end");
			
			BinarySearchServiceClient client = (BinarySearchServiceClient) stub;
			SearchResult result = (SearchResult) searchResult;
			List<BinaryInteraction> binaryInteractions = result.getInteractions();
			
			System.out.println("result:");
			System.out.println(result);
			System.out.println("end");
			
			System.out.println("result.getInteractions:");
			System.out.println(result.getInteractions());
			System.out.println("end");

			final Integer max = (Integer) props.get("max_interactions").getValue();
			int i = 0;
			Set<Node> nodes = new HashSet<Node>();
			Set<Edge> edges = new HashSet<Edge>();

			Node n1 = null;
			Node n2 = null;
			Edge e = null;

			List<Alias> alias1;
			List<Alias> alias2;

			String a1;
			String a2;

			Interactor a;
			Interactor b;
			CyAttributes attr = Cytoscape.getNodeAttributes();
			CyAttributes edgeAttr = Cytoscape.getEdgeAttributes();

			List<String> nonUP = new ArrayList<String>();

			for (BinaryInteraction bin : binaryInteractions) {
				// do stuff with interactions here
				a = bin.getInteractorA();
				b = bin.getInteractorB();

				List<CrossReference> ids = a.getIdentifiers();

				for (CrossReference ref : ids) {
					System.out.println("ID A: " + ref.getDatabase() + ": " + ref.getIdentifier()
							+ ", " + ref.getText());

					if (ref.getDatabase().equals("uniprotkb") == false) {
						nonUP.add(ref.getDatabase() + ":" + ref.getIdentifier());
					}
				}

				String aID = a.getIdentifiers().get(0).getIdentifier();

				List<Alias> al = a.getAliases();

				for (Alias cr : al) {
					System.out.println("--------Alias A: " + cr.getAliasType() + ": "
							+ cr.getDbSource() + ", " + cr.getName());
				}

				List<CrossReference> altA = a.getAlternativeIdentifiers();

				for (CrossReference ref : altA) {
					attr.setAttribute(aID, "Official Symbol", ref.getIdentifier());
					System.out.println("########Alt A: " + ref.getDatabase() + ": "
							+ ref.getIdentifier() + ", " + ref.getText());

					break;
				}

				ids = b.getIdentifiers();

				for (CrossReference ref : ids) {
					System.out.println("ID B: " + ref.getDatabase() + ": " + ref.getIdentifier()
							+ ", " + ref.getText());

					if (ref.getDatabase().equals("uniprotkb") == false) {
						nonUP.add(ref.getDatabase() + ":" + ref.getIdentifier());
					}
				}

				String bID = b.getIdentifiers().get(0).getIdentifier();

				List<Alias> al2 = b.getAliases();

				for (Alias cr : al2) {
					System.out.println("--------Alias B: " + cr.getAliasType() + ": "
							+ cr.getDbSource() + ", " + cr.getName());
				}

				List<CrossReference> altB = b.getAlternativeIdentifiers();

				for (CrossReference ref : altB) {
					attr.setAttribute(bID, "Official Symbol", ref.getIdentifier());
					System.out.println("########Alt B: " + ref.getDatabase() + ": "
							+ ref.getIdentifier() + ", " + ref.getText());

					break;
				}

				n1 = Cytoscape.getCyNode(a.getIdentifiers().get(0).getIdentifier(), true);
				n2 = Cytoscape.getCyNode(b.getIdentifiers().get(0).getIdentifier(), true);

				if ((a.getOrganism() != null) && (a.getOrganism().getIdentifiers() != null)
						&& (a.getOrganism().getIdentifiers().get(0) != null)) {
					attr.setAttribute(n1.getIdentifier(), "species",
							a.getOrganism().getIdentifiers().get(0).getText());
				}

				if ((b.getOrganism() != null) && (b.getOrganism().getIdentifiers() != null)
						&& (b.getOrganism().getIdentifiers().get(0) != null)) {
					attr.setAttribute(n2.getIdentifier(), "species",
							b.getOrganism().getIdentifiers().get(0).getText());
				}

				if ((bin.getInteractorA().getAliases() != null)
						&& (bin.getInteractorA().getAliases().size() != 0)) {
					alias1 = bin.getInteractorA().getAliases();
				}

				if ((bin.getInteractorB().getAliases() != null)
						&& (bin.getInteractorB().getAliases().size() != 0)) {
					alias2 = bin.getInteractorB().getAliases();
				}

				e = Cytoscape.getCyEdge(n1, n2, "interaction",
						bin.getInteractionTypes().get(0).getText(), true);
				System.out.println("-----------> " + bin.getInteractorA() + " interacts with "
						+ bin.getInteractorB());

				nodes.add(n1);
				nodes.add(n2);
				edges.add(e);

				List<Confidence> confs = bin.getConfidenceValues();

				for (Confidence c : confs) {
					edgeAttr.setAttribute(e.getIdentifier(), "confidence", c.getValue());
				}

				List<InteractionDetectionMethod> iType = bin.getDetectionMethods();

				for (InteractionDetectionMethod it : iType) {
					edgeAttr.setAttribute(e.getIdentifier(), "interaction detection method",
							it.getText());
				}

				edgeAttr.setAttribute(e.getIdentifier(), "Source Database",
						bin.getSourceDatabases().get(0).getDatabase());

				i++;

				if (i > max) {
					break;
				}
			}

			for (String n : nonUP) {
				System.out.println("!!!!!!!!Non UP id = " + n);
			}

			if (net == null) {
				Cytoscape.createNetwork(nodes, edges, "IntAct: ", null);
				Cytoscape.firePropertyChange(Cytoscape.NETWORK_LOADED, null, null);
			} else {
				for (Node node : nodes) {
					net.addNode(node);
				}

				for (Edge edge : edges) {
					net.addEdge(edge);
				}

				net.setSelectedNodeState(nodes, true);
				Cytoscape.firePropertyChange(Cytoscape.NETWORK_MODIFIED, null, null);
			}

			Cytoscape.firePropertyChange(Cytoscape.ATTRIBUTES_CHANGED, null, null);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
    
	private void setProperty() {
		props = new ModulePropertiesImpl("edu.ucsd.bioeng.idekerlab.intactplugin.IntactClient", "wsc");

		List<String> searchType = new ArrayList<String>();
		searchType.add("Lucene");
		searchType.add("Keyword Search");

		//		props.add(new Tunable("search_type", "The edge attribute that contains the weights",
		//                Tunable.LIST, searchType));
		props.add(new Tunable("search_mode", "Enable keyword search", Tunable.BOOLEAN,
		                      new Boolean(false)));

		props.add(new Tunable("max_interactions", "Maximum number of interactions",
		                      Tunable.INTEGER, new Integer(500)));
		props.add(new Tunable("search_depth", "Search depth", Tunable.INTEGER, new Integer(0)));
		props.add(new Tunable("select_interaction", "Import only selected interactions",
		                      Tunable.BOOLEAN, new Boolean(false)));
	}
	
	public void executeService(CyWebServiceEvent e) {
		if (e.getSource().equals(CLIENT_ID)) {
			if (e.getEventType().equals(WSEventType.IMPORT_NETWORK)) {
				importNetwork(e.getParameter(), null);
			} else if (e.getEventType().equals(WSEventType.EXPAND_NETWORK)) {
				importNetwork(e.getParameter(), Cytoscape.getCurrentNetwork());
			} else if (e.getEventType().equals(WSEventType.SEARCH_DATABASE)) {
				
				search(e.getParameter().toString(), e);
			}
		}
	}
	
	private void search(String query, CyWebServiceEvent e) {
		if (stub == null) {
			stub = new BinarySearchServiceClient();
		}

		BinarySearchServiceClient client = (BinarySearchServiceClient) stub;
		System.out.println("=========CLASS = " + client.getClass());

		SearchResult result = client.findBinaryInteractions(query);
		if(e.getNextMove() != null) {
			Cytoscape.firePropertyChange("SEARCH_RESULT", "edu.ucsd.bioeng.idekerlab.intactplugin.IntactClient", new DatabaseSearchResult(result.getTotalCount(), result, e.getNextMove()));
		} else {
			Cytoscape.firePropertyChange("SEARCH_RESULT", "edu.ucsd.bioeng.idekerlab.intactplugin.IntactClient", new DatabaseSearchResult(result.getTotalCount(), result, WSEventType.IMPORT_NETWORK));
		}
		

	}
	
	

    
    // Variables declaration - do not modify
    private javax.swing.JLabel databaseNameText;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jList1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JProgressBar jProgressBar2;
    private javax.swing.JProgressBar jProgressBar3;
    private javax.swing.JProgressBar jProgressBar4;
    private javax.swing.JProgressBar jProgressBar5;
    private javax.swing.JProgressBar jProgressBar6;
    private javax.swing.JProgressBar jProgressBar7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nodeIDText;
    private javax.swing.JLabel titleText;
    private String nodeId;
    private Node node;
    private CyAttributes cyAtts;
    // End of variables declaration
 
}