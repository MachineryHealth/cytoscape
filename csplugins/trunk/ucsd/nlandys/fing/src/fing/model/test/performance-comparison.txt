ADJACENT EDGES TEST:

  Testing:
    RootGraph.getAdjacentEdgeIndicesArray(int, boolean, boolean, boolean)

  Importance:
    Getting touching edges lists for a node is very similar to getting
    node neighbors.  Both operations are the foundation of depth first
    and breadth first graph searching.  Therefore, good performance
    of this method is extremely important.

  Description of test:
    This test creates N nodes and E edges (an even mix of directed and
    undirected) in a RootGraph.  The topology of RootGraph created is
    defined by [random] bytes read from standard input.  For every node
    in the RootGraph, getAdjacentEdgeIndicesArray() is called on that
    node.  Because getAdjacentEdgeIndicesArray() takes three boolean
    input parameters defining which adjacent edges we're looking for,
    this test over all nodes should be repeated eight times, each time
    with a different set of boolean input parameters.  However, four of
    these boolean combinations cause the Luna implementation of
    RootGraph to throw NullPointerException in getAdjacentEdges().
    Therefore, this test is only repeated 4 times, each with a different
    set of boolean inputs:
      iteration 1: getAdjacentEdgeIndicesArray(int, true, true, true)
      iteration 2: getAdjacentEdgeIndicesArray(int, true, false, true)
      iteration 3: getAdjacentEdgeIndicesArray(int, false, false, false)
      iteration 4: getAdjacentEdgeIndicesArray(int, false, false, false)

  Test circumstances:
    Tests were performed on a 2.4GHz P4, with 512M RAM, and 256M memory
    was allocated to the JVM.

  Test results:

             Milliseconds taken to perform test case:

    graph size                          |  Fing  |  Luna  |
  --------------------------------------+--------+--------+
       7 nodes,      20 edges           |      2 |      3 |
     100 nodes,     500 edges           |      6 |     42 |
     100 nodes,   10000 edges           |      8 |     84 |
    1000 nodes,   20000 edges           |     25 |   1185 |
    1000 nodes,   39998 edges           |     45 |   1700 |
    2000 nodes,   20000 edges           |     30 |   3900 |
    4000 nodes,   20000 edges           |     32 |  16300 |
    8000 nodes,   20000 edges           |     42 |  64800 |
   16000 nodes,   20000 edges           |     94 | 258300 |
   16000 nodes,  100000 edges           |    127 |   fail |
   50000 nodes,  400000 edges           |    440 |   fail |
  100000 nodes, 1000000 edges           |   1050 |   fail |
  --------------------------------------+--------+--------+

  Afterthoughts:
    The implementation could be really sped up if the interface
    changes; instead of returning an array of integers, return
    an iteration over integers.  This would prevent a lot of
    unnecessary array allocation.
