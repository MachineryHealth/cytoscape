/*
 * Created on Jul 16, 2005
 *
 */
package cytoscape.editor.editors;

import java.awt.Color;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.Vector;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

import org.mskcc.biopax_plugin.mapping.MapBioPaxToCytoscape;
import org.mskcc.biopax_plugin.plugin.BioPaxPlugIn;
import org.mskcc.biopax_plugin.util.biopax.BioPaxConstants;
import org.mskcc.biopax_plugin.util.biopax.ControlTypeConstants;

import cytoscape.Cytoscape;
import cytoscape.editor.event.PaletteNetworkEditEventHandler;
import cytoscape.editor.impl.CytoShapeIcon;
import cytoscape.editor.impl.ShapePalette;
import cytoscape.visual.Arrow;
import cytoscape.visual.CalculatorCatalog;
import cytoscape.visual.EdgeAppearanceCalculator;
import cytoscape.visual.NodeAppearanceCalculator;
import cytoscape.visual.ShapeNodeRealizer;
import cytoscape.visual.VisualMappingManager;
import cytoscape.visual.VisualStyle;
import cytoscape.visual.calculators.GenericEdgeArrowCalculator;
import cytoscape.visual.calculators.GenericEdgeLabelCalculator;
import cytoscape.visual.calculators.GenericNodeColorCalculator;
import cytoscape.visual.calculators.GenericNodeLabelCalculator;
import cytoscape.visual.calculators.GenericNodeShapeCalculator;
import cytoscape.visual.calculators.NodeShapeCalculator;
import cytoscape.visual.mappings.DiscreteMapping;
import cytoscape.visual.mappings.ObjectMapping;
import cytoscape.visual.mappings.PassThroughMapping;


/**
 * An example editor that extends the basic Cytoscape editor and is based upon
 * a drag-and-drop and palette framework into which developers plug in semantics. The framework consists of
 * <ul> 
 * <li> a palette, from which the user drags and drops shapes onto the canvas
 * <li> an extensible shape class for the palette, 
 * <li> a drawing canvas upon which shapes are dropped, and
 * <li> event handlers which respond to drop events generated by the canvas. 
 * </ul>
 * <p>
 * The dropping of shapes onto the canvas results in the addition of nodes and edges to the current Cytoscape 
 * network, as defined by the behavior of the event handler that responds to the drop events.  In the 
 * simple "BioPAX-like" editor, there are node types for proteins, catalysis, small molecules, and biochemical 
 * reactions, as well as a directed edge type.
 * <p>
 * 
 *
 * @author Allan Kuchinsky
 * @version 1.0
 * @see PaletteNetworkEditEventHandler
 * 
 */
public class SimpleBioMoleculeEditor extends BasicCytoscapeEditor {


	private ShapePalette shapePalette;
	private static final String ICONS_REL_LOC = "images/";
	
	public static final String NODE_TYPE = "NODE_TYPE";
	
	public SimpleBioMoleculeEditor() {
		super();		
	}
	
	/**
	 * specialized initialization code for editor, called by
	 * CytoscapeEditorManager when a new editor is built.
	 * @param args an arbitrary list of arguments passed to initialization routine.  Not used in this editor
	 */
	public void initializeControls(List args)
	{
		
		shapePalette = new ShapePalette();

        VisualMappingManager manager =
            Cytoscape.getDesktop().getVizMapManager();
    
        CalculatorCatalog catalog = manager.getCalculatorCatalog();
        
        VisualStyle vizStyle = manager.getVisualStyle();
        NodeAppearanceCalculator nac = vizStyle.getNodeAppearanceCalculator();
        if (nac == null)
        {
    		String expDescript = "Cannot build palette.  You need to set up a Visual Style that maps Node Color to NODE_TYPE attribute.";
			String title = "Cannot build palette for SimpleBioMoleculeEditor";
			JOptionPane.showMessageDialog(Cytoscape.getDesktop(), expDescript,
					title, JOptionPane.PLAIN_MESSAGE);
        	return;
        }
        GenericNodeColorCalculator nfill = (GenericNodeColorCalculator) nac.getNodeFillColorCalculator();
        if (nfill == null)
        {
    		String expDescript = "Cannot build palette.  You need to set up a Visual Style that maps Node Color to NODE_TYPE attribute.";
			String title = "Cannot build palette for SimpleBioMoleculeEditor";
			JOptionPane.showMessageDialog(Cytoscape.getDesktop(), expDescript,
					title, JOptionPane.PLAIN_MESSAGE);
        	return;
        }        Vector mappings = nfill.getMappings();
        DiscreteMapping dfill = null;
        for (int i = 0; i < mappings.size(); i++)
        {
        	DiscreteMapping dfillCandidate = (DiscreteMapping) mappings.get(i);
        	String attr = dfillCandidate.getControllingAttributeName();
        	if (attr.equals(NODE_TYPE))
        	{
        		dfill = dfillCandidate;
        		break;
        	}       	
        }
        if (dfill == null)
        {
    		String expDescript = "Cannot build palette.  You need to set up a Visual Style that maps Node Shape to NODE_TYPE attribute.";
			String title = "Cannot build palette for SimpleBioMoleculeEditor";
			JOptionPane.showMessageDialog(Cytoscape.getDesktop(), expDescript,
					title, JOptionPane.PLAIN_MESSAGE);
        	return;
        }
        
 
        GenericNodeShapeCalculator nshape = (GenericNodeShapeCalculator) nac.getNodeShapeCalculator();       
        if (nshape == null)
        {
    		String expDescript = "Cannot build palette.  You need to set up a Visual Style that maps Node Color to NODE_TYPE attribute.";
			String title = "Cannot build palette for SimpleBioMoleculeEditor";
			JOptionPane.showMessageDialog(Cytoscape.getDesktop(), expDescript,
					title, JOptionPane.PLAIN_MESSAGE);
        	return;
        }        mappings = nshape.getMappings();
        DiscreteMapping dshape = null;
        for (int i = 0; i < mappings.size(); i++)
        {
        	DiscreteMapping dshapeCandidate = (DiscreteMapping) mappings.get(i);
        	String attr = dshapeCandidate.getControllingAttributeName();
        	if (attr.equals(NODE_TYPE))
        	{
        		dshape = dshapeCandidate;
        		break;
        	}       	
        }
        if (dshape == null)
        {
    		String expDescript = "Cannot build palette.  You need to set up a Visual Style that maps Node Shape to NODE_TYPE attribute.";
			String title = "Cannot build palette for SimpleBioMoleculeEditor";
			JOptionPane.showMessageDialog(Cytoscape.getDesktop(), expDescript,
					title, JOptionPane.PLAIN_MESSAGE);
        	return;
        }
                
        
        Color nodeColor;
        byte nodeShape;
        
        // AJK: 09/16/05 BEGIN
        //     oy vey, what a hack.  To get at the node color for the style, it looks as if I
        //     have to calculateNodeColor for a node 


		ImageIcon img = new ImageIcon(getClass().getResource(
		ICONS_REL_LOC + "edgeIcon1.gif"));
//		shapePalette.addShape("EdgeType", "DirectedEdge", img, "Directed Edge");		
		shapePalette.addShape("EdgeType", "DirectedEdge", 
             new CytoShapeIcon(img.getImage()), "Directed Edge");			
		
//		img = new ImageIcon(getClass().getResource(
//				ICONS_REL_LOC + "BioPAX_protein.gif"));
//		shapePalette.addShape("BIOPAX_NODE_TYPE", "protein", img, "Protein");
		nodeShape = ((Byte) dshape.getMapValue("protein")).byteValue();
//		System.out.println ("Got mapping for nodeShape: " + nodeObj.getClass());
		
		nodeColor = (Color) dfill.getMapValue("protein");	
		shapePalette.addShape("NODE_TYPE", "protein", 
//               new CytoShapeIcon(CytoShapeIcon.RECTANGLE, Color.BLUE), // hard code for first pass
	            new CytoShapeIcon(nodeShape, nodeColor), 
			   "Protein");

//		img = new ImageIcon(getClass().getResource(
//				ICONS_REL_LOC + "BioPAX_catalysis.gif"));
//		shapePalette.addShape("BIOPAX_NODE_TYPE", "catalysis", img, "Catalysis");
		nodeShape = ((Byte) dshape.getMapValue("catalysis")).byteValue();
		nodeColor = (Color) dfill.getMapValue("catalysis");	
		shapePalette.addShape("NODE_TYPE", "catalysis", 
//               new CytoShapeIcon(CytoShapeIcon.ROUNDED_RECTANGLE, Color.YELLOW), "Catalysis");
	              new CytoShapeIcon(nodeShape, nodeColor), "Catalysis");

		nodeShape = ((Byte) dshape.getMapValue("smallMolecule")).byteValue();
		nodeColor = (Color) dfill.getMapValue("smallMolecule");				
		shapePalette.addShape("NODE_TYPE", "smallMolecule", 
//               new CytoShapeIcon (CytoShapeIcon.DIAMOND, Color.MAGENTA), "Small Molecule");
	              new CytoShapeIcon (nodeShape, nodeColor), "Small Molecule");

//		img = new ImageIcon(getClass().getResource
//				(ICONS_REL_LOC + "BioPAX_biochemicalReaction.gif"));
//		shapePalette.addShape("BIOPAX_NODE_TYPE", "biochemicalReaction",
//				img, "Biochemical Reaction");
		nodeShape = ((Byte) dshape.getMapValue("biochemicalReaction")).byteValue();
		nodeColor = (Color) dfill.getMapValue("biochemicalReaction");	
		shapePalette.addShape("NODE_TYPE", "biochemicalReaction",
//				new CytoShapeIcon(CytoShapeIcon.ELLIPSE, Color.RED), "Biochemical Reaction");
				new CytoShapeIcon(nodeShape, nodeColor), "Biochemical Reaction");

		shapePalette.showPalette();
		
		super.initializeControls(null);

	}

	/**
	 * sets controls invisible when editor type is switched
	 * 
	 * @param args
	 *            args an arbitrary list of arguments (not used in this editor)
	 */
	public void disableControls(List args) {
		super.disableControls(args);
		if (shapePalette != null) {
			shapePalette.setVisible(false);
		}
	}
	
	/**
	 * sets controls visible when editor type is switched back to this editor
	 * @param args args an arbitrary list of arguments (not used in this editor)	 * 
	 */
	public void enableControls (List args)
	{
		super.enableControls(args);
		shapePalette.setVisible(true);
		
	}	

	
	
	
	

}