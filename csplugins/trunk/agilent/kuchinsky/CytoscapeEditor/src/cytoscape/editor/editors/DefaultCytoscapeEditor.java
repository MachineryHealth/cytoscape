/*
 * Created on Oct 4, 2005
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
package cytoscape.editor.editors;

import java.awt.Color;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

import cytoscape.Cytoscape;
import cytoscape.editor.event.PaletteNetworkEditEventHandler;
import cytoscape.editor.impl.CytoShapeIcon;
import cytoscape.editor.impl.ShapePalette;
import cytoscape.visual.Arrow;
import cytoscape.visual.CalculatorCatalog;
import cytoscape.visual.NodeAppearanceCalculator;
import cytoscape.visual.VisualMappingManager;
import cytoscape.visual.VisualStyle;


/**
 * NOTE: THE CYTOSCAPE EDITOR FUNCTIONALITY IS STILL BEING EVOLVED AND IN A STATE OF TRANSITION TO A 
 * FULLY EXTENSIBLE EDITING FRAMEWORK FOR CYTOSCAPE VERSION 2.3.  
 * 
 * THE JAVADOC COMMENTS ARE OUT OF DATE IN MANY PLACES AND ARE BEING UPDATED.  
 * THE APIs WILL CHANGE AND THIS MAY IMPACT YOUR CODE IF YOU 
 * MAKE EXTENSIONS AT THIS POINT.  PLEASE CONTACT ME (mailto: allan_kuchinsky@agilent.com) 
 * IF YOU ARE INTENDING TO EXTEND THIS CODE AND I WILL WORK WITH YOU TO HELP MINIMIZE THE IMPACT TO YOUR CODE OF 
 * FUTURE CHANGES TO THE FRAMEWORK
 *
 * PLEASE SEE http://www.cytoscape.org/cgi-bin/moin.cgi/CytoscapeEditorFramework FOR 
 * DETAILS ON THE EDITOR FRAMEWORK AND PLANNED EVOLUTION FOR CYTOSCAPE VERSION 2.3.
 *
 */

/**
/**
 * An example editor that extends the basic Cytoscape editor and is based upon
 * a drag-and-drop and palette framework into which developers plug in semantics. The framework consists of
 * <ul> 
 * <li> a palette, from which the user drags and drops shapes onto the canvas
 * <li> an extensible shape class for the palette, 
 * <li> a drawing canvas upon which shapes are dropped, and
 * <li> event handlers which respond to drop events generated by the canvas. 
 * </ul>
 * <p>
 * This editor uses the default visual style for node color and shape.
 * <p>
 * The dropping of shapes onto the canvas results in the addition of nodes and edges to the current Cytoscape 
 * network, as defined by the behavior of the event handler that responds to the drop events.  
 * <p>
 * 
 *
 * @author Allan Kuchinsky
 * @version 1.0
 * @see PaletteNetworkEditEventHandler
 * 
 */
 
public class DefaultCytoscapeEditor  extends BasicCytoscapeEditor {

 	
	private ShapePalette shapePalette;
	private static final String ICONS_REL_LOC = "images/";
	
	public static final String NODE_TYPE = "NODE_TYPE";
	
	public static final String EDGE_TYPE = "EDGE_TYPE";
	
	
	/**
	 * 
	 */
	public DefaultCytoscapeEditor() {
		super();
		// TODO Auto-generated constructor stub
	}
	

	public void initializeControls(List args)
	{
		
		shapePalette = new ShapePalette();

        VisualMappingManager manager =
            Cytoscape.getDesktop().getVizMapManager();
    
        CalculatorCatalog catalog = manager.getCalculatorCatalog();
        
        VisualStyle vizStyle = manager.getVisualStyle();
        NodeAppearanceCalculator nac = vizStyle.getNodeAppearanceCalculator();
        if (nac == null)
        {
    		String expDescript = "Cannot build palette.  You need to set up a Visual Style that maps Node Color to NODE_TYPE attribute.";
			String title = "Cannot build palette for Default Cytoscape Editor";
			JOptionPane.showMessageDialog(Cytoscape.getDesktop(), expDescript,
					title, JOptionPane.PLAIN_MESSAGE);
        	return;
        }
        
        Color defaultNodeColor = nac.getDefaultNodeFillColor();
        byte defaultNodeShape = nac.getDefaultNodeShape();
        
		ImageIcon img = new ImageIcon(getClass().getResource(
		ICONS_REL_LOC + "edgeIcon1.gif"));	
		shapePalette.addShape(EDGE_TYPE, "DirectedEdge", 
//             new CytoShapeIcon(img.getImage()), "Directed Edge");				
							new CytoShapeIcon(Arrow.BLACK_DELTA), "Directed Edge");
							

		shapePalette.addShape("NODE_TYPE", "DefaultNode", 
	            new CytoShapeIcon(defaultNodeShape, defaultNodeColor), 
			   "Add a Node");


		shapePalette.showPalette();
		
		super.initializeControls(null);

	}

	/**
	 * sets controls invisible when editor type is switched
	 * 
	 * @param args
	 *            args an arbitrary list of arguments (not used in this editor)
	 */
	public void disableControls(List args) {
//		super.disableControls(args);
		if (shapePalette != null) {
			shapePalette.setVisible(false);
		}
	}
	
	/**
	 * sets controls visible when editor type is switched back to this editor
	 * @param args args an arbitrary list of arguments (not used in this editor)	 * 
	 */
	public void enableControls (List args)
	{
//		super.enableControls(args);
		shapePalette.showPalette();
		shapePalette.setVisible(true);
		
	}	


}
