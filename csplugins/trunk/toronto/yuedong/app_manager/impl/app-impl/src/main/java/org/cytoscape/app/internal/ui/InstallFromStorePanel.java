package org.cytoscape.app.internal.ui;

import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.io.File;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;

import org.cytoscape.app.internal.exception.AppMoveException;
import org.cytoscape.app.internal.exception.AppParsingException;
import org.cytoscape.app.internal.manager.App;
import org.cytoscape.app.internal.manager.AppManager;
import org.cytoscape.app.internal.manager.AppParser;
import org.cytoscape.app.internal.net.WebApp;

/**
 * This class represents the panel in the App Manager dialog's tab used for installing new apps.
 * Its UI setup code is generated by the Netbeans 7 GUI builder.
 */
public class InstallFromStorePanel extends javax.swing.JPanel {
	
	/** Long serial version identifier required by the Serializable class */
	private static final long serialVersionUID = -1208176142084829272L;
	
	private javax.swing.JScrollPane descriptionScrollPane;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JButton installSelectedButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JLabel resultsLabel;
    private javax.swing.JScrollPane resultsScrollPane;
    private javax.swing.JSplitPane resultsSplitPane;
    private javax.swing.JTree resultsTree;
    private javax.swing.JLabel searchAppsLabel;
    private javax.swing.JButton searchButton;
    private javax.swing.JComboBox searchComboBox;
    private javax.swing.JCheckBox showCompatibleCheckBox;
    private javax.swing.JButton viewOnWebStoreButton;
	
	private JFileChooser fileChooser;
	
	private AppManager appManager;
	
    public InstallFromStorePanel(AppManager appManager) {
        this.appManager = appManager;
    	initComponents();
        
        setupDescriptionListener();
    }

    private void initComponents() {

        searchComboBox = new javax.swing.JComboBox();
        searchButton = new javax.swing.JButton();
        installSelectedButton = new javax.swing.JButton();
        viewOnWebStoreButton = new javax.swing.JButton();
        searchAppsLabel = new javax.swing.JLabel();
        resultsSplitPane = new javax.swing.JSplitPane();
        resultsScrollPane = new javax.swing.JScrollPane();
        resultsTree = new javax.swing.JTree();
        descriptionScrollPane = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        showCompatibleCheckBox = new javax.swing.JCheckBox();
        resetButton = new javax.swing.JButton();
        resultsLabel = new javax.swing.JLabel();

        searchComboBox.setEditable(true);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        installSelectedButton.setText("Install Selected");
        installSelectedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installSelectedButtonActionPerformed(evt);
            }
        });

        viewOnWebStoreButton.setText("View on Web Store");
 
        searchAppsLabel.setText("Search by Keyword:");

        resultsSplitPane.setDividerLocation(215);

        resultsScrollPane.setViewportView(resultsTree);

        resultsSplitPane.setLeftComponent(resultsScrollPane);

        descriptionScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        descriptionTextArea.setColumns(20);
        descriptionTextArea.setLineWrap(true);
        descriptionTextArea.setRows(5);
        descriptionTextArea.setText("App information is displayed here.");
        descriptionTextArea.setWrapStyleWord(true);
        descriptionScrollPane.setViewportView(descriptionTextArea);

        resultsSplitPane.setRightComponent(descriptionScrollPane);

        showCompatibleCheckBox.setText("Only Show Apps Known to be Compatible");

        resetButton.setText("Reset");

        resultsLabel.setText("Search Results:");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(resultsSplitPane)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(installSelectedButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(viewOnWebStoreButton))
                            .add(searchAppsLabel)
                            .add(layout.createSequentialGroup()
                                .add(searchComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 269, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(searchButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(resetButton))
                            .add(resultsLabel)
                            .add(showCompatibleCheckBox))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(searchAppsLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(searchComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(searchButton)
                    .add(resetButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(showCompatibleCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(resultsLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(resultsSplitPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(installSelectedButton)
                    .add(viewOnWebStoreButton))
                .addContainerGap())
        );
    }

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void installSelectedButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        // TODO add your handling code here:
    }                                                     

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void viewOnWebStoreButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }
    
    /**
     * Populate the current tree of results with the available apps from the web store.
     */
    private void populateTree() {
    	TreeModel treeModel = resultsTree.getModel();
    	
    	DefaultMutableTreeNode root = new DefaultMutableTreeNode();
    	
    	// TODO: Query, populate tree
    	
    	resultsTree.setModel(new DefaultTreeModel(root));
    }
    
    /**
     * Obtain the set of {@link WebApp} objects corresponding to currently selected entries in the tree of apps
     * @return A set of {@link WebApp} objects corresponding to selected apps in the tree
     */
    private Set<WebApp> getSelectedApps() {
    	return null;
    }
    
    /**
     * Setup and register a listener to the tree to listen for selection changed events in order to update the
     * app description box
     */
    private void setupDescriptionListener() {
    }
    
    private void updateDescriptionBox() {
    	Set<WebApp> selectedApps = getSelectedApps();
    	int numSelected = selectedApps.size();
    	
    	// If no apps are selected, clear the description box
    	if (numSelected == 0) {
    		descriptionTextArea.setText("");
    		
    	// If a single app is selected, show its app description
    	} else if (numSelected == 1){
    		WebApp selectedApp = selectedApps.iterator().next();
    		
    		String text = "App Description: " + selectedApp.getDescription();
    		text += "\n";
    		descriptionTextArea.setText(text);
    	} else {
    		descriptionTextArea.setText("");
    	}
    }
}
