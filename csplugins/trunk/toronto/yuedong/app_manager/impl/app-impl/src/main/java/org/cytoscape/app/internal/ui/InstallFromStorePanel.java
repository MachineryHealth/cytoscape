package org.cytoscape.app.internal.ui;

import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.io.File;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import org.cytoscape.app.internal.exception.AppMoveException;
import org.cytoscape.app.internal.exception.AppParsingException;
import org.cytoscape.app.internal.manager.App;
import org.cytoscape.app.internal.manager.AppManager;
import org.cytoscape.app.internal.manager.AppParser;
import org.cytoscape.app.internal.net.WebApp;

/**
 * This class represents the panel in the App Manager dialog's tab used for installing new apps.
 * Its UI setup code is generated by the Netbeans 7 GUI builder.
 */
public class InstallFromStorePanel extends javax.swing.JPanel {

	/** Long serial version identifier required by the Serializable class */
	private static final long serialVersionUID = -4975281017724945506L;
	
	private javax.swing.JCheckBox appTagCheckBox;
    private javax.swing.JCheckBox authorCheckBox;
    private javax.swing.JCheckBox descriptionChekBox;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JScrollPane descriptionScrollPane;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JButton installSelectedButton;
    private javax.swing.JCheckBox nameCheckBox;
    private javax.swing.JLabel resultsLabel;
    private javax.swing.JScrollPane resultsScrollPane;
    private javax.swing.JTable resultsTable;
    private javax.swing.JLabel searchAppsLabel;
    private javax.swing.JButton searchButton;
    private javax.swing.JComboBox searchComboBox;
    private javax.swing.JButton viewOnWebStoreButton;
	
	private JFileChooser fileChooser;
	
	private AppManager appManager;
	
    public InstallFromStorePanel(AppManager appManager) {
        this.appManager = appManager;
    	initComponents();
        
        setupFileChooser();
        setupResultsTable();
        setupDescriptionListener();
        
        SwingUtilities.invokeLater(new Runnable() {

			@Override
			public void run() {
				populateTable();
			}
        });
		
        
    }

    private void initComponents() {
    	// Changes after NetBeans generation:
    	// -Added hidden "Apps" column
    	// -App information JTextArea wraps text horizontally, no longer uses horizontal scroll bar
    	
        searchComboBox = new javax.swing.JComboBox();
        searchButton = new javax.swing.JButton();
        resultsLabel = new javax.swing.JLabel();
        resultsScrollPane = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        installSelectedButton = new javax.swing.JButton();
        viewOnWebStoreButton = new javax.swing.JButton();
        nameCheckBox = new javax.swing.JCheckBox();
        authorCheckBox = new javax.swing.JCheckBox();
        appTagCheckBox = new javax.swing.JCheckBox();
        searchAppsLabel = new javax.swing.JLabel();
        descriptionChekBox = new javax.swing.JCheckBox();
        descriptionLabel = new javax.swing.JLabel();
        descriptionScrollPane = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();

        searchComboBox.setEditable(true);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        resultsLabel.setText("Search Results:");

        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "App", "Name", "Author", "Version", "Rating", "Downloads"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultsTable.setShowGrid(false);
        resultsScrollPane.setViewportView(resultsTable);

        installSelectedButton.setText("Install Selected");
        installSelectedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installSelectedButtonActionPerformed(evt);
            }
        });
        // Hide the "App" column which is used to provide a reference to the object providing data for that row
        resultsTable.removeColumn(resultsTable.getColumn("App"));
        
        viewOnWebStoreButton.setText("View on Web Store");

        nameCheckBox.setSelected(true);
        nameCheckBox.setText("Name");

        authorCheckBox.setText("Author");

        appTagCheckBox.setText("App Tags");

        searchAppsLabel.setText("Search for Apps:");

        descriptionChekBox.setText("Description");

        descriptionLabel.setText("App Information:");

        descriptionTextArea.setEditable(false);
        descriptionTextArea.setFocusable(false);
        descriptionTextArea.setWrapStyleWord(true);
        descriptionScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        descriptionScrollPane.setViewportView(descriptionTextArea);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(resultsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 657, Short.MAX_VALUE)
                    .add(descriptionScrollPane)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(installSelectedButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(viewOnWebStoreButton))
                            .add(resultsLabel)
                            .add(layout.createSequentialGroup()
                                .add(nameCheckBox)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(authorCheckBox)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(appTagCheckBox)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(descriptionChekBox))
                            .add(searchAppsLabel)
                            .add(layout.createSequentialGroup()
                                .add(searchComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 288, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(searchButton))
                            .add(descriptionLabel))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(searchAppsLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(nameCheckBox)
                    .add(authorCheckBox)
                    .add(appTagCheckBox)
                    .add(descriptionChekBox))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(searchComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(searchButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(resultsLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(resultsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(descriptionLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(descriptionScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 96, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(installSelectedButton)
                    .add(viewOnWebStoreButton))
                .addContainerGap())
        );
    }

    private void installFromFileButtonActionPerformed(java.awt.event.ActionEvent evt) {
        int returnValue = fileChooser.showOpenDialog(this);
        
        if (returnValue == JFileChooser.APPROVE_OPTION) {
        	File[] files = fileChooser.getSelectedFiles();
        	
        	for (int index = 0; index < files.length; index++) {
        		AppParser appParser = appManager.getAppParser();
        		
        		App app = null;
        		
        		// Attempt to parse each file as an App object
        		try {
					app = appParser.parseApp(files[index]);
					
				} catch (AppParsingException e) {
					
					// TODO: Replace System.out.println() messages with exception or a pop-up message box
					System.out.println("Error parsing app: " + e.getMessage());
					
					JOptionPane.showMessageDialog(this, "Error opening app: " + e.getMessage(),
		                       "Error", JOptionPane.ERROR_MESSAGE);
				} finally {
					
					// Install the app if parsing was successful
					if (app != null) {
						appManager.installApp(app);
					}
				}
        	}
        }
    }

    private void installFromURLButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void installSelectedButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void setupFileChooser() {
    	fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select App Files");
        fileChooser.setApproveButtonText("Install");
        fileChooser.setApproveButtonMnemonic('I');
        fileChooser.setMultiSelectionEnabled(true);
        
        fileChooser.addChoosableFileFilter(new FileFilter(){

			@Override
			public boolean accept(File file) {
				if (file.getName().endsWith("jar") || file.isDirectory()) {
					return true;
				} else {
					return false;
				}
			}

			@Override
			public String getDescription() {
				return "Jar-packaged App Files (*.jar)";
			}
        	
        });
	}
    
    private void setupResultsTable() {
    	// resultsTable.setCellSelectionEnabled(false);

    	// resultsTable.setDefaultEditor(null, null);
    	resultsTable.setOpaque(true);
    }
    
    /**
     * Populate the current table of results with the available apps from the web store.
     */
    private void populateTable() {
    	Set<WebApp> apps = appManager.getWebQuerier().getAllApps();
    	
    	DefaultTableModel tableModel = (DefaultTableModel) resultsTable.getModel();
    	
    	// Table columns in order: "App", "Name", "Author", "Version", "Rating", "Downloads"
    	for (WebApp app : apps) {
    		tableModel.addRow(new Object[]{
    				app,
    				app.getFullName(),
    				"",
    				"",
    				"",
    				""
    		});
    	}
    }
    
    /**
     * Obtain the set of {@link WebApp} objects corresponding to currently selected entries in the table of apps
     * @return A set of {@link WebApp} objects corresponding to selected apps in the table
     */
    private Set<WebApp> getSelectedApps() {
        Set<WebApp> selectedApps = new HashSet<WebApp>();
    	int[] selectedRows = resultsTable.getSelectedRows();
    	
        for (int index = 0; index < selectedRows.length; index++) {
        	WebApp app = (WebApp) resultsTable.getModel().getValueAt(selectedRows[index], 0);
        	
        	selectedApps.add(app);
        }
    	
    	return selectedApps;
    }
    
    /**
     * Setup and register a listener to the table to listen for selection changed events in order to update the
     * app description box
     */
    private void setupDescriptionListener() {
    	resultsTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
			
			@Override
			public void valueChanged(ListSelectionEvent e) {
				updateDescriptionBox();
			}
		});
    }
    
    private void updateDescriptionBox() {
    	Set<WebApp> selectedApps = getSelectedApps();
    	int numSelected = selectedApps.size();
    	
    	// If no apps are selected, clear the description box
    	if (numSelected == 0) {
    		descriptionTextArea.setText("");
    		
    	// If a single app is selected, show its app description
    	} else if (numSelected == 1){
    		WebApp selectedApp = selectedApps.iterator().next();
    		
    		String text = "App Description: " + selectedApp.getDescription();
    		text += "\n";
    		descriptionTextArea.setText(text);
    	} else {
    		descriptionTextArea.setText("");
    	}
    }
}
