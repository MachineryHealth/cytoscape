package org.cytoscape.app.internal.ui;

import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.io.File;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelListener;
import javax.swing.event.TreeExpansionEvent;
import javax.swing.event.TreeExpansionListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

import org.cytoscape.app.internal.exception.AppMoveException;
import org.cytoscape.app.internal.exception.AppParsingException;
import org.cytoscape.app.internal.manager.App;
import org.cytoscape.app.internal.manager.AppManager;
import org.cytoscape.app.internal.manager.AppParser;
import org.cytoscape.app.internal.net.WebApp;
import org.cytoscape.app.internal.net.WebQuerier;

/**
 * This class represents the panel in the App Manager dialog's tab used for installing new apps.
 * Its UI setup code is generated by the Netbeans 7 GUI builder.
 */
public class InstallFromStorePanel extends javax.swing.JPanel {
	
	/** Long serial version identifier required by the Serializable class */
	private static final long serialVersionUID = -1208176142084829272L;
	
    private javax.swing.JScrollPane descriptionScrollPane;
    private javax.swing.JTextPane descriptionTextPane;
    private javax.swing.JButton installSelectedButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane resultsScrollPane;
    private javax.swing.JSplitPane resultsSplitPane;
    private javax.swing.JTree resultsTree;
    private javax.swing.JLabel searchAppsLabel;
    private javax.swing.JComboBox searchComboBox;
    private javax.swing.JCheckBox showCompatibleCheckBox;
	
	private JFileChooser fileChooser;
	
	private AppManager appManager;
	
    public InstallFromStorePanel(AppManager appManager) {
        this.appManager = appManager;
    	initComponents();
        
        setupDescriptionListener();
        
        populateTree();
    }

    private void initComponents() {

        searchComboBox = new javax.swing.JComboBox();
        installSelectedButton = new javax.swing.JButton();
        searchAppsLabel = new javax.swing.JLabel();
        resultsSplitPane = new javax.swing.JSplitPane();
        resultsScrollPane = new javax.swing.JScrollPane();
        resultsTree = new javax.swing.JTree();
        descriptionScrollPane = new javax.swing.JScrollPane();
        descriptionTextPane = new javax.swing.JTextPane();
        showCompatibleCheckBox = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();

        searchComboBox.setEditable(true);

        installSelectedButton.setText("Install Selected");
        installSelectedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installSelectedButtonActionPerformed(evt);
            }
        });

        searchAppsLabel.setText("Filter Apps:");

        resultsSplitPane.setDividerLocation(215);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("JTree");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("colors");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("blue");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("violet");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("red");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("yellow");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("sports");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("basketball");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("soccer");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("football");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("hockey test");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("food");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("hot dogs");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("pizza");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("ravioli");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("bananas");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        resultsTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        resultsScrollPane.setViewportView(resultsTree);

        resultsSplitPane.setLeftComponent(resultsScrollPane);

        descriptionTextPane.setContentType("text/html");
        descriptionTextPane.setEditable(false);
        descriptionTextPane.setText("<html>   <head>    </head>   <body>     <p style=\"margin-top: 0\"> App information is displayed here. <a href=\"http://www.w3schools.com/\">Test link</a>          </p>   </body> </html> ");
        descriptionScrollPane.setViewportView(descriptionTextPane);

        resultsSplitPane.setRightComponent(descriptionScrollPane);

        showCompatibleCheckBox.setText("Show only compatible apps");

        jButton1.setText("Browse File");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(installSelectedButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButton1))
                            .add(searchAppsLabel)
                            .add(layout.createSequentialGroup()
                                .add(searchComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 269, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(showCompatibleCheckBox)))
                        .add(0, 55, Short.MAX_VALUE))
                    .add(resultsSplitPane))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(searchAppsLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(searchComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(showCompatibleCheckBox))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(resultsSplitPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE, false)
                    .add(installSelectedButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void installSelectedButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        // TODO add your handling code here:
    }                                                     

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void viewOnWebStoreButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }
    
    /**
     * Populate the current tree of results with the available apps from the web store.
     */
    private void populateTree() {
    	WebQuerier webQuerier = appManager.getWebQuerier();
    	
    	DefaultMutableTreeNode root = new DefaultMutableTreeNode("Available Apps (" + webQuerier.getAllApps().size() + ")");
    	
    	// Obtain available tags
    	Set<WebQuerier.AppTag> availableTags = webQuerier.getAllTags();
    	
    	for (WebQuerier.AppTag appTag : availableTags) {
    		DefaultMutableTreeNode tagNode = new DefaultMutableTreeNode(appTag.getFullName() + " (" + appTag.getCount() + ")");
    		
    		// Obtain apps for the current tag
    		Set<WebApp> tagApps = webQuerier.getAppsByTag(appTag.getName());
    		
    		for (WebApp tagApp : tagApps) {
    			tagNode.add(new DefaultMutableTreeNode(tagApp));
    		}
    		
    		root.add(tagNode);
    	}
    	
    	resultsTree.setModel(new DefaultTreeModel(root));
    }
    
    /**
     * Obtain the set of {@link WebApp} objects corresponding to currently selected entries in the tree of apps
     * @return A set of {@link WebApp} objects corresponding to selected apps in the tree
     */
    private Set<WebApp> getSelectedApps() {
    	TreePath[] selectedPaths = resultsTree.getSelectionPaths();
    	Set<WebApp> selectedApps = new HashSet<WebApp>();
    	
    	for (int index = 0; index < selectedPaths.length; index++) {
    		TreePath selectedPath = selectedPaths[index];
    		
    		DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) selectedPath.getLastPathComponent();
    		Object selectedUserObject = selectedNode.getUserObject();
    		
    		// Selecting tag category nodes are also added to the set of selected paths; avoid
    		// adding them as selected apps by making this check
    		if (selectedUserObject instanceof WebApp) {
    			selectedApps.add((WebApp) selectedUserObject);
    		}
    	}
    	
    	return selectedApps;
    }
    
    /**
     * Setup and register a listener to the tree to listen for selection changed events in order to update the
     * app description box
     */
    private void setupDescriptionListener() {
    	resultsTree.addTreeSelectionListener(new TreeSelectionListener() {
			
			@Override
			public void valueChanged(TreeSelectionEvent event) {
				updateDescriptionBox();
			}
		});
    }
    
    private void updateDescriptionBox() {
    	Set<WebApp> selectedApps = getSelectedApps();
    	int numSelected = selectedApps.size();
    	
    	// If no apps are selected, clear the description box
    	if (numSelected == 0) {
    		descriptionTextArea.setText("App information is displayed here.");
    		
    	// If a single app is selected, show its app description
    	} else if (numSelected == 1){
    		WebApp selectedApp = selectedApps.iterator().next();
    		
    		String text = "<html><b>" + selectedApp.getFullName() + "</b></html>";
    		text += "\n\n";
    		text += selectedApp.getDescription();
    		descriptionTextArea.setText(text);
    	} else {
    		descriptionTextArea.setText(numSelected + " apps selected.");
    	}
    }
}
