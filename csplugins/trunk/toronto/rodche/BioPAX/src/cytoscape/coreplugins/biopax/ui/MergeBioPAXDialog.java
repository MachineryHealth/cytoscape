package cytoscape.coreplugins.biopax.ui;

import cytoscape.Cytoscape;
import cytoscape.CyNetwork;
import cytoscape.util.CyNetworkNaming;
import cytoscape.coreplugins.biopax.BioPaxGraphReader;
import cytoscape.coreplugins.biopax.util.BioPaxUtil;
import cytoscape.task.ui.JTaskConfig;
import cytoscape.task.util.TaskManager;
import cytoscape.task.Task;
import cytoscape.task.TaskMonitor;

import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import java.util.ArrayList;

import org.biopax.paxtools.io.simpleIO.SimpleEditorMap;
import org.biopax.paxtools.controller.Merger;
import org.biopax.paxtools.model.BioPAXFactory;
import org.biopax.paxtools.model.Model;

public class MergeBioPAXDialog extends JDialog {
    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JList list1;

    private ArrayList<CyNetwork> bpNetworks = new ArrayList<CyNetwork>();

    public MergeBioPAXDialog() {
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);

        setTitle("Merge BioPAX networks");

        DefaultListModel listModel = new DefaultListModel();

        for (CyNetwork cyNetwork : Cytoscape.getNetworkSet()) {
            if (BioPaxUtil.isBioPAXNetwork(cyNetwork)) {
                listModel.addElement(cyNetwork.getTitle());
                bpNetworks.add(cyNetwork);
            }
        }
        list1.setModel(listModel);

        buttonOK.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onOK();
            }
        });

        buttonCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        });

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    }

    private void onOK() {
        if (list1.getSelectedIndices().length < 2) {
            JOptionPane.showMessageDialog(null,
                    "Please select at least two networks to be merged.",
                    "Missing selection",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        ArrayList<CyNetwork> selectedNetworks = new ArrayList<CyNetwork>();
        for (int index : list1.getSelectedIndices())
            selectedNetworks.add(bpNetworks.get(index));

        MergeBioPAXTask task = new MergeBioPAXTask(selectedNetworks);

        JTaskConfig jTaskConfig = new JTaskConfig();
        jTaskConfig.setOwner(Cytoscape.getDesktop());
        jTaskConfig.displayCloseButton(true);
        jTaskConfig.displayStatus(true);
        jTaskConfig.setAutoDispose(false);

        dispose();

        TaskManager.executeTask(task, jTaskConfig);
    }

    private void onCancel() {
        dispose();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridBagLayout());
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        contentPane.add(panel1, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(panel2, gbc);
        buttonOK = new JButton();
        buttonOK.setText("Merge");
        buttonOK.setMnemonic('M');
        buttonOK.setDisplayedMnemonicIndex(0);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(buttonOK, gbc);
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        buttonCancel.setMnemonic('C');
        buttonCancel.setDisplayedMnemonicIndex(0);
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(buttonCancel, gbc);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        contentPane.add(panel3, gbc);
        final JScrollPane scrollPane1 = new JScrollPane();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel3.add(scrollPane1, gbc);
        scrollPane1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), "BioPAX Networks"));
        list1 = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        list1.setModel(defaultListModel1);
        scrollPane1.setViewportView(list1);
        final JLabel label1 = new JLabel();
        label1.setText("Please select the networks to be merged. (Ctrl + Click)");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        contentPane.add(label1, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}

class MergeBioPAXTask implements Task {
    private ArrayList<CyNetwork> selectedNetworks;
    private TaskMonitor taskMonitor;


    public MergeBioPAXTask(ArrayList<CyNetwork> selectedNetworks) {
        this.selectedNetworks = selectedNetworks;
    }

    public void run() {
        taskMonitor.setStatus("Merging BioPAX networks...");

        Merger merger = new Merger( new SimpleEditorMap());

        assert selectedNetworks.size() > 1;
        final BioPAXFactory factory = 
        	BioPaxUtil.getNetworkModel(
        			selectedNetworks.get(0)).getLevel().getDefaultFactory();
        //CyNetwork baseNetwork = selectedNetworks.remove(0);
        /*
        Model[] models = new Model[ selectedNetworks.size() ];
        int cnt = 0;
        for(CyNetwork cyNetwork: selectedNetworks)
        {
            models[cnt++] = BioPaxUtil.getNetworkModel(cyNetwork);
        }
        */
        
        Model base = factory.createModel();
        for(CyNetwork cn : selectedNetworks) {
        	Model m = BioPaxUtil.getNetworkModel(cn);
        	merger.merge(base, m);
        }
        
        BioPaxGraphReader reader = new BioPaxGraphReader(base);
        CyNetwork newNetwork = Cytoscape.createNetwork(reader, true, null);
        BioPaxUtil.setNetworkModel(newNetwork, base);
        newNetwork.setTitle(CyNetworkNaming.getSuggestedNetworkTitle("(Merged) " + newNetwork.getTitle()));
        Cytoscape.setCurrentNetwork(newNetwork.getIdentifier());
        Cytoscape.setCurrentNetworkView(newNetwork.getIdentifier());
        
        taskMonitor.setPercentCompleted(100);
	    taskMonitor.setStatus("Networks successfully merged.");
    }

    public void halt() {
        // No halt support
    }

    public void setTaskMonitor(TaskMonitor taskMonitor) throws IllegalThreadStateException {
        this.taskMonitor = taskMonitor;
    }

    public String getTitle() {
        return "Merging BioPAX networks";
    }
}
