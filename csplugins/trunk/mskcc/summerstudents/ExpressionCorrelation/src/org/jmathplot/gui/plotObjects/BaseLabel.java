package org.jmathplot.gui.plotObjects;

import java.awt.*;
import org.jmathplot.gui.*;
import org.jmathplot.util.*;

/**


 * <p>Copyright : BSD License</p>

 * @author Yann RICHET
 * @version 1.0
 */

public class BaseLabel
	extends Label
	implements BaseScalesDependant {

	private double[] positionOnAxes;
	private Base base;

	public BaseLabel(String l, Base b, double[] pOA, Color c) {
		super(l, buildRelativeCoord(pOA, b), c);
		positionOnAxes = pOA;
		base = b;
	}

	public static RelativeCoord buildRelativeCoord(double[] pOA, Base base) {
		Coord origin = base.getCoords()[0];
		int nbDim = base.dimension;

		double[] plotCoord = new double[base.dimension];
		for (int i = 0; i < nbDim; i++) {
			//calculate the offset generated by each other axe
			if (base.getAxeScale(i) == Base.LINEAR) {
				plotCoord[i] = origin.getPlotCoordCopy()[i]+((base.getCoords()[i + 1].getPlotCoordCopy()[i] -
					       origin.getPlotCoordCopy()[i]) * pOA[i]);
			} else if (base.getAxeScale(i) == Base.LOG) {
				int numPow10 = (int) Math.rint( (Math.log(base.getMaxBounds()[i] /
					       base.getMinBounds()[i]) /
					       Math.log(10)));
				plotCoord[i] = (origin.getPlotCoordCopy()[i]) * (Math.pow(10,
					       ( (double) numPow10) * pOA[i]));
			}
		}

		return new RelativeCoord(plotCoord, base);
	}

	public void updateBase() {
		coord = buildRelativeCoord(positionOnAxes, base);
	}

	public static void main(String[] args) {
		Plot3DPanel p3d = new Plot3DPanel(new double[] {0, 0, 0}
				  , new double[] {10, 10, 10}
				  , new int[3], new String[] {"x", "y", "z"});
		new FrameView(p3d);
		p3d.addPlot(DoubleArray.random(10, 3), "plot", "SCATTER");
		p3d.addPlotable(new BaseLabel("label", p3d.getBase(), new double[] {
			-0.1, 0.5, 0.5}
			, Color.RED));

	}

}