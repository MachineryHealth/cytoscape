package org.genmapp.subgeneviewer.splice;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.geom.Point2D;

import javax.swing.JDialog;
import javax.swing.JPanel;

import org.jdesktop.swingx.painter.gradient.BasicGradientPainter;

import cytoscape.Cytoscape;
import cytoscape.visual.NodeAppearanceCalculator;
import cytoscape.visual.ui.icon.VisualPropertyIcon;

/**
 * 
 */
public class SpliceViewBuilder extends JDialog {
	private static SpliceViewBuilder dab = null;

	private final NodeAppearanceCalculator nac = Cytoscape
			.getVisualMappingManager().getVisualStyle()
			.getNodeAppearanceCalculator();

	/**
	 * Creates a new SpliceViewBuilder object.
	 * 
	 * @param parent
	 *            DOCUMENT ME!
	 * @param modal
	 *            DOCUMENT ME!
	 */
	public SpliceViewBuilder(Frame parent, boolean modal) {
		super(parent, modal);
		System.out.println("SpliceViewBuilder check!");
		initComponents();

		this.addComponentListener(new ComponentAdapter() {
			public void componentResized(ComponentEvent e) {
				mainView.updateView();
			}
		});
	}

	/**
	 * DOCUMENT ME!
	 * 
	 * @param parent
	 *            DOCUMENT ME!
	 * 
	 * @return DOCUMENT ME!
	 */
	public static JPanel showDialog(Frame parent) {
		buildDefaultViewDialog(parent);
		dab.setLocationRelativeTo(parent);
		dab.setSize(500, 200);
		dab.mainView.updateView();
		dab.setLocationRelativeTo(Cytoscape.getDesktop());
		dab.setVisible(true);

		return dab.getPanel();
	}

	/**
	 * DOCUMENT ME!
	 * 
	 * @return DOCUMENT ME!
	 */
	public static JPanel getSpliceView(String vsName) {
		buildDefaultViewDialog(null);
		Cytoscape.getVisualMappingManager().setVisualStyle(vsName);
		dab.mainView.updateBackgroungColor(Cytoscape.getVisualMappingManager()
				.getVisualStyle().getGlobalAppearanceCalculator()
				.getDefaultBackgroundColor());
		dab.mainView.updateView();

		return dab.getPanel();
	}

	private static void buildDefaultViewDialog(Frame component) {
		dab = new SpliceViewBuilder(component, true);
		dab.mainView.createDummyNetworkView();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed" desc=" Generated Code ">
	private void initComponents() {
		jXPanel1 = new org.jdesktop.swingx.JXPanel();
		mainView = new SpliceViewPanel();
		jXTitledPanel1 = new org.jdesktop.swingx.JXTitledPanel();
		defaultObjectTabbedPane = new javax.swing.JTabbedPane();
		nodeScrollPane = new javax.swing.JScrollPane();
		edgeScrollPane = new javax.swing.JScrollPane();
		globalScrollPane = new javax.swing.JScrollPane();
		closeButton = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("Exon Splice Viewer");
		mainView.setBorder(new javax.swing.border.LineBorder(
				java.awt.Color.darkGray, 1, true));

		org.jdesktop.layout.GroupLayout jXPanel2Layout = new org.jdesktop.layout.GroupLayout(
				mainView);
		mainView.setLayout(jXPanel2Layout);
		jXPanel2Layout.setHorizontalGroup(jXPanel2Layout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(0, 300,
				Short.MAX_VALUE));
		jXPanel2Layout.setVerticalGroup(jXPanel2Layout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(0, 237,
				Short.MAX_VALUE));

		jXTitledPanel1.setTitlePainter(new BasicGradientPainter(
				new Point2D.Double(.2d, 0), new Color(Color.gray.getRed(),
						Color.gray.getGreen(), Color.gray.getBlue(), 100),
				new Point2D.Double(.8d, 0), Color.WHITE));
		jXTitledPanel1.setTitleFont(new java.awt.Font("SansSerif", 1, 12));
		jXTitledPanel1.setMinimumSize(new java.awt.Dimension(300, 27));
		jXTitledPanel1.setPreferredSize(new java.awt.Dimension(300, 27));
		defaultObjectTabbedPane.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

		defaultObjectTabbedPane.addTab("Node", nodeScrollPane);
		defaultObjectTabbedPane.addTab("Edge", edgeScrollPane);
		defaultObjectTabbedPane.addTab("Global", globalScrollPane);

		org.jdesktop.layout.GroupLayout jXTitledPanel1Layout = new org.jdesktop.layout.GroupLayout(
				jXTitledPanel1.getContentContainer());
		jXTitledPanel1.getContentContainer().setLayout(jXTitledPanel1Layout);
		jXTitledPanel1Layout.setHorizontalGroup(jXTitledPanel1Layout
				.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(defaultObjectTabbedPane,
						org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 250,
						Short.MAX_VALUE));
		jXTitledPanel1Layout.setVerticalGroup(jXTitledPanel1Layout
				.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(defaultObjectTabbedPane,
						org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 243,
						Short.MAX_VALUE));

		closeButton.setText("Close");
		closeButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				dispose();
			}
		});

		org.jdesktop.layout.GroupLayout jXPanel1Layout = new org.jdesktop.layout.GroupLayout(
				jXPanel1);
		jXPanel1.setLayout(jXPanel1Layout);
		jXPanel1Layout
				.setHorizontalGroup(jXPanel1Layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								jXPanel1Layout
										.createSequentialGroup()
										.addContainerGap()
										.add(
												jXPanel1Layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(
																jXPanel1Layout
																		.createSequentialGroup()
																		.addPreferredGap(
																				org.jdesktop.layout.LayoutStyle.RELATED)
																		.add(
																				closeButton))
														.add(
																mainView))
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(12,
												12, 12)));
		jXPanel1Layout
				.setVerticalGroup(jXPanel1Layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								org.jdesktop.layout.GroupLayout.TRAILING,
								jXPanel1Layout
										.createSequentialGroup()
										.addContainerGap()
										.add(
												jXPanel1Layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.TRAILING)
														
														.add(
																jXPanel1Layout
																		.createSequentialGroup()
																		.add(
																				mainView)
																		.addPreferredGap(
																				org.jdesktop.layout.LayoutStyle.RELATED)
																		.add(
																				jXPanel1Layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.BASELINE)
																							.add(
																								closeButton))))
										.addContainerGap()));

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(jXPanel1,
				org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
				org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(jXPanel1,
				org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
				org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
		pack();
	} // </editor-fold>

	// Variables declaration - do not modify
	private javax.swing.JButton closeButton;

	private javax.swing.JScrollPane nodeScrollPane;

	private javax.swing.JScrollPane edgeScrollPane;

	private javax.swing.JScrollPane globalScrollPane;

	private javax.swing.JTabbedPane defaultObjectTabbedPane;

	private org.jdesktop.swingx.JXPanel jXPanel1;

	// private org.jdesktop.swingx.JXPanel jXPanel2;
	private org.jdesktop.swingx.JXTitledPanel jXTitledPanel1;

	// End of variables declaration
	protected SpliceViewPanel mainView;

	// End of variables declaration
	private JPanel getPanel() {
		return mainView;
	}

//	class VisualPropCellRenderer extends JLabel implements ListCellRenderer {
//		private final Font SELECTED_FONT = new Font("SansSerif", Font.ITALIC,
//				14);
//
//		private final Font NORMAL_FONT = new Font("SansSerif", Font.BOLD, 12);
//
//		private final Color SELECTED_COLOR = new Color(10, 50, 180, 20);
//
//		private final Color SELECTED_FONT_COLOR = new Color(0, 150, 255, 150);
//
//		private final List<Icon> icons;
//
//		public VisualPropCellRenderer(List<Icon> icons) {
//			this.icons = icons;
//			setOpaque(true);
//		}
//
//		public Component getListCellRendererComponent(JList list, Object value,
//				int index, boolean isSelected, boolean cellHasFocus) {
//			final VisualPropertyIcon icon;
//
//			if (icons.size() > index) {
//				icon = (VisualPropertyIcon) icons.get(index);
//			} else
//				icon = null;
//
//			setText(value.toString());
//			setIcon(icon);
//			setFont(isSelected ? SELECTED_FONT : NORMAL_FONT);
//
//			this.setVerticalTextPosition(SwingConstants.CENTER);
//			this.setVerticalAlignment(SwingConstants.CENTER);
//			this.setIconTextGap(55);
//
//			if (value instanceof VisualPropertyType
//					&& (((VisualPropertyType) value).getDataType() == String.class)) {
//				final Object defVal = ((VisualPropertyType) value)
//						.getDefault(Cytoscape.getVisualMappingManager()
//								.getVisualStyle());
//
//				if (defVal != null) {
//					this.setToolTipText((String) defVal);
//				}
//			}
//
//			setBackground(isSelected ? SELECTED_COLOR : list.getBackground());
//			setForeground(isSelected ? SELECTED_FONT_COLOR : list
//					.getForeground());
//
//			if (icon != null) {
//				setPreferredSize(new Dimension(250, icon.getIconHeight() + 12));
//			}
//
//			this.setBorder(new DropShadowBorder());
//
//			return this;
//		}
//	}

	/*
	 * Draw global color icon
	 */
	class GlobalIcon extends VisualPropertyIcon {
		public GlobalIcon(String name, Color color) {
			super(name, color);
		}

		public void paintIcon(Component c, Graphics g, int x, int y) {
			Graphics2D g2d = (Graphics2D) g;

			g2d.setColor(color);
			g2d.fillRect(5, 3, 50, 32);

			g2d.setStroke(new BasicStroke(1f));
			g2d.setColor(Color.DARK_GRAY);
			g2d.drawRect(5, 3, 50, 32);
		}
	}
}
