/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AddFileIDMappingSourceDialog.java
 *
 * Created on Jun 15, 2009, 2:01:48 PM
 */

package csplugins.id.mapping.ui;

import csplugins.id.mapping.DelimitedTextIDMappingClient;

import cytoscape.util.FileUtil;
import cytoscape.util.CyFileFilter;

import cytoscape.task.ui.JTaskConfig;
import cytoscape.task.util.TaskManager;

import org.bridgedb.file.IDMapperFile;

import java.util.Set;
import java.util.HashSet;

import java.io.File;
import java.io.IOException;
import java.net.URL;

/**
 *
 * @author gjj
 */
public class AddFileIDMappingSourceDialog extends javax.swing.JDialog {
    //private DelimitedTextIDMappingClient idMappingClient = null;

    /** Creates new form AddFileIDMappingSourceDialog */
    public AddFileIDMappingSourceDialog(java.awt.Dialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        javax.swing.JPanel textFilePanel = new javax.swing.JPanel();
        javax.swing.JPanel sourcePanel = new javax.swing.JPanel();
        javax.swing.JLabel typeLabel = new javax.swing.JLabel();
        localRadioButton = new javax.swing.JRadioButton();
        remoteRadioButton = new javax.swing.JRadioButton();
        javax.swing.JPanel selectPanel = new javax.swing.JPanel();
        textFileTextField = new javax.swing.JTextField();
        textFileButton = new javax.swing.JButton();
        javax.swing.JPanel okPanel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        javax.swing.JPanel opPanel = new javax.swing.JPanel();
        optionCheckBox = new javax.swing.JCheckBox();
        advancedPanel = new javax.swing.JPanel();
        transitivityCheckBox = new javax.swing.JCheckBox();
        delemiterTypePanel = new javax.swing.JPanel();
        tabTypeCheckBox = new javax.swing.JCheckBox();
        commaTypeCheckBox = new javax.swing.JCheckBox();
        semiTypeCheckBox = new javax.swing.JCheckBox();
        spaceTypeCheckBox = new javax.swing.JCheckBox();
        otherTypeCheckBox = new javax.swing.JCheckBox();
        otherTypeTextField = new javax.swing.JTextField();
        delemiterIDPanel = new javax.swing.JPanel();
        tabIDCheckBox = new javax.swing.JCheckBox();
        commaIDCheckBox = new javax.swing.JCheckBox();
        semiIDCheckBox = new javax.swing.JCheckBox();
        spaceIDCheckBox = new javax.swing.JCheckBox();
        otherIDCheckBox = new javax.swing.JCheckBox();
        otherIDTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add a ID Mapping Source From File");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        textFilePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Data source"));
        textFilePanel.setLayout(new java.awt.GridBagLayout());

        sourcePanel.setLayout(new javax.swing.BoxLayout(sourcePanel, javax.swing.BoxLayout.LINE_AXIS));

        typeLabel.setText("File type:   ");
        sourcePanel.add(typeLabel);

        buttonGroup1.add(localRadioButton);
        localRadioButton.setSelected(true);
        localRadioButton.setText("Local   ");
        localRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localRadioButtonActionPerformed(evt);
            }
        });
        sourcePanel.add(localRadioButton);

        buttonGroup1.add(remoteRadioButton);
        remoteRadioButton.setText("Remote/URL");
        remoteRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remoteRadioButtonActionPerformed(evt);
            }
        });
        sourcePanel.add(remoteRadioButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        textFilePanel.add(sourcePanel, gridBagConstraints);

        selectPanel.setLayout(new javax.swing.BoxLayout(selectPanel, javax.swing.BoxLayout.LINE_AXIS));

        textFileTextField.setPreferredSize(new java.awt.Dimension(250, 20));
        textFileTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textFileTextFieldKeyTyped(evt);
            }
        });
        selectPanel.add(textFileTextField);

        textFileButton.setText("Select file");
        textFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFileButtonActionPerformed(evt);
            }
        });
        selectPanel.add(textFileButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        textFilePanel.add(selectPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(textFilePanel, gridBagConstraints);

        okPanel.setLayout(new javax.swing.BoxLayout(okPanel, javax.swing.BoxLayout.LINE_AXIS));

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        okPanel.add(cancelButton);

        okButton.setText("   OK   ");
        okButton.setToolTipText("\"Select at least two networks to merge\"");
        okButton.setEnabled(false);
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        okPanel.add(okButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(okPanel, gridBagConstraints);

        opPanel.setLayout(new java.awt.GridBagLayout());

        optionCheckBox.setText("Show advanced option");
        optionCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        opPanel.add(optionCheckBox, gridBagConstraints);

        advancedPanel.setLayout(new java.awt.GridBagLayout());
        advancedPanel.setVisible(false);

        transitivityCheckBox.setText("Support transitivity of ID mappings");
        transitivityCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transitivityCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advancedPanel.add(transitivityCheckBox, gridBagConstraints);

        delemiterTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Select delimiter between IDs of different types"));
        delemiterTypePanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        buttonGroup2.add(tabTypeCheckBox);
        tabTypeCheckBox.setSelected(true);
        tabTypeCheckBox.setText("Tab");
        tabTypeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateOKButtonEnable();
            }
        });
        delemiterTypePanel.add(tabTypeCheckBox);

        buttonGroup3.add(commaTypeCheckBox);
        commaTypeCheckBox.setText("Comma");
        commaTypeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateOKButtonEnable();
            }
        });
        delemiterTypePanel.add(commaTypeCheckBox);

        buttonGroup4.add(semiTypeCheckBox);
        semiTypeCheckBox.setText("Semicolon");
        semiTypeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateOKButtonEnable();
            }
        });
        delemiterTypePanel.add(semiTypeCheckBox);

        buttonGroup5.add(spaceTypeCheckBox);
        spaceTypeCheckBox.setText("Space");
        spaceTypeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateOKButtonEnable();
            }
        });
        delemiterTypePanel.add(spaceTypeCheckBox);

        otherTypeCheckBox.setText("Other");
        otherTypeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateOKButtonEnable();
                otherTypeTextField.setEditable(otherTypeCheckBox.isSelected());
            }
        });
        delemiterTypePanel.add(otherTypeCheckBox);

        otherTypeTextField.setEnabled(otherTypeCheckBox.isSelected());
        otherTypeTextField.setMinimumSize(new java.awt.Dimension(60, 20));
        otherTypeTextField.setPreferredSize(new java.awt.Dimension(60, 20));
        otherTypeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateOKButtonEnable();
            }
        });
        delemiterTypePanel.add(otherTypeTextField);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advancedPanel.add(delemiterTypePanel, gridBagConstraints);

        delemiterIDPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Select delimiter between IDs of the same type"));
        delemiterIDPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        buttonGroup2.add(tabIDCheckBox);
        tabIDCheckBox.setText("Tab");
        tabIDCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateOKButtonEnable();
            }
        });
        delemiterIDPanel.add(tabIDCheckBox);

        buttonGroup3.add(commaIDCheckBox);
        commaIDCheckBox.setSelected(true);
        commaIDCheckBox.setText("Comma");
        commaIDCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateOKButtonEnable();
            }
        });
        delemiterIDPanel.add(commaIDCheckBox);

        buttonGroup4.add(semiIDCheckBox);
        semiIDCheckBox.setSelected(true);
        semiIDCheckBox.setText("Semicolon");
        semiIDCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateOKButtonEnable();
            }
        });
        delemiterIDPanel.add(semiIDCheckBox);

        buttonGroup5.add(spaceIDCheckBox);
        spaceIDCheckBox.setText("Space");
        spaceIDCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateOKButtonEnable();
            }
        });
        delemiterIDPanel.add(spaceIDCheckBox);

        otherIDCheckBox.setText("Other");
        delemiterIDPanel.add(otherIDCheckBox);

        otherIDTextField.setEnabled(otherIDCheckBox.isSelected());
        otherIDTextField.setMinimumSize(new java.awt.Dimension(60, 20));
        otherIDTextField.setPreferredSize(new java.awt.Dimension(60, 20));
        otherIDTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateOKButtonEnable();
            }
        });
        delemiterIDPanel.add(otherIDTextField);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advancedPanel.add(delemiterIDPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        opPanel.add(advancedPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(opPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void localRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localRadioButtonActionPerformed
        //textFileButton.setVisible(true);
        textFileButton.setText("Select file");
        textFileTextField.setText("");
        isLocal = true;
}//GEN-LAST:event_localRadioButtonActionPerformed

    private void remoteRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remoteRadioButtonActionPerformed
        //textFileButton.setVisible(false);
        textFileButton.setText("Retrieve");
        textFileTextField.setText("");
        isLocal = false;
}//GEN-LAST:event_remoteRadioButtonActionPerformed

    private void textFileTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFileTextFieldKeyTyped
        //updateGoButtonEnable();
}//GEN-LAST:event_textFileTextFieldKeyTyped

    private void textFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFileButtonActionPerformed
        URL url;
        String strURL;
        try {
            if (isLocal) {
                File source = FileUtil.getFile("Select a ID mapping file", FileUtil.LOAD,
                        new CyFileFilter[] {  });
                if (source==null) {
                    return;
                }
                url = source.toURI().toURL();
                strURL = url.toString();
                textFileTextField.setText(strURL);
            } else {
                strURL =  textFileTextField.getText();
                if (strURL==null || strURL.length()==0) {
                    return;
                }
                url = new URL(strURL);
            }

        } catch(IOException e) {
            e.printStackTrace();
            return;
        }
        updateOKButtonEnable();
}//GEN-LAST:event_textFileButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
}//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        cancelled = false;
        setVisible(false);
}//GEN-LAST:event_okButtonActionPerformed

    private void optionCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionCheckBoxActionPerformed
        advancedPanel.setVisible(optionCheckBox.isSelected());
        this.pack();
}//GEN-LAST:event_optionCheckBoxActionPerformed

    private void transitivityCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transitivityCheckBoxActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_transitivityCheckBoxActionPerformed

    private void updateOKButtonEnable() {
        String url = textFileTextField.getText();
        if (url.length()==0) {
            okButton.setToolTipText("Please specify the URL of the input file");
            okButton.setEnabled(false);
            return;
        }

        char[] typeDelimiters = getTypeDelimiters();
        if(typeDelimiters==null) {
            okButton.setToolTipText("Please specify at least one type delimiter");
            okButton.setEnabled(false);
            return;
        }

        okButton.setToolTipText(null);
        okButton.setEnabled(true);
    }

    private char[] getTypeDelimiters() {
        Set<Character> typeDelimiters = new HashSet();

        if (tabTypeCheckBox.isSelected()) {
            typeDelimiters.add('\t');
        }

        if (commaTypeCheckBox.isSelected()) {
            typeDelimiters.add(',');
        }

        if (semiTypeCheckBox.isSelected()) {
            typeDelimiters.add(';');
        }

        if (spaceTypeCheckBox.isSelected()) {
            typeDelimiters.add(' ');
        }

        if (otherTypeCheckBox.isSelected()) {
            String strOther = otherTypeTextField.getText();
            if (strOther.length()>0) {
                typeDelimiters.add(strOther.charAt(0));
            }
        }

        int n = typeDelimiters.size();
        if (n==0) {
            return null;
        }

        char[] ret = new char[n];
        int i = 0;
        for (char ch : typeDelimiters) {
            ret[i++] = ch;
        }

        return ret;
    }

    private char[] getIDDelimiters() {
        Set<Character> idDelimiters = new HashSet();

        if (tabIDCheckBox.isSelected()) {
            idDelimiters.add('\t');
        }

        if (commaIDCheckBox.isSelected()) {
            idDelimiters.add(',');
        }

        if (semiIDCheckBox.isSelected()) {
            idDelimiters.add(';');
        }

        if (spaceIDCheckBox.isSelected()) {
            idDelimiters.add(' ');
        }

        if (otherIDCheckBox.isSelected()) {
            String strOther = otherIDTextField.getText();
            if (strOther.length()>0) {
                idDelimiters.add(strOther.charAt(0));
            }
        }

        int n = idDelimiters.size();
        if (n==0) {
            return null;
        }

        char[] ret = new char[n];
        int i = 0;
        for (char ch : idDelimiters) {
            ret[i++] = ch;
        }

        return ret;
    }

    public DelimitedTextIDMappingClient getIDMappingClient() {
        char[] typeDelimiters = getTypeDelimiters();
        char[] idDelimiters = getIDDelimiters();

        //TODO: delimiters cannot be the same or contain each other for type and id
        
        int nTypeDelimiter = typeDelimiters.length;
        int nIDDelimiter = idDelimiters.length;

        if (nTypeDelimiter==0 || nIDDelimiter==0) {
            return null;
        }

        URL url;
        try {
            url = new URL(textFileTextField.getText());
        } catch (java.net.MalformedURLException ex) {
            ex.printStackTrace();
            return null;
        }

        boolean transitivity = transitivityCheckBox.isSelected();
        
        return new DelimitedTextIDMappingClient(url, typeDelimiters, idDelimiters, transitivity);
    }

    public boolean isCancelled() {
        return cancelled;
    }
    
//    private static String string2octal(String str) {
//        StringBuilder ret = new StringBuilder();
//        for (char c : str.toCharArray()) {
//            ret.append("\\0");
//            ret.append(Integer.toString(c, 8));
//        }
//        return ret.toString();
//    }


    private boolean isLocal = true;
    private boolean cancelled = true;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel advancedPanel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox commaIDCheckBox;
    private javax.swing.JCheckBox commaTypeCheckBox;
    private javax.swing.JPanel delemiterIDPanel;
    private javax.swing.JPanel delemiterTypePanel;
    private javax.swing.JRadioButton localRadioButton;
    private javax.swing.JButton okButton;
    private javax.swing.JCheckBox optionCheckBox;
    private javax.swing.JCheckBox otherIDCheckBox;
    private javax.swing.JTextField otherIDTextField;
    private javax.swing.JCheckBox otherTypeCheckBox;
    private javax.swing.JTextField otherTypeTextField;
    private javax.swing.JRadioButton remoteRadioButton;
    private javax.swing.JCheckBox semiIDCheckBox;
    private javax.swing.JCheckBox semiTypeCheckBox;
    private javax.swing.JCheckBox spaceIDCheckBox;
    private javax.swing.JCheckBox spaceTypeCheckBox;
    private javax.swing.JCheckBox tabIDCheckBox;
    private javax.swing.JCheckBox tabTypeCheckBox;
    private javax.swing.JButton textFileButton;
    private javax.swing.JTextField textFileTextField;
    private javax.swing.JCheckBox transitivityCheckBox;
    // End of variables declaration//GEN-END:variables

}
