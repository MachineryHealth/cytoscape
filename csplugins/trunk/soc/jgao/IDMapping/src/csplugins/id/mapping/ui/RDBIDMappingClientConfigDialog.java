/*
 Copyright (c) 2006, 2007, The Cytoscape Consortium (www.cytoscape.org)

 The Cytoscape Consortium is:
 - Institute for Systems Biology
 - University of California San Diego
 - Memorial Sloan-Kettering Cancer Center
 - Institut Pasteur
 - Agilent Technologies

 This library is free software; you can redistribute it and/or modify it
 under the terms of the GNU Lesser General Public License as published
 by the Free Software Foundation; either version 2.1 of the License, or
 any later version.

 This library is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF
 MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and
 documentation provided hereunder is on an "as is" basis, and the
 Institute for Systems Biology and the Whitehead Institute
 have no obligations to provide maintenance, support,
 updates, enhancements or modifications.  In no event shall the
 Institute for Systems Biology and the Whitehead Institute
 be liable to any party for direct, indirect, special,
 incidental or consequential damages, including lost profits, arising
 out of the use of this software and its documentation, even if the
 Institute for Systems Biology and the Whitehead Institute
 have been advised of the possibility of such damage.  See
 the GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with this library; if not, write to the Free Software Foundation,
 Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 */

package csplugins.id.mapping.ui;

import csplugins.id.mapping.RDBIDMappingClient;
import csplugins.id.mapping.PGDBIDMappingClient;

import org.bridgedb.IDMapperException;
import org.bridgedb.rdb.IDMapperRdb;

import cytoscape.util.FileUtil;
import cytoscape.util.CyFileFilter;

import java.io.File;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author gjj
 */
public class RDBIDMappingClientConfigDialog extends javax.swing.JDialog {

    private enum DBType {
        PGDB("Apache Derby Embeded (PGDB)");

        DBType(String name) {
            this.name = name;
        }

        String name;

        public String toString() {
            return name;
        }
    }

    /** Creates new form RDBIDMappingClientConfig */
    public RDBIDMappingClientConfigDialog(javax.swing.JDialog parent, boolean modal) {
        this(parent, modal, null);
    }

    public RDBIDMappingClientConfigDialog(javax.swing.JDialog parent, boolean modal,
            RDBIDMappingClient client) {
        super(parent, modal);
        initComponents();
        this.client = client;
        if (client!=null) {
            if (client instanceof PGDBIDMappingClient) {
                IDMapperRdb idMapper = (IDMapperRdb)client.getIDMapper();
                //idMapper.
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        javax.swing.JPanel namePanel = new javax.swing.JPanel();
        javax.swing.JLabel nameLabel = new javax.swing.JLabel();
        nameComboBox = new javax.swing.JComboBox();
        pgdbPanel = new javax.swing.JPanel();
        javax.swing.JLabel pgdbLabel = new javax.swing.JLabel();
        pgdbTextField = new javax.swing.JTextField();
        javax.swing.JButton pgdbButton = new javax.swing.JButton();
        javax.swing.JPanel okPanel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("RDB ID Mapping Client Configuration");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        namePanel.setLayout(new java.awt.GridBagLayout());

        nameLabel.setText("Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        namePanel.add(nameLabel, gridBagConstraints);

        nameComboBox.setModel(new DefaultComboBoxModel(DBType.values()));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        namePanel.add(nameComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        getContentPane().add(namePanel, gridBagConstraints);

        pgdbPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Please select a PGDB file"));
        pgdbPanel.setLayout(new java.awt.GridBagLayout());

        pgdbLabel.setText("PGDB file:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pgdbPanel.add(pgdbLabel, gridBagConstraints);

        pgdbTextField.setPreferredSize(new java.awt.Dimension(250, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pgdbPanel.add(pgdbTextField, gridBagConstraints);

        pgdbButton.setText("Select");
        pgdbButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pgdbButtonActionPerformed(evt);
            }
        });
        pgdbPanel.add(pgdbButton, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(pgdbPanel, gridBagConstraints);

        okPanel.setLayout(new javax.swing.BoxLayout(okPanel, javax.swing.BoxLayout.LINE_AXIS));

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        okPanel.add(cancelButton);

        okButton.setText("   OK   ");
        okButton.setToolTipText("");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        okPanel.add(okButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(okPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pgdbButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pgdbButtonActionPerformed
        File source = FileUtil.getFile("Select a pgdb file", FileUtil.LOAD,
                new CyFileFilter[] { new CyFileFilter("pgdb") });
        if (source==null) {
            return;
        }

        pgdbTextField.setText(source.getPath());
}//GEN-LAST:event_pgdbButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
}//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        if (verifyInput()) {
            if (client!=null) { // config
            }
            cancelled = false;
            setVisible(false);
        }
}//GEN-LAST:event_okButtonActionPerformed

    public RDBIDMappingClient getIDMappingClient() {
        if (client!=null) {
            return client;
        }
        
        PGDBIDMappingClient cl = null;
        DBType type = (DBType) nameComboBox.getSelectedItem();
        if (type==DBType.PGDB) {
            String dbname = pgdbTextField.getText();
            try{
                cl = new PGDBIDMappingClient(dbname);
            } catch (IDMapperException ex) {
                ex.printStackTrace();
            }

            return cl;
        }

        return null;
        
    }
    
    private boolean verifyInput() {
        DBType type = (DBType) nameComboBox.getSelectedItem();
        if (type==DBType.PGDB) {
            String strURL = pgdbTextField.getText();
            if (strURL==null || strURL.length()==0) {
                JOptionPane.showMessageDialog(this, "Error: Please specify the URL of the input file");
                return false;
            }

            File file = new File(strURL);
            if (!file.exists()) {
                JOptionPane.showMessageDialog(this, "Error: the input file does not exist");
                return false;
            }
        }

        return true;
    }

    public boolean isCancelled() {
        return cancelled;
    }

    private boolean cancelled = true;
    private RDBIDMappingClient client;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox nameComboBox;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel pgdbPanel;
    private javax.swing.JTextField pgdbTextField;
    // End of variables declaration//GEN-END:variables

}
