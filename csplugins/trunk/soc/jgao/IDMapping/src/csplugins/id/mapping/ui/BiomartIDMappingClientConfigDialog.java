/*
 Copyright (c) 2006, 2007, The Cytoscape Consortium (www.cytoscape.org)

 The Cytoscape Consortium is:
 - Institute for Systems Biology
 - University of California San Diego
 - Memorial Sloan-Kettering Cancer Center
 - Institut Pasteur
 - Agilent Technologies

 This library is free software; you can redistribute it and/or modify it
 under the terms of the GNU Lesser General Public License as published
 by the Free Software Foundation; either version 2.1 of the License, or
 any later version.

 This library is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF
 MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and
 documentation provided hereunder is on an "as is" basis, and the
 Institute for Systems Biology and the Whitehead Institute
 have no obligations to provide maintenance, support,
 updates, enhancements or modifications.  In no event shall the
 Institute for Systems Biology and the Whitehead Institute
 be liable to any party for direct, indirect, special,
 incidental or consequential damages, including lost profits, arising
 out of the use of this software and its documentation, even if the
 Institute for Systems Biology and the Whitehead Institute
 have been advised of the possibility of such damage.  See
 the GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with this library; if not, write to the Free Software Foundation,
 Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 */

package csplugins.id.mapping.ui;

import csplugins.id.mapping.BiomartIDMappingClient;

import org.bridgedb.IDMapperException;
import org.bridgedb.webservice.IDMapperBiomart;
import org.bridgedb.webservice.biomart.Database;
import org.bridgedb.webservice.biomart.Dataset;
import org.bridgedb.webservice.biomart.BiomartStub;

import java.util.Vector;
import java.util.Map;
import java.util.Collections;
import java.util.Comparator;
import java.io.IOException;

import javax.swing.JOptionPane;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author gjj
 */
public class BiomartIDMappingClientConfigDialog extends javax.swing.JDialog {

    // add a new client
    public BiomartIDMappingClientConfigDialog(javax.swing.JDialog parent, boolean modal) {
        this(parent, modal, null);
    }

    // configure a existing client
    public  BiomartIDMappingClientConfigDialog(javax.swing.JDialog parent,
            boolean modal, BiomartIDMappingClient client) {
        super(parent, modal);
        this.client = client;
        if (client!=null) {
            idMapper = (IDMapperBiomart) client.getIDMapper();
        }

        if (!connectBiomart()) {
            JOptionPane.showMessageDialog(this, "Failed to connect to BioMart.");
        }
        
        initComponents();


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        javax.swing.JPanel chooseDBPanel = new javax.swing.JPanel();
        chooseDBComboBox = new javax.swing.JComboBox();
        javax.swing.JPanel chooseDatasetPanel = new javax.swing.JPanel();
        chooseDatasetComboBox = new javax.swing.JComboBox();
        javax.swing.JPanel opPanel = new javax.swing.JPanel();
        optionCheckBox = new javax.swing.JCheckBox();
        advancedPanel = new javax.swing.JPanel();
        transitivityCheckBox = new javax.swing.JCheckBox();
        filterTgtCheckBox = new javax.swing.JCheckBox();
        javax.swing.JPanel baseUrlPanel = new javax.swing.JPanel();
        baseUrlTextField = new javax.swing.JTextField();
        javax.swing.JButton baseUrlButton = new javax.swing.JButton();
        javax.swing.JPanel okPanel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add/Configure a BioMart ID Mapping Source");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        chooseDBPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose a database"));
        chooseDBPanel.setMinimumSize(new java.awt.Dimension(400, 48));
        chooseDBPanel.setPreferredSize(new java.awt.Dimension(400, 50));
        chooseDBPanel.setLayout(new javax.swing.BoxLayout(chooseDBPanel, javax.swing.BoxLayout.LINE_AXIS));

        chooseDBComboBox.setModel(new DefaultComboBoxModel(getVisibleDatabase()));
        if (idMapper!=null) {
            String dsname = idMapper.getDataset();
            Dataset ds = biomartStub.getDataset(dsname);
            if (ds!=null) {
                Database db = ds.getDatabase();
                chooseDBComboBox.setSelectedItem(db);
            }
        }
        chooseDBComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseDBComboBoxActionPerformed(evt);
            }
        });
        chooseDBPanel.add(chooseDBComboBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(chooseDBPanel, gridBagConstraints);

        chooseDatasetPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose a dataset"));
        chooseDatasetPanel.setLayout(new javax.swing.BoxLayout(chooseDatasetPanel, javax.swing.BoxLayout.LINE_AXIS));

        setDatasetsCombo();
        if (idMapper!=null) {
            String dsname = idMapper.getDataset();
            Dataset ds = biomartStub.getDataset(dsname);
            if (ds!=null) {
                chooseDatasetComboBox.setSelectedItem(ds);
            }
        }
        chooseDatasetPanel.add(chooseDatasetComboBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(chooseDatasetPanel, gridBagConstraints);

        opPanel.setLayout(new java.awt.GridBagLayout());

        optionCheckBox.setText("Show advanced option");
        optionCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        opPanel.add(optionCheckBox, gridBagConstraints);

        advancedPanel.setLayout(new java.awt.GridBagLayout());
        advancedPanel.setVisible(optionCheckBox.isSelected());

        transitivityCheckBox.setSelected(idMapper!=null && idMapper.getTransitivity());
        transitivityCheckBox.setText("Support transitivity of ID mappings");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advancedPanel.add(transitivityCheckBox, gridBagConstraints);

        filterTgtCheckBox.setSelected(idMapper==null || idMapper.getIDOnlyForTgtDataSource());
        filterTgtCheckBox.setText("Filter supported target source ID with IDs or accessions only");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advancedPanel.add(filterTgtCheckBox, gridBagConstraints);

        baseUrlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Base URL of BioMart"));
        baseUrlPanel.setLayout(new java.awt.GridBagLayout());

        baseUrlTextField.setText(idMapper==null?biomartStub.defaultBaseURL:idMapper.getBaseURL());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        baseUrlPanel.add(baseUrlTextField, gridBagConstraints);

        baseUrlButton.setText("Change");
        baseUrlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baseUrlButtonActionPerformed(evt);
            }
        });
        baseUrlPanel.add(baseUrlButton, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        advancedPanel.add(baseUrlPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        opPanel.add(advancedPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(opPanel, gridBagConstraints);

        okPanel.setLayout(new javax.swing.BoxLayout(okPanel, javax.swing.BoxLayout.LINE_AXIS));

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        okPanel.add(cancelButton);

        okButton.setText("   OK   ");
        okButton.setToolTipText("");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        okPanel.add(okButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(okPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void optionCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionCheckBoxActionPerformed
        advancedPanel.setVisible(optionCheckBox.isSelected());
        this.pack();
}//GEN-LAST:event_optionCheckBoxActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
        this.dispose();
}//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        if (verifyInput()) {
            if (idMapper!=null) { // config
                String baseUrl = baseUrlTextField.getText();
                if (idMapper.getBaseURL().compareTo(baseUrl)!=0) {
                    try {
                        idMapper.setBaseURL(baseUrl);
                    } catch(Exception e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Configure failed.");
                        return;
                    }
                }

                Dataset ds = (Dataset) chooseDatasetComboBox.getSelectedItem();
                if (ds!=null)
                    idMapper.setDataset(ds.getName());

                idMapper.setTransitivity(transitivityCheckBox.isSelected());
                idMapper.setIDOnlyForTgtDataSource(filterTgtCheckBox.isSelected());
            }
            cancelled = false;
            setVisible(false);
            this.dispose();
        }
}//GEN-LAST:event_okButtonActionPerformed

    private void chooseDBComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseDBComboBoxActionPerformed
        this.setDatasetsCombo();
    }//GEN-LAST:event_chooseDBComboBoxActionPerformed

    private void baseUrlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baseUrlButtonActionPerformed
        String baseUrl = baseUrlTextField.getText();
        if (baseUrl==null || baseUrl.length()==0) {
            int ret = JOptionPane.showConfirmDialog(this,
                    "Error: the Biomart URL is empty. \n" +
                    "Use default: "+BiomartStub.defaultBaseURL+"?",
                    "Empty URL", JOptionPane.YES_NO_OPTION);
            if (ret==JOptionPane.YES_OPTION) {
                baseUrlTextField.setText(BiomartStub.defaultBaseURL);
                baseUrl = BiomartStub.defaultBaseURL;
            } else {
                return;
            }
        }

        try {
            biomartStub = BiomartStub.getInstance(baseUrl);
        } catch (Exception e) {
            int ret = JOptionPane.showConfirmDialog(this,
                    "Error: failed to connect to the Biomart. \n" +
                    "Use default: "+BiomartStub.defaultBaseURL+"?",
                    "Failed", JOptionPane.YES_NO_OPTION);
            if (ret==JOptionPane.YES_OPTION) {
                baseUrlTextField.setText(BiomartStub.defaultBaseURL);
                baseUrl = BiomartStub.defaultBaseURL;
                try {
                    biomartStub = BiomartStub.getInstance(baseUrl);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error: failed to connect to the Biomart. \n" +
                            "Please try later.");
                    return;
                }

            } else {
                return;
            }
        }

        chooseDBComboBox.setModel(new DefaultComboBoxModel(getVisibleDatabase()));
        setDatasetsCombo();
    }//GEN-LAST:event_baseUrlButtonActionPerformed

    private boolean verifyInput() {
        if (biomartStub==null) {
            JOptionPane.showMessageDialog(this, "Error: failed to connect to a Biomart.");
        }

        return true;
    }
    
    private Vector<Database> getVisibleDatabase() {
        if (biomartStub==null) {
            return new Vector();
        }

        Map<String, Database> reg = null;
        try {
            reg = biomartStub.getRegistry();
        } catch (Exception e) {
            e.printStackTrace();
            return new Vector();
        }

        if (reg==null) {
            return new Vector();
        }
        
        Vector<Database> dbs = new Vector(reg.size());
        for (Database db : reg.values()) {
            if (db.visible()) {
                dbs.add(db);
            }
        }

        Collections.sort(dbs, new Comparator<Database>() {
            public int compare(Database db1, Database db2) {
                return db1.toString().compareTo(db2.toString());
            }
        });

        return dbs;
    }

    private void setDatasetsCombo() {
        Database db = (Database) chooseDBComboBox.getSelectedItem();
        Vector<Dataset> datasets = new Vector();
        try {
            datasets = biomartStub.getAvailableDatasets(db.getName());
        } catch(Exception e) {
            e.printStackTrace();
        }

        Collections.sort(datasets, new Comparator<Dataset>() {
            public int compare(Dataset db1, Dataset db2) {
                return db1.toString().compareTo(db2.toString());
            }
        });

        chooseDatasetComboBox.setModel(new DefaultComboBoxModel(datasets));
    }

    private boolean connectBiomart() {
        try {
            if (idMapper==null) {
                biomartStub = BiomartStub.getInstance();
            } else {
                biomartStub = BiomartStub.getInstance(idMapper.getBaseURL());
            }
        } catch(IOException e) {
            e.printStackTrace();
            return false;
        }

        return true;
    }

    public BiomartIDMappingClient getIDMappingClient() throws IDMapperException {
        if (client!=null) {
            return client; // configure
        }

        Dataset ds = (Dataset) chooseDatasetComboBox.getSelectedItem();
        String dsname = ds.getName();
        String baseurl = baseUrlTextField.getText();

        boolean transitivity = transitivityCheckBox.isSelected();
        boolean filterTgt = filterTgtCheckBox.isSelected();

        return new BiomartIDMappingClient(dsname, baseurl, filterTgt, transitivity);
    }

    public boolean isCancelled() {
        return cancelled;
    }

    private BiomartStub biomartStub;
    private BiomartIDMappingClient client = null;
    private IDMapperBiomart idMapper = null;
    private boolean cancelled = true;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel advancedPanel;
    private javax.swing.JTextField baseUrlTextField;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox chooseDBComboBox;
    private javax.swing.JComboBox chooseDatasetComboBox;
    private javax.swing.JCheckBox filterTgtCheckBox;
    private javax.swing.JButton okButton;
    private javax.swing.JCheckBox optionCheckBox;
    private javax.swing.JCheckBox transitivityCheckBox;
    // End of variables declaration//GEN-END:variables

}
