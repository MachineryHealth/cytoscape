/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * IDMapperTextPanel.java
 *
 * Created on Jul 22, 2008, 11:49:09 AM
 */

package csplugins.id.mapping.ui;

import csplugins.id.mapping.IDMapper;
import csplugins.id.mapping.IDMapperFile;
import csplugins.id.mapping.IDMapperText;
import csplugins.id.mapping.IDMapperExcel;

import cytoscape.util.FileUtil;

import java.util.Set;
import java.util.Map;
import java.util.Iterator;

import java.awt.Frame;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.JComboBox;
import javax.swing.JTable;

import java.io.IOException;
import java.io.File;

import java.net.URL;
import java.net.MalformedURLException;

import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;

/**
 *
 * @author gjj
 */
public class IDMapperFilePanel extends javax.swing.JPanel {

    private static final String EXCEL_EXT = ".xls";

    /** Creates new form IDMapperTextPanel */
    public IDMapperFilePanel(final Frame frame,
                             final Map<String,Set<String>> selectedNetworkAttribute) {
        this.frame = frame;
        this.selectedNetworkAttribute = selectedNetworkAttribute;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {
                java.awt.GridBagConstraints gridBagConstraints;

                buttonGroup1 = new javax.swing.ButtonGroup();
                javax.swing.JPanel textFilePanel = new javax.swing.JPanel();
                javax.swing.JPanel sourcePanel = new javax.swing.JPanel();
                javax.swing.JLabel typeLabel = new javax.swing.JLabel();
                localRadioButton = new javax.swing.JRadioButton();
                remoteRadioButton = new javax.swing.JRadioButton();
                javax.swing.JPanel selectPanel = new javax.swing.JPanel();
                textFileTextField = new javax.swing.JTextField();
                textFileButton = new javax.swing.JButton();
                idTypePanel = new javax.swing.JPanel();
                idTypeScrollPane = new javax.swing.JScrollPane();
                goButton = new javax.swing.JButton();
                javax.swing.JPanel toPanel = new javax.swing.JPanel();
                fromLabel = new javax.swing.JLabel();
                fromComboBox = new javax.swing.JComboBox();

                setMinimumSize(new java.awt.Dimension(400, 200));
                setPreferredSize(new java.awt.Dimension(600, 300));
                setLayout(new java.awt.GridBagLayout());

                textFilePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Data source"));
                textFilePanel.setLayout(new java.awt.GridBagLayout());

                sourcePanel.setLayout(new javax.swing.BoxLayout(sourcePanel, javax.swing.BoxLayout.LINE_AXIS));

                typeLabel.setText("File type:   ");
                sourcePanel.add(typeLabel);

                buttonGroup1.add(localRadioButton);
                localRadioButton.setSelected(true);
                localRadioButton.setText("Local   ");
                localRadioButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                localRadioButtonActionPerformed(evt);
                        }
                });
                sourcePanel.add(localRadioButton);

                buttonGroup1.add(remoteRadioButton);
                remoteRadioButton.setText("Remote/URL");
                remoteRadioButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                remoteRadioButtonActionPerformed(evt);
                        }
                });
                sourcePanel.add(remoteRadioButton);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
                textFilePanel.add(sourcePanel, gridBagConstraints);

                selectPanel.setLayout(new javax.swing.BoxLayout(selectPanel, javax.swing.BoxLayout.LINE_AXIS));

                textFileTextField.setPreferredSize(new java.awt.Dimension(250, 20));
                textFileTextField.addKeyListener(new java.awt.event.KeyAdapter() {
                        public void keyTyped(java.awt.event.KeyEvent evt) {
                                textFileTextFieldKeyTyped(evt);
                        }
                });
                selectPanel.add(textFileTextField);

                textFileButton.setText("Select file");
                textFileButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                textFileButtonActionPerformed(evt);
                        }
                });
                selectPanel.add(textFileButton);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
                textFilePanel.add(selectPanel, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                add(textFilePanel, gridBagConstraints);

                idTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Select ID type(s) for each attribute"));
                idTypePanel.setLayout(new javax.swing.BoxLayout(idTypePanel, javax.swing.BoxLayout.LINE_AXIS));

                idTypeScrollPane.setMinimumSize(new java.awt.Dimension(450, 200));
                idTypeScrollPane.setPreferredSize(new java.awt.Dimension(450, 200));

                idTypeSelectionTable = new IDTypeSelectionTable(frame,selectedNetworkAttribute);
                //idTypeSelectionTable.setMinimumSize(new java.awt.Dimension(400, 100));
                //idTypeSelectionTable.setPreferredSize(new java.awt.Dimension(450, 200));
                idTypeScrollPane.setViewportView(idTypeSelectionTable);

                idTypePanel.add(idTypeScrollPane);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                add(idTypePanel, gridBagConstraints);

                goButton.setText("Get ID mappings");
                goButton.setEnabled(false);
                goButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                goButtonActionPerformed(evt);
                        }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                add(goButton, gridBagConstraints);

                toPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 5));

                fromLabel.setText("Destination ID Type:");
                toPanel.add(fromLabel);

                fromComboBox.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                fromComboBoxActionPerformed(evt);
                        }
                });
                toPanel.add(fromComboBox);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                add(toPanel, gridBagConstraints);
        }// </editor-fold>//GEN-END:initComponents

    private void localRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localRadioButtonActionPerformed
            textFileButton.setVisible(true);
            textFileTextField.setText("");
    }//GEN-LAST:event_localRadioButtonActionPerformed

    private void remoteRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remoteRadioButtonActionPerformed
            textFileButton.setVisible(false);
            textFileTextField.setText("");
    }//GEN-LAST:event_remoteRadioButtonActionPerformed

    private void textFileTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFileTextFieldKeyTyped
            //updateGoButtonEnable();
    }//GEN-LAST:event_textFileTextFieldKeyTyped

    private void textFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFileButtonActionPerformed
            File source = FileUtil.getFile("Select a ID mapping file", FileUtil.LOAD);
            if (source!=null) {
                    try {
                            URL url = source.toURI().toURL();
                            String strURL = url.toString();
                            textFileTextField.setText(strURL);

                            // TODO: MOVE THIS TO TEXTFIELD CHANGED
                            if (strURL.endsWith(EXCEL_EXT)) {
                                    POIFSFileSystem excelIn = new POIFSFileSystem(url.openStream());
                                    HSSFWorkbook wb = new HSSFWorkbook(excelIn);
                                    idMapper = new IDMapperExcel(wb.getSheetAt(0)); //TODO MULTIPLE SHEETS                                    
                            } else {
                                    idMapper = new IDMapperText(url);
                            }
                            idMapper.readIDMapping(); // TODO: use task
                    } catch(IOException e) {
                            e.printStackTrace();
                    }
            }

            updateGoButtonEnable();
    }//GEN-LAST:event_textFileButtonActionPerformed

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
            //idMapping = new TreeMap<String,Map<String,Vector<CyIDMapping>>>();
            //updateOKButtonEnable();
    }//GEN-LAST:event_goButtonActionPerformed

    private void fromComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromComboBoxActionPerformed
            //TODO add your handling code here:
}//GEN-LAST:event_fromComboBoxActionPerformed

        private void updateGoButtonEnable() {
                if (textFileTextField.getText().length()==0) {
                    goButton.setToolTipText("Please specify the URL of the input file");
                    goButton.setEnabled(false);
                    return;
                }

                Iterator<String> itNet = selectedNetworkAttributeIDType.keySet().iterator();
                while (itNet.hasNext()) {
                    String network = itNet.next();
                    Map<String,Set<String>> mapAttrIDType = selectedNetworkAttributeIDType.get(network);
                    Iterator<Set<String>> itTypes = mapAttrIDType.values().iterator();
                    while (itTypes.hasNext()) {
                        if (itTypes.next().isEmpty()) {
                                goButton.setToolTipText("Select at least one ID type for each attribute");
                                goButton.setEnabled(false);
                                return;
                        }
                    }
                }


            goButton.setToolTipText(null);
            goButton.setEnabled(true);
        }


        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.ButtonGroup buttonGroup1;
        private javax.swing.JComboBox fromComboBox;
        private javax.swing.JLabel fromLabel;
        private javax.swing.JButton goButton;
        private javax.swing.JPanel idTypePanel;
        private IDTypeSelectionTable idTypeSelectionTable;
        private javax.swing.JScrollPane idTypeScrollPane;
        private javax.swing.JRadioButton localRadioButton;
        private javax.swing.JRadioButton remoteRadioButton;
        private javax.swing.JButton textFileButton;
        private javax.swing.JTextField textFileTextField;
        // End of variables declaration//GEN-END:variables

        private Map<String,Set<String>> selectedNetworkAttribute;
        private Map<String,Map<String,Set<String>>> selectedNetworkAttributeIDType;
        private IDMapperFile idMapper;
        private Frame frame;
}


