/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * IDMappingPreviewDialog.java
 *
 * Created on Jul 30, 2008, 1:52:59 PM
 */

package csplugins.id.mapping.ui;

import csplugins.id.mapping.model.AttributeBasedIDMappingModel;

import java.util.Vector;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;

import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author gjj
 */
public class IDMappingPreviewDialog extends javax.swing.JDialog {
    private final AttributeBasedIDMappingModel idMapping;
    

    /** Creates new form IDMappingPreviewDialog */
    public IDMappingPreviewDialog(java.awt.Frame parent, boolean modal, AttributeBasedIDMappingModel idMapping) {
        super(parent, modal);
        this.idMapping = idMapping;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {
                java.awt.GridBagConstraints gridBagConstraints;

                javax.swing.JPanel prevewTablePanel = new javax.swing.JPanel();
                javax.swing.JScrollPane previewScrollPane = new javax.swing.JScrollPane();
                previewTable = new javax.swing.JTable();
                javax.swing.JPanel OKPanel = new javax.swing.JPanel();
                OKButton = new javax.swing.JButton();
                javax.swing.JPanel opPanel = new javax.swing.JPanel();
                clearButton = new javax.swing.JButton();

                setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
                setTitle("ID mapping preview");
                getContentPane().setLayout(new java.awt.GridBagLayout());

                prevewTablePanel.setLayout(new javax.swing.BoxLayout(prevewTablePanel, javax.swing.BoxLayout.LINE_AXIS));

                tableModel = new PreviewTableModel();
                previewTable.setModel(tableModel);
                previewScrollPane.setViewportView(previewTable);

                prevewTablePanel.add(previewScrollPane);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                getContentPane().add(prevewTablePanel, gridBagConstraints);

                OKButton.setText("    OK    ");
                OKButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                OKButtonActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout OKPanelLayout = new javax.swing.GroupLayout(OKPanel);
                OKPanel.setLayout(OKPanelLayout);
                OKPanelLayout.setHorizontalGroup(
                        OKPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(OKPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(OKButton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );
                OKPanelLayout.setVerticalGroup(
                        OKPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(OKButton)
                );

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                getContentPane().add(OKPanel, gridBagConstraints);

                clearButton.setText("Clear all");
                clearButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                clearButtonActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout opPanelLayout = new javax.swing.GroupLayout(opPanel);
                opPanel.setLayout(opPanelLayout);
                opPanelLayout.setHorizontalGroup(
                        opPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(opPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(clearButton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );
                opPanelLayout.setVerticalGroup(
                        opPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(opPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(clearButton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                getContentPane().add(opPanel, gridBagConstraints);

                pack();
        }// </editor-fold>//GEN-END:initComponents

    private void OKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButtonActionPerformed
            this.setVisible(false);
}//GEN-LAST:event_OKButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
            final int ioption = JOptionPane.showConfirmDialog(getParent(),
                                        "Are you sure to delete all the ID mapping data?",
                                        "Warning: ALL ID mapping would be removed",
                                        JOptionPane.YES_NO_OPTION );
            if (ioption==JOptionPane.YES_OPTION) {
                    idMapping.clear();
                    tableModel.resetData();
            }
    }//GEN-LAST:event_clearButtonActionPerformed


        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton OKButton;
        private javax.swing.JButton clearButton;
        private javax.swing.JTable previewTable;
        private PreviewTableModel tableModel;
        // End of variables declaration//GEN-END:variables

        private class PreviewTableModel extends AbstractTableModel {
                Vector<String> columnNames;
                Vector<String[]> data;

                public PreviewTableModel() {
                        resetData();
                }

                public void resetData() {
                    Map<String,Set<String>> mapGOAttrs = idMapping.getMapGOAttrs();

                    Set<String> idTypes = new TreeSet<String>(idMapping.getIDTypes());
                    columnNames = new Vector<String>();
                    columnNames.add("Node/Edge");
                    columnNames.add("Attribute");
                    columnNames.addAll(idTypes);
                    int nColumns = columnNames.size();

                    data = new Vector();

                    Iterator<Map.Entry<String,Set<String>>> itEntryGOAttrs = mapGOAttrs.entrySet().iterator();
                    while (itEntryGOAttrs.hasNext()) {
                            Map.Entry<String,Set<String>> entryGOAttrs = itEntryGOAttrs.next();
                            String node = entryGOAttrs.getKey();
                            Set<String> attrs = entryGOAttrs.getValue();

                            Iterator<String> itAttr = attrs.iterator();
                            while (itAttr.hasNext()) {
                                    String attr = itAttr.next();

                                    String[] strvec = new String[nColumns];
                                    data.add(strvec);

                                    strvec[0] = node;
                                    strvec[1] = attr;

                                    for (int i=2; i<nColumns; i++) {
                                            strvec[i] = idMapping.getTgtIDs(node, attr, columnNames.get(i)).toString();
                                    }
                            }
                      }

                    this.fireTableDataChanged();
                }


                @Override
                public int getColumnCount() {
                    return columnNames.size();
                }

                @Override
                public int getRowCount() {
                    return data.size();
                }

                @Override
                public String getColumnName(int col) {
                    return columnNames.get(col);
                }

                @Override
                public String getValueAt(int row, int col) {
                    return data.get(row)[col];
                }

                @Override
                public Class getColumnClass(int c) {
                    return String.class;
                }

                @Override
                public boolean isCellEditable(int row, int col) {
                    return false;
                }

        }
}
