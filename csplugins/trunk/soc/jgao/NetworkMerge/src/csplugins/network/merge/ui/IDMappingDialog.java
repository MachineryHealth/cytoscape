/* File: IDMappingDialog.java

 Copyright (c) 2006, 2007, The Cytoscape Consortium (www.cytoscape.org)

 The Cytoscape Consortium is:
 - Institute for Systems Biology
 - University of California San Diego
 - Memorial Sloan-Kettering Cancer Center
 - Institut Pasteur
 - Agilent Technologies

 This library is free software; you can redistribute it and/or modify it
 under the terms of the GNU Lesser General Public License as published
 by the Free Software Foundation; either version 2.1 of the License, or
 any later version.

 This library is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF
 MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and
 documentation provided hereunder is on an "as is" basis, and the
 Institute for Systems Biology and the Whitehead Institute
 have no obligations to provide maintenance, support,
 updates, enhancements or modifications.  In no event shall the
 Institute for Systems Biology and the Whitehead Institute
 be liable to any party for direct, indirect, special,
 incidental or consequential damages, including lost profits, arising
 out of the use of this software and its documentation, even if the
 Institute for Systems Biology and the Whitehead Institute
 have been advised of the possibility of such damage.  See
 the GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with this library; if not, write to the Free Software Foundation,
 Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 */

package csplugins.network.merge.ui;

import csplugins.network.merge.ui.*;
import csplugins.network.merge.model.MatchingAttribute;

import java.util.Vector;
import java.util.Hashtable;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Iterator;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.DefaultListModel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.DefaultCellEditor;
import java.awt.Frame;

//import csplugins.network.merge.util.SortedListModel;
import csplugins.network.merge.util.JTableX;
import csplugins.network.merge.util.JTableX.RowEditorModel;

import csplugins.network.merge.ui.IDTypeSelectionDialog;
import csplugins.id.mapping.CyIDMapping;

/**
 * 
 * 
 * 
 */
public class IDMappingDialog extends javax.swing.JDialog {

    /** Creates new form NetworkMergeDialog */
    public IDMappingDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        frame = parent;
        initComponents();

    }
    
    public IDMappingDialog(java.awt.Frame parent, boolean modal, MatchingAttribute matchingAttribute) {
        super(parent, modal);
        this.matchingAttribute = matchingAttribute; 
        //TODO: generate the default id type for each attribute
        selectedNetworkIDType = new TreeMap<String,Set<String>>();
        Iterator<String> it = matchingAttribute.getNetworkSet().iterator();
        while (it.hasNext()) {
            String network = it.next();
            selectedNetworkIDType.put(network, new TreeSet<String>());
        }
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {
                java.awt.GridBagConstraints gridBagConstraints;

                buttonGroup1 = new javax.swing.ButtonGroup();
                javax.swing.JPanel fromPanel = new javax.swing.JPanel();
                javax.swing.JLabel fromLabel = new javax.swing.JLabel();
                fromComboBox = new javax.swing.JComboBox();
                javax.swing.JPanel toPanel = new javax.swing.JPanel();
                javax.swing.JLabel fromLabel1 = new javax.swing.JLabel();
                fromComboBox1 = new javax.swing.JComboBox();
                javax.swing.JSeparator jSeparator1 = new javax.swing.JSeparator();
                textFilePanel = new javax.swing.JPanel();
                javax.swing.JPanel sourcePanel = new javax.swing.JPanel();
                localRadioButton = new javax.swing.JRadioButton();
                remoteRadioButton = new javax.swing.JRadioButton();
                javax.swing.JPanel selectPanel = new javax.swing.JPanel();
                textFileTextField = new javax.swing.JTextField();
                textFileButton = new javax.swing.JButton();
                webservicePanel = new javax.swing.JPanel();
                javax.swing.JLabel webserviceLabel = new javax.swing.JLabel();
                webserviceComboBox = new javax.swing.JComboBox();
                idTypePanel = new javax.swing.JPanel();
                idTypeScrollPane = new javax.swing.JScrollPane();
                idTypeTable = new javax.swing.JTable();
                javax.swing.JPanel goPanel = new javax.swing.JPanel();
                goButton = new javax.swing.JButton();
                javax.swing.JSeparator jSeparator2 = new javax.swing.JSeparator();
                javax.swing.JPanel previewPanel = new javax.swing.JPanel();
                jTabbedPane1 = new javax.swing.JTabbedPane();
                jPanel1 = new javax.swing.JPanel();
                jPanel2 = new javax.swing.JPanel();
                jPanel3 = new javax.swing.JPanel();
                jSeparator3 = new javax.swing.JSeparator();
                javax.swing.JPanel okPanel = new javax.swing.JPanel();
                cancelButton = new javax.swing.JButton();
                okButton = new javax.swing.JButton();
                optionPanel = new javax.swing.JPanel();
                optionButton = new javax.swing.JButton();

                setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
                setTitle("Import ID mappings");
                setMinimumSize(new java.awt.Dimension(400, 300));
                setName("MergeDialog"); // NOI18N
                getContentPane().setLayout(new java.awt.GridBagLayout());

                fromPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 5));

                fromLabel.setText("Mapping Data Source:");
                fromPanel.add(fromLabel);

                fromComboBox.setModel(new javax.swing.DefaultComboBoxModel(idMappingSources));
                fromComboBox.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                fromComboBoxActionPerformed(evt);
                        }
                });
                fromPanel.add(fromComboBox);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                getContentPane().add(fromPanel, gridBagConstraints);

                toPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 5));

                fromLabel1.setText("Destination ID Type:");
                toPanel.add(fromLabel1);

                fromComboBox1.setModel(new javax.swing.DefaultComboBoxModel(idMappingSources));
                fromComboBox1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                fromComboBox1ActionPerformed(evt);
                        }
                });
                toPanel.add(fromComboBox1);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                getContentPane().add(toPanel, gridBagConstraints);
                toPanel.setVisible(false); //TODO fix this
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                getContentPane().add(jSeparator1, gridBagConstraints);

                textFilePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Get Identifier Mapping from a text file"));
                textFilePanel.setLayout(new java.awt.GridBagLayout());

                sourcePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Source Type"));
                sourcePanel.setLayout(new javax.swing.BoxLayout(sourcePanel, javax.swing.BoxLayout.LINE_AXIS));

                buttonGroup1.add(localRadioButton);
                localRadioButton.setSelected(true);
                localRadioButton.setText("Local   ");
                localRadioButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                localRadioButtonActionPerformed(evt);
                        }
                });
                sourcePanel.add(localRadioButton);

                buttonGroup1.add(remoteRadioButton);
                remoteRadioButton.setText("Remote/URL");
                remoteRadioButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                remoteRadioButtonActionPerformed(evt);
                        }
                });
                sourcePanel.add(remoteRadioButton);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
                textFilePanel.add(sourcePanel, gridBagConstraints);

                selectPanel.setLayout(new javax.swing.BoxLayout(selectPanel, javax.swing.BoxLayout.LINE_AXIS));

                textFileTextField.setPreferredSize(new java.awt.Dimension(250, 20));
                textFileTextField.addKeyListener(new java.awt.event.KeyAdapter() {
                        public void keyTyped(java.awt.event.KeyEvent evt) {
                                textFileTextFieldKeyTyped(evt);
                        }
                });
                selectPanel.add(textFileTextField);

                textFileButton.setText("Select file");
                textFileButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                textFileButtonActionPerformed(evt);
                        }
                });
                selectPanel.add(textFileButton);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
                textFilePanel.add(selectPanel, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                getContentPane().add(textFilePanel, gridBagConstraints);

                webservicePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Get ID mapping from a web service"));
                webservicePanel.setLayout(new javax.swing.BoxLayout(webservicePanel, javax.swing.BoxLayout.LINE_AXIS));

                webserviceLabel.setText("ID mapping data source:  ");
                webservicePanel.add(webserviceLabel);

                webserviceComboBox.setModel(new javax.swing.DefaultComboBoxModel(serviceSources));
                webserviceComboBox.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                webserviceComboBoxActionPerformed(evt);
                        }
                });
                webservicePanel.add(webserviceComboBox);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                getContentPane().add(webservicePanel, gridBagConstraints);
                webservicePanel.setVisible(false);

                idTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Please select an ID type for each selected attribute"));
                idTypePanel.setLayout(new javax.swing.BoxLayout(idTypePanel, javax.swing.BoxLayout.LINE_AXIS));

                idTypeScrollPane.setPreferredSize(new java.awt.Dimension(450, 100));

                idTypeTable.setModel(new javax.swing.table.DefaultTableModel(
                        new String [] {
                                "Network", "Attribute", "ID Type(s)"
                        },
                        matchingAttribute.size()
                ) {
                        Class[] types = new Class [] {
                                java.lang.String.class, java.lang.String.class, java.lang.String.class
                        };
                        boolean[] canEdit = new boolean [] {
                                false, false, false
                        };

                        public Class getColumnClass(int columnIndex) {
                                return types [columnIndex];
                        }

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit [columnIndex];
                        }

                        public Object getValueAt(int row, int col) {
                                String network = (String)matchingAttribute.getNetworkSet().toArray()[row];
                                if (0==col) { //network
                                        return network;
                                } else if (1==col) { // attribute
                                        return matchingAttribute.getAttributeForMatching(network);
                                } else { // id types
                                        String disp = new String("[");
                                        Iterator<String> it = matchingAttribute.getNetworkSet().iterator();
                                        while (it.hasNext()) {
                                                disp += " " + it.next() + ";";
                                        }
                                        disp += "]";
                                        return disp;
                                }
                        }
                });
                idTypeTable.addMouseListener(new MouseAdapter() {
                        public void mouseClicked(MouseEvent e) {
                                JTable source = (JTable)e.getSource();
                                int column = source.getSelectedColumn();
                                if (column==2) {
                                        int row = source.getSelectedRow();
                                        String network = (String)matchingAttribute.getNetworkSet().toArray()[row];
                                        IDTypeSelectionDialog dialog = new IDTypeSelectionDialog(frame,true,idTypes,selectedNetworkIDType.get(network));
                                        dialog.setLocationRelativeTo(source.getParent());
                                        dialog.setVisible(true);
                                        if (!dialog.isCancelled()) {
                                                selectedNetworkIDType.put(network, dialog.getSelectedIDTypes());
                                                updateGoButtonEnable();
                                        }
                                }
                        }
                });
                idTypeScrollPane.setViewportView(idTypeTable);

                idTypePanel.add(idTypeScrollPane);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                getContentPane().add(idTypePanel, gridBagConstraints);
                idTypePanel.setVisible(false);

                goPanel.setLayout(new javax.swing.BoxLayout(goPanel, javax.swing.BoxLayout.LINE_AXIS));

                goButton.setText("Get ID mappings");
                goButton.setEnabled(false);
                goButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                goButtonActionPerformed(evt);
                        }
                });
                goPanel.add(goButton);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                getContentPane().add(goPanel, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                getContentPane().add(jSeparator2, gridBagConstraints);

                previewPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Identifier mapping preview"));
                previewPanel.setPreferredSize(new java.awt.Dimension(600, 200));
                previewPanel.setLayout(new javax.swing.BoxLayout(previewPanel, javax.swing.BoxLayout.LINE_AXIS));

                jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));
                jTabbedPane1.addTab("Mapped", jPanel1);

                jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));
                jTabbedPane1.addTab("Not mapped", jPanel2);

                jPanel3.setLayout(new java.awt.BorderLayout());
                jTabbedPane1.addTab("Ambiguous", jPanel3);

                previewPanel.add(jTabbedPane1);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 0.5;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                getContentPane().add(previewPanel, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 8;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                getContentPane().add(jSeparator3, gridBagConstraints);
                jSeparator2.setVisible(false);

                okPanel.setLayout(new javax.swing.BoxLayout(okPanel, javax.swing.BoxLayout.LINE_AXIS));

                cancelButton.setText("Cancel");
                cancelButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                cancelButtonActionPerformed(evt);
                        }
                });
                okPanel.add(cancelButton);

                okButton.setText("   OK   ");
                okButton.setToolTipText("\"Select at least two networks to merge\"");
                okButton.setEnabled(false);
                okButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                okButtonActionPerformed(evt);
                        }
                });
                okPanel.add(okButton);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 9;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                getContentPane().add(okPanel, gridBagConstraints);

                optionPanel.setLayout(new javax.swing.BoxLayout(optionPanel, javax.swing.BoxLayout.LINE_AXIS));

                //optionDialog = new NetworkMergeOptionDialog(frame,true);
                //optionDialog.pack();
                optionButton.setText("Options");
                optionButton.setToolTipText("Click to set up options");
                optionButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                optionButtonActionPerformed(evt);
                        }
                });
                optionPanel.add(optionButton);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 9;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                getContentPane().add(optionPanel, gridBagConstraints);

                pack();
        }// </editor-fold>//GEN-END:initComponents

private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
    setVisible(false);
}//GEN-LAST:event_cancelButtonActionPerformed

private void fromComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromComboBoxActionPerformed
    switch(fromComboBox.getSelectedIndex()) {
        case 0:
            textFilePanel.setVisible(true);
            webservicePanel.setVisible(false);
            idTypePanel.setVisible(false);
            break;
        case 1:
            textFilePanel.setVisible(false);
            webservicePanel.setVisible(false);
            idTypePanel.setVisible(true);
            break;
        case 2:
            textFilePanel.setVisible(false);
            webservicePanel.setVisible(true);
            idTypePanel.setVisible(true);
            break;
    }
    updateOKButtonEnable();
    updateGoButtonEnable();
    pack();
}//GEN-LAST:event_fromComboBoxActionPerformed

private void webserviceComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_webserviceComboBoxActionPerformed
//TODO add your handling code here:
}//GEN-LAST:event_webserviceComboBoxActionPerformed

private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
    cancelled = false;
    setVisible(false);
}//GEN-LAST:event_okButtonActionPerformed

private void remoteRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remoteRadioButtonActionPerformed
    textFileButton.setVisible(false);
    textFileTextField.setText("");
}//GEN-LAST:event_remoteRadioButtonActionPerformed

private void localRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localRadioButtonActionPerformed
    textFileButton.setVisible(true);
    textFileTextField.setText("");
}//GEN-LAST:event_localRadioButtonActionPerformed

private void textFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFileButtonActionPerformed
    //TODO: use CyFileFilter
    javax.swing.JFileChooser fc = new javax.swing.JFileChooser(".");
    fc.setDialogTitle("Select a ID mapping file...");
    int returnVal = fc.showOpenDialog(this);
    if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
        java.io.File file = fc.getSelectedFile();
        String filePath = file.getParent() + java.io.File.separator + file.getName();
        textFileTextField.setText(filePath);
    }
/*    
            javax.jnlp.FileOpenService fos = null;
            javax.jnlp.FileContents fileContents = null;

            try {
                fos = (javax.jnlp.FileOpenService)javax.jnlp.ServiceManager.
                          lookup("javax.jnlp.FileOpenService"); 
            } catch (javax.jnlp.UnavailableServiceException exc) {
                exc.printStackTrace();
            }

            if (fos != null) {
                try {
                    fileContents = fos.openFileDialog(null, null); 
                } catch (Exception exc) {
                    exc.printStackTrace();
                }
            }

            if (fileContents != null) {
                try {
                   textFileTextField.setText(fileContents.getName());
                } catch (Exception exc) {
                    exc.printStackTrace();
                }
            }//*/
            
    updateGoButtonEnable();
}//GEN-LAST:event_textFileButtonActionPerformed

private void optionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionButtonActionPerformed
    //optionDialog.setLocationRelativeTo(this);
    //optionDialog.setVisible(true);    
}//GEN-LAST:event_optionButtonActionPerformed

private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
    idMapping = new TreeMap<String,Map<String,Vector<CyIDMapping>>>();
    updateOKButtonEnable();
}//GEN-LAST:event_goButtonActionPerformed

private void textFileTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFileTextFieldKeyTyped
    updateGoButtonEnable();
}//GEN-LAST:event_textFileTextFieldKeyTyped

private void fromComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromComboBox1ActionPerformed
//TODO add your handling code here:
}//GEN-LAST:event_fromComboBox1ActionPerformed

private void updateGoButtonEnable() {
    int iSelected = fromComboBox.getSelectedIndex();
    
    if (iSelected==0) { // text file
        if (textFileTextField.getText().length()==0) {
            goButton.setToolTipText("Please specify the URL of the input file");
            goButton.setEnabled(false);
            return;
        }
    } else {
        Iterator<String> it = selectedNetworkIDType.keySet().iterator();
        while (it.hasNext()) {
            String network = it.next();
            Set<String> types = selectedNetworkIDType.get(network);
            if (types.size()==0) {
                goButton.setToolTipText("Select at least one ID type for each attribute");
                goButton.setEnabled(false);
                return;
            }
        }
    }
    
    goButton.setToolTipText(null);
    goButton.setEnabled(true);    
}

private void updateOKButtonEnable() {
    // Enable if ID mapping has been imported and ambiguity has been decided
    
    if (idMapping==null) {
        okButton.setToolTipText("Please get ID mappings first");
        okButton.setEnabled(false);
        return;
    }
    
    okButton.setToolTipText(null);
    okButton.setEnabled(true);
}

/*private int[] getSelectedIDTypes() {
    Vector<Integer> type = new Vector<Integer>();
    int nIDTypes = idTypes.length;
    for (int iIDType=0; iIDType<nIDTypes; iIDType++) {
        if (idTypeCheckBoxes[iIDType].isSelected()) {
            type.add(iIDType);
        }
    }
    
    nIDTypes = type.size();
    int[] ret = new int[nIDTypes];
    for (int iIDType=0; iIDType<nIDTypes; iIDType++) {
        ret[iIDType] = type.get(iIDType);
    }
    
    return ret;
}*/

public boolean isCancelled() {
    return cancelled;
}
        
public Map<String,Map<String,Vector<CyIDMapping>>> getIDMapping() {
    return idMapping;
}
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                IDMappingDialog dialog = new IDMappingDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.ButtonGroup buttonGroup1;
        private javax.swing.JButton cancelButton;
        private javax.swing.JComboBox fromComboBox;
        private javax.swing.JComboBox fromComboBox1;
        private javax.swing.JButton goButton;
        private javax.swing.JPanel idTypePanel;
        private JTableX attributeTable;
        private java.util.Map<String,JComboBox> mapNetCombo;
        private javax.swing.JScrollPane idTypeScrollPane;
        private javax.swing.JTable idTypeTable;
        private javax.swing.JPanel jPanel1;
        private javax.swing.JPanel jPanel2;
        private javax.swing.JPanel jPanel3;
        private javax.swing.JSeparator jSeparator3;
        private javax.swing.JTabbedPane jTabbedPane1;
        private javax.swing.JRadioButton localRadioButton;
        private javax.swing.JButton okButton;
        private javax.swing.JButton optionButton;
        //private NetworkMergeOptionDialog optionDialog;
        private javax.swing.JPanel optionPanel;
        private javax.swing.JRadioButton remoteRadioButton;
        private javax.swing.JButton textFileButton;
        private javax.swing.JPanel textFilePanel;
        private javax.swing.JTextField textFileTextField;
        private javax.swing.JComboBox webserviceComboBox;
        private javax.swing.JPanel webservicePanel;
        // End of variables declaration//GEN-END:variables

    
    
    
    //java.util.List<String> selectedNetworkList;
    
    Frame frame;
    private boolean cancelled = true;
    MatchingAttribute matchingAttribute;
    Map<String,Set<String>> selectedNetworkIDType;
    private Map<String,Map<String,Vector<CyIDMapping>>> idMapping;

    private String[] idMappingSources = {"ID mappings from a text file", "ID mappings from a local database", "ID mapping from a online web service" };
    private String[] serviceSources = {"NCBI Entrez Utilities Web Service Client","UniProtJAPI","Ensembl web service"};
    private String[] idTypes = {"Entrez Gene ID","RefSeq Accession","UniProt ID","EMBL ID"};
    
    
    
}
