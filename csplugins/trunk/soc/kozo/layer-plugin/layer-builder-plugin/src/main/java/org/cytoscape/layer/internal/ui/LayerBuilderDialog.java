/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewJDialog.java
 *
 * Created on 2009/06/29, 9:36:01
 */

package org.cytoscape.layer.internal.ui;

import java.awt.Frame;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.swing.DefaultCellEditor;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JDialog;

import org.cytoscape.layer.MultiLayerNetworkBuilder;
import org.cytoscape.model.CyNetwork;
import org.cytoscape.session.CyNetworkManager;

/**
 * 
 * @author kozo
 */
public class LayerBuilderDialog extends JDialog {

	private static final String NETWORK_TITLE = "name";
	private static final Integer LAYER1 = 0;
	private static final Integer LAYER2 = 1;
	private static final Integer CONNECTOR = 2;

	private static final String[] COLUMN_NAMES = { "Layer 1", "Layer 2",
			"Connector Networks" };

	/*
	 * Mandatory parameters
	 */
	private CyNetworkManager manager;
	MultiLayerNetworkBuilder builder;

	private DefaultListModel availableNetworkListModel;
	private DefaultListModel layeredNetworkListModel;

	private Map<String, Long> title2IdMap;

	private LayerConnectionTableModel layerConnectionTableModel;
	private NetworkNameTableCellRenderer networkNameTableCellRenderer;

	private JComboBox comboBoxEditor;

	/**
	 * Creates new form NewJDialog
	 * 
	 * @param targetNetworks
	 */

	public LayerBuilderDialog(Frame parent, boolean modal,
			CyNetworkManager manager, Set<CyNetwork> targetNetworks,
			MultiLayerNetworkBuilder builder) {
		super(parent, modal);
		this.manager = manager;
		this.builder = builder;

		this.layerConnectionTableModel = new LayerConnectionTableModel(
				COLUMN_NAMES);
		this.networkNameTableCellRenderer = new NetworkNameTableCellRenderer(
				manager);

		title2IdMap = new HashMap<String, Long>();
		buildListModels();
		initComponents();

		this.availableNetworkList.setModel(availableNetworkListModel);
		this.layeredNetworkList.setModel(layeredNetworkListModel);

		this.layerConnectionTable.setModel(layerConnectionTableModel);
		this.layerConnectionTable.setDefaultRenderer(Object.class,
				networkNameTableCellRenderer);
		this.layerConnectionTable.getTableHeader().setReorderingAllowed(false);
		this.comboBoxEditor = new JComboBox();
		comboBoxEditor.addItem("Undefined");
		layerConnectionTable.getColumn("Connector Networks").setCellEditor(
				new DefaultCellEditor(comboBoxEditor));
	}

	private void buildListModels() {
		this.availableNetworkListModel = new DefaultListModel();
		final Set<CyNetwork> availableNetworks = manager.getNetworkSet();

		String title = null;
		for (CyNetwork cyNetwork : availableNetworks) {
			title = cyNetwork.attrs().get(NETWORK_TITLE, String.class);
			availableNetworkListModel.addElement(title);
			title2IdMap.put(title, cyNetwork.getSUID());
		}

		layeredNetworkListModel = new DefaultListModel();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		titlePanel = new javax.swing.JPanel();
		titleLabel = new javax.swing.JLabel();
		defineLayerPanel = new javax.swing.JPanel();
		layeredNetworkPanel = new javax.swing.JPanel();
		layeredNetworkScrollPane = new javax.swing.JScrollPane();

		// layeredNetworkList = new javax.swing.JList();
		layeredNetworkList = new ReorderableJList();

		availableNetworkPanel = new javax.swing.JPanel();
		availableNetworkScrollPane = new javax.swing.JScrollPane();
		availableNetworkList = new javax.swing.JList();
		addAllAvailableNetworkButton = new javax.swing.JButton();
		addSelectedAvailableNetworkButton = new javax.swing.JButton();
		removeSelectedIntegratedNetworkButton = new javax.swing.JButton();
		removeAllIntegratedNetworkButton = new javax.swing.JButton();
		layerOrderPanel = new javax.swing.JPanel();
		layerOrderScrollPane = new javax.swing.JScrollPane();
		layerConnectionTable = new javax.swing.JTable();
		optionButton = new javax.swing.JButton();
		generateIntegratedNetworkButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

		titlePanel.setBackground(new java.awt.Color(255, 255, 255));

		titleLabel.setText("3D Layer Generator");

		org.jdesktop.layout.GroupLayout TitlePanelLayout = new org.jdesktop.layout.GroupLayout(
				titlePanel);
		titlePanel.setLayout(TitlePanelLayout);
		TitlePanelLayout
				.setHorizontalGroup(TitlePanelLayout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								TitlePanelLayout
										.createSequentialGroup()
										.addContainerGap()
										.add(
												titleLabel,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												303,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
										.addContainerGap(250, Short.MAX_VALUE)));
		TitlePanelLayout.setVerticalGroup(TitlePanelLayout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(
				TitlePanelLayout.createSequentialGroup().addContainerGap().add(
						titleLabel,
						org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 39,
						Short.MAX_VALUE).addContainerGap()));

		defineLayerPanel.setBorder(javax.swing.BorderFactory
				.createTitledBorder("Define Layers"));

		layeredNetworkPanel.setBackground(new java.awt.Color(255, 255, 255));
		layeredNetworkPanel.setBorder(javax.swing.BorderFactory
				.createTitledBorder("Integrated Networks"));

		layeredNetworkList.setModel(new javax.swing.AbstractListModel() {
			String[] strings = {};

			public int getSize() {
				return strings.length;
			}

			public Object getElementAt(int i) {
				return strings[i];
			}
		});
		layeredNetworkScrollPane.setViewportView(layeredNetworkList);

		org.jdesktop.layout.GroupLayout IntegratedNetworkPanelLayout = new org.jdesktop.layout.GroupLayout(
				layeredNetworkPanel);
		layeredNetworkPanel.setLayout(IntegratedNetworkPanelLayout);
		IntegratedNetworkPanelLayout
				.setHorizontalGroup(IntegratedNetworkPanelLayout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								IntegratedNetworkPanelLayout
										.createSequentialGroup()
										.addContainerGap()
										.add(
												layeredNetworkScrollPane,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												173, Short.MAX_VALUE)
										.addContainerGap()));
		IntegratedNetworkPanelLayout
				.setVerticalGroup(IntegratedNetworkPanelLayout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								IntegratedNetworkPanelLayout
										.createSequentialGroup()
										.add(
												layeredNetworkScrollPane,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												186,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
										.addContainerGap(8, Short.MAX_VALUE)));

		availableNetworkPanel.setBackground(new java.awt.Color(255, 255, 255));
		availableNetworkPanel.setBorder(javax.swing.BorderFactory
				.createTitledBorder("Available Networks"));

		availableNetworkScrollPane.setViewportView(availableNetworkList);

		org.jdesktop.layout.GroupLayout AvailableNetworkPanelLayout = new org.jdesktop.layout.GroupLayout(
				availableNetworkPanel);
		availableNetworkPanel.setLayout(AvailableNetworkPanelLayout);
		AvailableNetworkPanelLayout
				.setHorizontalGroup(AvailableNetworkPanelLayout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								AvailableNetworkPanelLayout
										.createSequentialGroup()
										.addContainerGap()
										.add(
												availableNetworkScrollPane,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												159,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
										.addContainerGap(
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)));
		AvailableNetworkPanelLayout
				.setVerticalGroup(AvailableNetworkPanelLayout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								AvailableNetworkPanelLayout
										.createSequentialGroup()
										.add(
												availableNetworkScrollPane,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												181, Short.MAX_VALUE)
										.addContainerGap()));

		addAllAvailableNetworkButton.setText(">>");
		addAllAvailableNetworkButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						addAllAvailableNetworkButtonActionPerformed(evt);
					}
				});

		addSelectedAvailableNetworkButton.setText(">");
		addSelectedAvailableNetworkButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						addSelectedAvailableNetworkButtonActionPerformed(evt);
					}
				});

		removeSelectedIntegratedNetworkButton.setText("<");
		removeSelectedIntegratedNetworkButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						removeSelectedIntegratedNetworkButtonActionPerformed(evt);
					}
				});

		removeAllIntegratedNetworkButton.setText("<<");
		removeAllIntegratedNetworkButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						removeAllIntegratedNetworkButtonActionPerformed(evt);
					}
				});

		org.jdesktop.layout.GroupLayout DefineLayerPanelLayout = new org.jdesktop.layout.GroupLayout(
				defineLayerPanel);
		defineLayerPanel.setLayout(DefineLayerPanelLayout);
		DefineLayerPanelLayout
				.setHorizontalGroup(DefineLayerPanelLayout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								DefineLayerPanelLayout
										.createSequentialGroup()
										.add(231, 231, 231)
										.add(
												DefineLayerPanelLayout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.TRAILING)
														.add(
																addAllAvailableNetworkButton,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																77,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
														.add(
																addSelectedAvailableNetworkButton,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																77,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
														.add(
																removeSelectedIntegratedNetworkButton,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																77,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
														.add(
																removeAllIntegratedNetworkButton,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																77,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
										.add(18, 18, 18)
										.add(
												layeredNetworkPanel,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
										.addContainerGap(22, Short.MAX_VALUE))
						.add(
								DefineLayerPanelLayout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.LEADING)
										.add(
												DefineLayerPanelLayout
														.createSequentialGroup()
														.add(22, 22, 22)
														.add(
																availableNetworkPanel,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
														.addContainerGap(340,
																Short.MAX_VALUE))));
		DefineLayerPanelLayout
				.setVerticalGroup(DefineLayerPanelLayout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								DefineLayerPanelLayout
										.createSequentialGroup()
										.add(
												DefineLayerPanelLayout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(
																DefineLayerPanelLayout
																		.createSequentialGroup()
																		.add(
																				48,
																				48,
																				48)
																		.add(
																				addAllAvailableNetworkButton)
																		.addPreferredGap(
																				org.jdesktop.layout.LayoutStyle.RELATED)
																		.add(
																				addSelectedAvailableNetworkButton)
																		.add(
																				43,
																				43,
																				43)
																		.add(
																				removeSelectedIntegratedNetworkButton)
																		.addPreferredGap(
																				org.jdesktop.layout.LayoutStyle.RELATED)
																		.add(
																				removeAllIntegratedNetworkButton))
														.add(
																DefineLayerPanelLayout
																		.createSequentialGroup()
																		.add(
																				11,
																				11,
																				11)
																		.add(
																				layeredNetworkPanel,
																				org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																				218,
																				Short.MAX_VALUE)))
										.addContainerGap())
						.add(
								DefineLayerPanelLayout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.LEADING)
										.add(
												DefineLayerPanelLayout
														.createSequentialGroup()
														.addContainerGap()
														.add(
																availableNetworkPanel,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
														.addContainerGap(
																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE))));

		layerOrderPanel.setBorder(javax.swing.BorderFactory
				.createTitledBorder("Define Layer Order"));

		DefaultCellEditor cellEditor = new DefaultCellEditor(
				new ComboCellRenderer(layeredNetworkListModel));
		// ComboCellRenderer layerOrderTableRenderer = new ComboCellRenderer();
		// layerOrderTable.getColumnModel().getColumn(0).setCellRenderer(
		// layerOrderTableRenderer);

		layerOrderScrollPane.setViewportView(layerConnectionTable);

		org.jdesktop.layout.GroupLayout LayerOrderPanelLayout = new org.jdesktop.layout.GroupLayout(
				layerOrderPanel);
		layerOrderPanel.setLayout(LayerOrderPanelLayout);
		LayerOrderPanelLayout
				.setHorizontalGroup(LayerOrderPanelLayout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								LayerOrderPanelLayout
										.createSequentialGroup()
										.addContainerGap()
										.add(
												layerOrderScrollPane,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												531, Short.MAX_VALUE)
										.addContainerGap()));
		LayerOrderPanelLayout.setVerticalGroup(LayerOrderPanelLayout
				.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(
						LayerOrderPanelLayout.createSequentialGroup().add(
								layerOrderScrollPane,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
								99,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
								.addContainerGap(14, Short.MAX_VALUE)));

		optionButton.setText("Options");
		optionButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				optionButtonActionPerformed(evt);
			}
		});

		generateIntegratedNetworkButton.setText("Generate");
		generateIntegratedNetworkButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						generateIntegratedNetworkButtonActionPerformed(evt);
					}
				});

		cancelButton.setText("Cancel");
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelButtonActionPerformed(evt);
			}
		});

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(titlePanel,
				org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
				org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.add(defineLayerPanel,
						org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
						org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
						Short.MAX_VALUE).add(layerOrderPanel,
						org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
						org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
						Short.MAX_VALUE).add(
						layout.createSequentialGroup().add(20, 20, 20).add(
								optionButton).addPreferredGap(
								org.jdesktop.layout.LayoutStyle.RELATED, 226,
								Short.MAX_VALUE).add(
								generateIntegratedNetworkButton)
								.add(32, 32, 32).add(cancelButton).add(39, 39,
										39)));
		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								layout
										.createSequentialGroup()
										.add(
												titlePanel,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(
												defineLayerPanel,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.UNRELATED)
										.add(
												layerOrderPanel,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED,
												13, Short.MAX_VALUE)
										.add(
												layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.BASELINE)
														.add(optionButton)
														.add(
																generateIntegratedNetworkButton)
														.add(cancelButton))
										.addContainerGap()));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_CancelButtonActionPerformed
		this.dispose();
	}// GEN-LAST:event_CancelButtonActionPerformed

	private void generateIntegratedNetworkButtonActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_GenerateIntegratedNetworkButtonActionPerformed

		List<CyNetwork> layers = new ArrayList<CyNetwork>();
		List<CyNetwork> connectors = new ArrayList<CyNetwork>();

		// System.out.println(title2IdMap.get(layeredNetworkListModel
		// .getElementAt(0)));
		// System.out.println(title2IdMap.get(layeredNetworkListModel
		// .getElementAt(1)));
		// System.out.println(title2IdMap.get(layeredNetworkListModel
		// .getElementAt(2)));

		// System.out.println(manager.getNetwork(title2IdMap
		// .get(layeredNetworkListModel.getElementAt(0))));
		// System.out.println(manager.getNetwork(title2IdMap
		// .get(layeredNetworkListModel.getElementAt(1))));
		// System.out.println(manager.getNetwork(title2IdMap
		// .get(layeredNetworkListModel.getElementAt(2))));

		layers.add(manager.getNetwork(title2IdMap.get(layeredNetworkListModel
				.getElementAt(0))));

		connectors.add(manager.getNetwork(title2IdMap
				.get(layeredNetworkListModel.getElementAt(1))));

		layers.add(manager.getNetwork(title2IdMap.get(layeredNetworkListModel
				.getElementAt(2))));

		// Setup
		builder.setSourceNetworks(layers, connectors);
		manager.addNetwork(builder.buildLayeredNetwork());

		// for (CyNode cyNode : builder.buildLayeredNetwork().getNodeList()) {
		// System.out.println(cyNode.attrs().get("name", String.class));
		// }

		//
		// if (builder.buildLayeredNetwork() != null) {
		// System.out.println(builder.buildLayeredNetwork().getEdgeCount());
		// System.out.println(builder.buildLayeredNetwork().getNodeCount());
		// }

		// System.out.println(builder.buildLayeredNetwork());

		// manager.addNetwork(builder.buildLayeredNetwork());

		// BuildMultilayerNetworkTask task = new BuildMultilayerNetworkTask(
		// manager, builder);

		// Run

	}// GEN-LAST:event_GenerateIntegratedNetworkButtonActionPerformed

	private void optionButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_OptionButtonActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_OptionButtonActionPerformed

	private void addAllAvailableNetworkButtonActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_MoveAllAvailableNetworkButtonActionPerformed

		// Move available networks to layer list
		for (int i = 0; i < availableNetworkListModel.size(); i++)
			layeredNetworkListModel
					.addElement(availableNetworkListModel.get(i));

		// Remove them from the available network list
		availableNetworkListModel.clear();

		// If only one network, return.
		if (layeredNetworkListModel.size() < 2)
			return;

		layerConnectionTableModel.clearAllRow();
		comboBoxEditor.removeAllItems();
		comboBoxEditor.addItem("Undefined");

		// Build table if necessary
		for (int i = 0; i < layeredNetworkListModel.size() - 1; i++) {

			final Long[] layerConnectionRow = new Long[layerConnectionTable
					.getColumnCount()];

			// These two columns represents a layer
			layerConnectionRow[LAYER1] = title2IdMap
					.get(layeredNetworkListModel.get(i));
			layerConnectionRow[LAYER2] = title2IdMap
					.get(layeredNetworkListModel.get(i + 1));

			// By default, no connector is available.
			layerConnectionRow[CONNECTOR] = null;

			// Add this row to the table
			layerConnectionTableModel.addRow(layerConnectionRow);
		}

		layerConnectionTable.repaint();

	}// GEN-LAST:event_MoveAllAvailableNetworkButtonActionPerformed

	private void addSelectedAvailableNetworkButtonActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_MoveSelectedAvailableNetworkButtonActionPerformed

		// move list content
		int[] index = availableNetworkList.getSelectedIndices();

		for (int i = 0; i < index.length; i++) {
			layeredNetworkListModel.addElement(availableNetworkListModel
					.getElementAt(index[i]));
			// availableNetworkListModel.removeElementAt(index[i]);
		}

		for (int i = index.length - 1; i >= 0; i--) {
			availableNetworkListModel.removeElementAt(index[i]);
		}

		availableNetworkList.clearSelection();

		layerConnectionTableModel.clearAllRow();

		if (layeredNetworkListModel.size() > 1) {
			for (int i = 0; i < layeredNetworkListModel.size() - 1; i++) {
				Long[] layerConnectionRow = new Long[layerConnectionTableModel
						.getColumnCount()];
				layerConnectionRow[LAYER1] = title2IdMap
						.get(layeredNetworkListModel.get(i));
				layerConnectionRow[LAYER2] = title2IdMap
						.get(layeredNetworkListModel.get(i + 1));
				if (availableNetworkListModel.size() > 0) {
					layerConnectionRow[CONNECTOR] = title2IdMap
							.get(availableNetworkListModel.get(0));
				}
				layerConnectionTableModel.addRow(layerConnectionRow);
			}

			if (availableNetworkListModel.size() > 0) {
				comboBoxEditor.removeAllItems();
				comboBoxEditor.addItem("Undefined");
				for (int i = 0; i < availableNetworkListModel.size(); i++) {
					comboBoxEditor.addItem(availableNetworkListModel.get(i));
				}
			} else {
				comboBoxEditor.removeAllItems();
				comboBoxEditor.addItem("Undefined");
			}

		}

		layerConnectionTable.repaint();

	}// GEN-LAST:event_MoveSelectedAvailableNetworkButtonActionPerformed

	private void removeSelectedIntegratedNetworkButtonActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_MoveSelectedIntegratedNetworkButtonActionPerformed

		// move list content
		int[] index = layeredNetworkList.getSelectedIndices();
		for (int i = 0; i < index.length; i++) {
			availableNetworkListModel.addElement(layeredNetworkListModel
					.getElementAt(index[i]));
			// layeredNetworkListModel.removeElementAt(index[i]);
		}

		for (int i = index.length - 1; i >= 0; i--) {
			layeredNetworkListModel.removeElementAt(index[i]);
		}

		layeredNetworkList.clearSelection();

		layerConnectionTableModel.clearAllRow();

		if (layeredNetworkListModel.size() > 1) {
			for (int i = 0; i < layeredNetworkListModel.size() - 1; i++) {
				Long[] layerConnectionRow = new Long[layerConnectionTableModel
						.getColumnCount()];
				layerConnectionRow[LAYER1] = title2IdMap
						.get(layeredNetworkListModel.get(i));
				layerConnectionRow[LAYER2] = title2IdMap
						.get(layeredNetworkListModel.get(i + 1));
				if (availableNetworkListModel.size() > 0) {
					layerConnectionRow[CONNECTOR] = title2IdMap
							.get(availableNetworkListModel.get(0));
				}
				layerConnectionTableModel.addRow(layerConnectionRow);
			}

			// if (availableNetworkListModel.size() > 0) {
			//				
			// }
		}

		layerConnectionTable.repaint();

	}// GEN-LAST:event_MoveSelectedIntegratedNetworkButtonActionPerformed

	private void removeAllIntegratedNetworkButtonActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_MoveAllIntegratedNetworkButtonActionPerformed

		Enumeration<?> layeredNetworks = layeredNetworkListModel.elements();

		while (layeredNetworks.hasMoreElements()) {
			availableNetworkListModel.addElement(layeredNetworks.nextElement());
		}

		layeredNetworkListModel.clear();
		layerConnectionTableModel.clearAllRow();
		layerConnectionTable.repaint();

	}// GEN-LAST:event_MoveAllIntegratedNetworkButtonActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JList availableNetworkList;
	private javax.swing.JPanel availableNetworkPanel;
	private javax.swing.JScrollPane availableNetworkScrollPane;
	private javax.swing.JButton cancelButton;
	private javax.swing.JPanel defineLayerPanel;
	private javax.swing.JButton generateIntegratedNetworkButton;

	// private javax.swing.JList layeredNetworkList;
	private ReorderableJList layeredNetworkList;

	private javax.swing.JPanel layeredNetworkPanel;
	private javax.swing.JScrollPane layeredNetworkScrollPane;
	private javax.swing.JPanel layerOrderPanel;
	private javax.swing.JScrollPane layerOrderScrollPane;
	private javax.swing.JTable layerConnectionTable;
	private javax.swing.JButton addAllAvailableNetworkButton;
	private javax.swing.JButton removeAllIntegratedNetworkButton;
	private javax.swing.JButton addSelectedAvailableNetworkButton;
	private javax.swing.JButton removeSelectedIntegratedNetworkButton;
	private javax.swing.JButton optionButton;
	private javax.swing.JLabel titleLabel;
	private javax.swing.JPanel titlePanel;

	// End of variables declaration//GEN-END:variables

}
