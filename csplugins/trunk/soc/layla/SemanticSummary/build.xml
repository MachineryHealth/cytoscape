<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="semantic_summary" default="all">

    <!-- 
	********************************
	* TO DEFINE PATH TO CYTOSCAPE: *
	********************************
	- Either set an environment variable called CYTOSCAPE_HOME 
	  pointing to your Cytoscape 2.6 installation
	
	- or place a file called "semantic_summary.properties" in the same directory as this build.xml 
	  file that contains a line like this (choose one depending on your platform and adjust to the 
	  actual installation directory and the version you are using):

	  Apple:
		CYTOSCAPE_HOME=/Applications/Cytoscape_v2.6.3
	  Linux:
		CYTOSCAPE_HOME=/usr/local/Cytoscape_v2.6.3
	  Windows:
		CYTOSCAPE_HOME=C:/Program Files/Cytoscape-v2.6.3
	
	(cytoscape.jar and lib/*jar are needed for compiling the plugin) 
    -->

	<property file="semantic_summary.properties" />
	<property file="plugin.props" />
	
	<property environment="env" />
	<condition property="CYTOSCAPE_HOME" value="${env.CYTOSCAPE_HOME}" else="C:/Program Files/Cytoscape-v2.6.3" >
		<available file="${env.CYTOSCAPE_HOME}/cytoscape.jar" />
	</condition>
	
	<condition property="releaseSuffix" value="-${pluginReleaseSuffix}"  else="">
		<and>
			<isset property="pluginReleaseSuffix" />
			<not>
				<equals arg1="${pluginReleaseSuffix}" arg2="" trim="true"/>
			</not>
		</and>
	</condition>
	
	<echo message="Using Cytoscape in ${CYTOSCAPE_HOME}" />

	<!-- Uncomment the following property if no tests compilation is needed -->
	<!-- 
	<property name="skip.tests" value="true"/>
	-->

	<!-- Compiler options -->

	<property name="compiler.debug" value="on"/>
	<property name="compiler.generate.no.warnings" value="off"/>
	<property name="compiler.args" value=""/>
	<property name="compiler.max.memory" value="128m"/>
	<patternset id="ignored.files">
		<exclude name="**/CVS/**"/>
		<exclude name="**/SCCS/**"/>
		<exclude name="**/RCS/**"/>
		<exclude name="**/rcs/**"/>
		<exclude name="**/.DS_Store/**"/>
		<exclude name="**/.svn/**"/>
	</patternset>
	<patternset id="compiler.resources">
		<include name="**/?*.properties"/>
		<include name="**/?*.xml"/>
		<include name="**/?*.gif"/>
		<include name="**/?*.png"/>
		<include name="**/?*.jpeg"/>
		<include name="**/?*.jpg"/>
		<include name="**/?*.html"/>
		<include name="**/?*.dtd"/>
		<include name="**/?*.tld"/>
		<exclude name="**/?*.ai"/>
		<exclude name="**/?*.AI"/>
	</patternset>

	<!-- Application Server Libraries -->

	<!-- Modules -->

	<!-- Module semantic_summary -->

	<dirname property="module.semantic_summary.basedir" file="${ant.file}"/>

	<property name="compiler.args.semantic_summary" value="${compiler.args}"/>

	<property name="semantic_summary.output.dir" value="${module.semantic_summary.basedir}/classes"/>
	<property name="semantic_summary.jars.dir" value="${module.semantic_summary.basedir}/jars"/>
	<property name="semantic_summary.testoutput.dir" value="${module.semantic_summary.basedir}/classes"/>
	<property name="semantic_summary.bin_release.dir" value="${module.semantic_summary.basedir}/release_bin"/>
	<property name="semantic_summary.src_release_root.dir" value="${module.semantic_summary.basedir}/release_src"/>

	<path id="semantic_summary.module.bootclasspath">
		<!-- Paths to be included in compilation bootclasspath -->
	</path>

	<path id="semantic_summary.module.classpath">
		<pathelement location="${CYTOSCAPE_HOME}/cytoscape.jar" />
		<fileset dir="${CYTOSCAPE_HOME}/lib">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<patternset id="excluded.from.module.semantic_summary">
		<patternset refid="ignored.files"/>
	</patternset>

	<patternset id="excluded.from.compilation.semantic_summary">
		<patternset refid="excluded.from.module.semantic_summary"/>
	</patternset>

	<path id="semantic_summary.module.sourcepath">
		<dirset dir="${module.semantic_summary.basedir}">
			<include name="src"/>
		</dirset>
	</path>

	<!--	Targets:
		all ~~~~~~~~+ init
					+ clean	~~~~~~~~~~~~~~~~+ clean.module.semantic_summary
					|						
					+ compile ~~~~~~~~~~~~~~+ compile.module.semantic_summary	~~~~+ compile.module.semantic_summary.production
					|															|
					|															+ compile.module.semantic_summary.tests
					+ buildID
					|
					+ jars
				
		release ~~~~+ binary_release (jars)
					|
					+ source_release
		-->
	
	<target name="compile.module.semantic_summary" depends="compile.module.semantic_summary.production,compile.module.semantic_summary.tests" description="Compile module semantic_summary"/>

	<target name="compile.module.semantic_summary.production" description="Compile module semantic_summary; production classes">
		<mkdir dir="${semantic_summary.output.dir}"/>
		<javac 	destdir="${semantic_summary.output.dir}" 
				debug="${compiler.debug}" 
				nowarn="${compiler.generate.no.warnings}" 
				memoryMaximumSize="${compiler.max.memory}" 
				source="1.5" 
				target="1.5" 
				fork="true">
			<compilerarg line="${compiler.args.semantic_summary}"/>
			<bootclasspath refid="semantic_summary.module.bootclasspath"/>
			<classpath refid="semantic_summary.module.classpath"/>
			<src refid="semantic_summary.module.sourcepath"/>
		</javac>

		<copy todir="${semantic_summary.output.dir}">
			<fileset dir="${module.semantic_summary.basedir}/src">
				<patternset refid="compiler.resources"/>
				<type type="file"/>
			</fileset>
		</copy>
	</target>

	<target name="compile.module.semantic_summary.tests" depends="compile.module.semantic_summary.production" description="compile module semantic_summary; test classes" unless="skip.tests"/>

	<target name="clean.module.semantic_summary" description="cleanup module">
		<delete dir="${semantic_summary.output.dir}"/>
		<delete dir="${semantic_summary.jars.dir}"/>
		<delete dir="${semantic_summary.testoutput.dir}"/>
		<delete dir="${semantic_summary.bin_release.dir}"/>
		<delete dir="${semantic_summary.src_release_root.dir}"/>
	</target>

	<target name="init" description="Build initialization">
		<!-- Perform any build initialization in this target -->
	</target>

	<target name="jars" depends="compile.module.semantic_summary.production, buildID" description="Creates jar file for semantic_summary">
		<copy file="${module.semantic_summary.basedir}/plugin.props" todir="${semantic_summary.output.dir}/cytoscape/csplugins/semanticsummary/" />
		<property file="${semantic_summary.output.dir}/cytoscape/csplugins/semanticsummary/buildID.props" />
		<echo message="Build: ${build.number} from SVN: ${svn.revision} by: ${build.user}@${build.host} at: ${build.timestamp}" />

		<mkdir dir="${semantic_summary.jars.dir}"/>
		<jar jarfile="${semantic_summary.jars.dir}/SemanticSummary.jar" basedir="${semantic_summary.output.dir}" >
			<manifest>
				<attribute name="Cytoscape-Plugin" value="cytoscape.csplugins.semanticsummary.Semantic_Summary_Plugin"/>
			</manifest>
		</jar>
	</target>

	<target name="buildID" description="write to buildID.props">
		<!-- increment build number -->
		<buildnumber />

		<!-- read build number -->
		<property file="build.number" />

		<!-- get svn version -->
		<exec executable="svnversion" outputproperty="svn.revision" failifexecutionfails="false" errorproperty="">
			<arg value="${module.semantic_summary.basedir}" />
		</exec>

		<!-- get ${USER} and ${HOSTNAME} depending on OS -->
		<property environment="env" />
		<exec executable="whoami"   osfamily="unix" failifexecutionfails="false" outputproperty="env.USERNAME"/>
		<property name="build.user" value="${env.USERNAME}" />
		<exec executable="hostname" osfamily="unix" failifexecutionfails="false" outputproperty="env.COMPUTERNAME"/>
		<property name="build.host" value="${env.COMPUTERNAME}"/>

		<!-- write to property file -->
		<propertyfile file="${semantic_summary.output.dir}/org/baderlab/csplugins/enrichmentmap/buildID.props"  comment="EnrichmentMapPlugin build ID">
			<entry  key="build.number"	value="${build.number}" />
			<entry  key="svn.revision"	value="${svn.revision}"/>
			<entry  key="build.user"  	value="${build.user}"/>
			<entry  key="build.host"  	value="${build.host}"/>
			<entry  key="build.timestamp"	type="date"	value="now"	pattern="yyyy/MM/dd HH:mm:ss Z (z)"/>
		</propertyfile>
	</target>

	<target name="release_source"                description="Make a source-code release">
		<property name="semantic_summary.src_release.dir" value="${semantic_summary.src_release_root.dir}/EnrichmentMapPlugin_v${pluginVersion}"/>
		<mkdir dir="${semantic_summary.src_release_root.dir}"/>
		<mkdir dir="${semantic_summary.src_release.dir}"/>
		<mkdir dir="${semantic_summary.src_release.dir}/src"/>
		<copy todir="${semantic_summary.src_release.dir}/src">
			<fileset dir="${module.semantic_summary.basedir}/src">
				<patternset refid="ignored.files"/>
				<type type="file"/>
			</fileset>
		</copy>
		
		<mkdir dir="${semantic_summary.src_release.dir}/resources"/>
		<copy todir="${semantic_summary.src_release.dir}/resources">
			<fileset dir="${module.semantic_summary.basedir}/resources">
				<patternset refid="ignored.files"/>
				<type type="file"/>
			</fileset>
		</copy>
		
		<copy file="build.xml"                 todir ="${semantic_summary.src_release.dir}" />
 		<copy file="plugin.props"              todir ="${semantic_summary.src_release.dir}" />
		<copy file="doc/LICENSE.txt"		   todir ="${semantic_summary.src_release.dir}" />
		<copy file="doc/README.TXT"            todir ="${semantic_summary.src_release.dir}" />
<!--	<copy file="semantic_summary.properties" todir ="${semantic_summary.src_release.dir}" />	-->
		<tar destfile="SemanticSummaryPlugin_v${pluginVersion}${releaseSuffix}_src.tar.gz" basedir="${semantic_summary.src_release_root.dir}" 
			 compression="gzip" longfile="gnu" />
		<zip destfile="SemanticSummaryPlugin_v${pluginVersion}${releaseSuffix}_src.zip"    basedir="${semantic_summary.src_release_root.dir}" />
	</target>
	
	<target name="release_binary" depends="jars" description="Make a binary-release">
		<mkdir dir="${semantic_summary.bin_release.dir}"/>
		<copy file="${semantic_summary.jars.dir}/SemanticSummary.jar" todir  ="${semantic_summary.bin_release.dir}" />
		<copy file="doc/LICENSE.txt"                     		  todir  ="${semantic_summary.bin_release.dir}" />
		<copy file="doc/README.TXT"                               todir  ="${semantic_summary.bin_release.dir}" />
		<zip destfile="SemanticSummaryPlugin_v${pluginVersion}${releaseSuffix}.zip" basedir="${semantic_summary.bin_release.dir}" />
	</target>
		
	<target name="release" depends="release_binary, release_source" description="Make a release"/>

	<target name="compile" depends="compile.module.semantic_summary" description="Compile all"/>

	<target name="clean" depends="clean.module.semantic_summary" description="cleanup all"/>

	<target name="all" depends="init, clean, compile.module.semantic_summary, buildID, jars" description="build all"/>

</project>




