package cytoscape.visual.customgraphic.ui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.io.IOException;
import java.net.URL;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.ListModel;
import javax.swing.SwingConstants;

import org.jdesktop.swingx.JXImagePanel;
import org.jdesktop.swingx.JXList;
import org.jdesktop.swingx.JXPanel;

import cytoscape.render.stateful.CustomGraphic;
import cytoscape.visual.customgraphic.CustomGraphicsPool;
import cytoscape.visual.customgraphic.CyCustomGraphics;
import cytoscape.visual.customgraphic.GradientRectangleCustomGraphics;
import cytoscape.visual.customgraphic.URLImageCustomGraphics;

/**
 * Display available
 * @author kono
 */
public class CustomGraphicsBrowser extends JXList {

	private DefaultListModel model;

	/** Creates new form CustomGraphicsBrowserPanel 
	 * @throws IOException */
	public CustomGraphicsBrowser() throws IOException {
		initComponents();

		CustomGraphicsPool.addGraphics("Image 1", new URLImageCustomGraphics("http://icons2.iconarchive.com/icons/conor-egan-wylie/iphone/128/Finder-icon.png"));
		CustomGraphicsPool.addGraphics("Image 2", new URLImageCustomGraphics("http://www.kegg.jp/Fig/compound/C00221.gif"));
		CustomGraphicsPool.addGraphics("Image 3", new URLImageCustomGraphics("https://s3.amazonaws.com/twitter_production/profile_images/419770006/cat1.jpg"));
		GradientRectangleCustomGraphics grad = new GradientRectangleCustomGraphics();
		CustomGraphicsPool.addGraphics(grad.getDisplayName(), grad);
		
		addImages();
	}


	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {
		this.setMaximumSize(new Dimension(300, 10000));
		this.setBackground(new java.awt.Color(255, 255, 255));
		model = new DefaultListModel();
		this.setModel(model);
		this.setCellRenderer(new ButtonCellRenderer());
		this.setDropTarget(new URLDropTarget());

	}// </editor-fold>

	private void addImages() {
		final Collection<CyCustomGraphics<?>> graphics = CustomGraphicsPool
				.getAll();

		for (CyCustomGraphics<?> cg : graphics) {
			model.addElement(cg);

		}
	}

	static DataFlavor urlFlavor;
	static {
		try {
			urlFlavor = new DataFlavor(
					"application/x-java-url; class=java.net.URL");
		} catch (ClassNotFoundException cnfe) {
			cnfe.printStackTrace();
		}
	}

	class URLDropTarget extends DropTarget {

		public void drop(DropTargetDropEvent dtde) {
			System.out.println("drop");
			dtde.acceptDrop(DnDConstants.ACTION_COPY_OR_MOVE);
			Transferable trans = dtde.getTransferable();
			dumpDataFlavors(trans);
			boolean gotData = false;
			// try for application/x-java-url flavor
			try {
				if (trans.isDataFlavorSupported(urlFlavor)) {
					URL url = (URL) trans.getTransferData(urlFlavor);
					System.out.println("got URL " + url);
					// Add image
					addCustomGraphics(url.toString());
					gotData = true;
				} else if (trans.isDataFlavorSupported(DataFlavor.stringFlavor)) {
					String s = (String) trans
							.getTransferData(DataFlavor.stringFlavor);
					System.out.println("!!!!!!got text " + s);
					gotData = true;
				}
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				System.out.println("gotData is " + gotData);
				dtde.dropComplete(gotData);
			}
		}

		private void dumpDataFlavors(Transferable trans) {
			System.out.println("Flavors:");
			DataFlavor[] flavors = trans.getTransferDataFlavors();
			for (int i = 0; i < flavors.length; i++) {
				System.out.println("*** " + i + ": " + flavors[i]);
			}
		}
		
		private void addCustomGraphics(final String urlStr) {
			CyCustomGraphics<CustomGraphic> cg = null;
			try {
				cg =  new URLImageCustomGraphics(urlStr);
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			CustomGraphicsPool.addGraphics(cg.getDisplayName(), cg);
			model.addElement(cg);
		}
	}

	class ButtonCellRenderer extends JPanel implements ListCellRenderer {
		
		private static final int ICON_SIZE = 130;
		
		
		private Map<CyCustomGraphics<?>, Component> panelMap;

		public ButtonCellRenderer() {
			panelMap = new HashMap<CyCustomGraphics<?>, Component>();

		}

		@Override
		public Component getListCellRendererComponent(JList list, Object value,
				int index, boolean isSelected, boolean cellHasFocus) {

			JPanel target = null;
			if (value != null && value instanceof CyCustomGraphics<?>) {
				CyCustomGraphics<?> cg = (CyCustomGraphics<?>) value;
				target = (JPanel) panelMap.get(cg);
				if (target == null) {
					target = createImage(cg);
					panelMap.put(cg, target);
				}

			}

			if (isSelected) {
				target.setBorder(BorderFactory.createEtchedBorder());
			} else
				target.setBorder(null);

			return target;
		}

		private JPanel createImage(final CyCustomGraphics<?> cg) {
			final Image image = cg.getImage();
			if(image == null) return this;

			JXImagePanel imagePanel = new JXImagePanel();
			imagePanel.setPreferredSize(new Dimension(ICON_SIZE, ICON_SIZE));
			
			final int imageH = image.getHeight(null);
			if(imageH >= ICON_SIZE)
				imagePanel.setStyle(JXImagePanel.Style.SCALED_KEEP_ASPECT_RATIO);
			else
				imagePanel.setStyle(JXImagePanel.Style.CENTERED);
			
			imagePanel.setImage(image);
			imagePanel.setBackground(Color.white);
			final JXPanel buttonPanel = new JXPanel();
			buttonPanel.setLayout(new BorderLayout());
			final JLabel label = new JLabel(cg.getDisplayName());
			label.setHorizontalTextPosition(SwingConstants.CENTER);
			label.setVerticalTextPosition(SwingConstants.CENTER);
			label.setHorizontalAlignment(SwingConstants.CENTER);
			label.setPreferredSize(new Dimension(100, 20));
			buttonPanel.add(label, BorderLayout.SOUTH);
			buttonPanel.add(imagePanel, BorderLayout.CENTER);
			buttonPanel.setBackground(Color.WHITE);
			buttonPanel.setPreferredSize(new Dimension(200, 150));
			return buttonPanel;
		}
	}

}
