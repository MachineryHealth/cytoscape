package cytoscape.visual.customgraphic.ui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.ListModel;
import javax.swing.SwingConstants;

import org.jdesktop.swingx.JXImagePanel;
import org.jdesktop.swingx.JXList;
import org.jdesktop.swingx.JXPanel;

import cytoscape.CytoscapeInit;
import cytoscape.render.stateful.CustomGraphic;
import cytoscape.visual.customgraphic.CustomGraphicsPool;
import cytoscape.visual.customgraphic.CyCustomGraphics;
import cytoscape.visual.customgraphic.GradientRectangleCustomGraphics;
import cytoscape.visual.customgraphic.URLImageCustomGraphics;

/**
 * Display available
 * 
 * @author kono
 */
public class CustomGraphicsBrowser extends JXList {

	private DefaultListModel model;

	/**
	 * Creates new form CustomGraphicsBrowserPanel
	 * 
	 * @throws IOException
	 */
	public CustomGraphicsBrowser() throws IOException {
		initComponents();
		File dir = CytoscapeInit.getMRUD();
		CustomGraphicsPool
				.addGraphics(
						"Image 1",
						new URLImageCustomGraphics(
								"http://icons2.iconarchive.com/icons/conor-egan-wylie/iphone/128/Finder-icon.png"));
		CustomGraphicsPool.addGraphics("Image 2", new URLImageCustomGraphics(
				"http://www.kegg.jp/Fig/compound/C00221.gif"));
		CustomGraphicsPool
				.addGraphics(
						"Image 3",
						new URLImageCustomGraphics(
								"https://s3.amazonaws.com/twitter_production/profile_images/419770006/cat1.jpg"));
		GradientRectangleCustomGraphics grad = new GradientRectangleCustomGraphics();
		CustomGraphicsPool.addGraphics(grad.getDisplayName(), grad);

		addImages();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {
		this.setMaximumSize(new Dimension(300, 10000));
		this.setBackground(new java.awt.Color(255, 255, 255));
		model = new DefaultListModel();
		this.setModel(model);
		this.setCellRenderer(new CustomGraphicsCellRenderer());
		this.setDropTarget(new URLDropTarget());

	}// </editor-fold>

	private void addImages() {
		final Collection<CyCustomGraphics<?>> graphics = CustomGraphicsPool
				.getAll();

		for (CyCustomGraphics<?> cg : graphics) {
			model.addElement(cg);

		}
	}

	protected void addCustomGraphics(final String urlStr) {
		CyCustomGraphics<CustomGraphic> cg = null;
		try {
			cg = new URLImageCustomGraphics(urlStr);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		if (cg != null) {
			CustomGraphicsPool.addGraphics(cg.getDisplayName(), cg);
			model.addElement(cg);
		}
	}

	static DataFlavor urlFlavor;
	static {
		try {
			urlFlavor = new DataFlavor(
					"application/x-java-url; class=java.net.URL");
		} catch (ClassNotFoundException cnfe) {
			cnfe.printStackTrace();
		}
	}

	class URLDropTarget extends DropTarget {

		public void drop(DropTargetDropEvent dtde) {

			try {
				Transferable trans = dtde.getTransferable();
				if (trans.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
					dtde.acceptDrop(DnDConstants.ACTION_COPY_OR_MOVE);
					Object obj = trans
							.getTransferData(DataFlavor.javaFileListFlavor);
					java.util.List<File> fileList = (java.util.List<File>) obj;

					for (File file : fileList) {
						System.out.println("GOT file list@@@@@@@@@@@@@@@ "
								+ file.toString());

					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}

			System.out.println("drop");
			dtde.acceptDrop(DnDConstants.ACTION_COPY_OR_MOVE);
			Transferable trans = dtde.getTransferable();
			dumpDataFlavors(trans);
			boolean gotData = false;
			// try for application/x-java-url flavor
			try {
				if (trans.isDataFlavorSupported(urlFlavor)) {
					URL url = (URL) trans.getTransferData(urlFlavor);
					System.out.println("got URL " + url);
					// Add image
					addCustomGraphics(url.toString());
					gotData = true;
				} else if (trans.isDataFlavorSupported(DataFlavor.stringFlavor)) {
					String s = (String) trans
							.getTransferData(DataFlavor.stringFlavor);
					System.out.println("!!!!!!got text " + s);
					gotData = true;
				}
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				System.out.println("gotData is " + gotData);
				dtde.dropComplete(gotData);
			}
		}

		private void dumpDataFlavors(Transferable trans) {
			System.out.println("Flavors:");
			DataFlavor[] flavors = trans.getTransferDataFlavors();
			for (int i = 0; i < flavors.length; i++) {
				System.out.println("*** " + i + ": " + flavors[i]);
			}
		}

	}

	
}
