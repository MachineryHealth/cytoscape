
	<project name="filters" default="jar" basedir=".">

		<!-- Cytoscape directory -->
	    <property name="cytoscape.dir" value="../../cytoscape"/>
	  	<property name="cytoscape.lib.dir" value="${cytoscape.dir}/lib"/>
	    <property name="cytoscape.plugin.dir" value="${cytoscape.dir}/plugins/core"/>

	    <!-- The build directory -->
	    <!-- All files generated by ant go here -->
	    <property name="build.dir"    value="${basedir}/build"/>

	    <!-- The java source directory-->
	    <property name="src.dir"      value="${basedir}/src"/>
	    <property name="test.src.dir" value="${basedir}/tests"/>

	    <!-- The lib directory -->
	    <!-- Contains all third-party JAR files, required for compilation -->
	    <property name="lib.dir"       value="lib"/>

	    <!-- The dist directory -->
	    <property name="dist.dir"    value="${basedir}/plugins"/>

	    <!-- The resources directory -->
	    <property name="resources.dir"    value="${basedir}/resources"/>

		<!-- The unit test reports directory -->
	    <property name="junit.report.dir"    value="${build.dir}/junit-reports"/>
		
		<!--  ============ Compilation Control Options ======================= -->
	  	<property name="compile.debug"       value="true"/>
	  	<property name="compile.deprecation" value="true"/>
	  	<property name="compile.optimize"    value="true"/>

		<!-- ==================== Compilation Classpath ====================== -->
	    <!--
	        NB:  Compilation classpath assumes that main cytoscape project is checked out,
	        and compiled.
	    -->
	    <path id="compile.classpath">
			<pathelement path="${build.dir}/classes"/>
	    	<fileset dir="${build.dir}/classes">
	       		 	<include name="**/*.class"/>
			</fileset>

	    	<fileset dir="${cytoscape.dir}">
	             <include name="cytoscape.jar"/>
	        </fileset>
	    	<fileset dir="${cytoscape.lib.dir}">
	       		<include name="giny.jar"/>
       		 	<include name="cytoscape-task.jar"/>
       		 	<include name="violinstrings-1.0.2.jar"/>
	    		<include name="junit.jar"/>
	    	</fileset>
	    	<fileset dir="${cytoscape.plugin.dir}">
	       		 	<include name="quick_find.jar"/>
			</fileset>
	  	</path>

	    <!-- ==================== Prepare Target ============================== -->
	    <target name="prepare" description="Create needed directories">
	        <!-- Create build directories as needed -->
	        <mkdir  dir="${build.dir}"/>
	        <mkdir  dir="${build.dir}/classes"/>
	        <mkdir  dir="${dist.dir}"/>

	        <!--  Copy over images / icons -->
	        <copy todir="${build.dir}/classes">
	          <fileset dir="${src.dir}">
	            <include name="**/*.gif"/>
		    <include name="**/*.png"/>
	          </fileset>
	        </copy>
	    </target>

	    <!-- ==================== Compile Target ==============================-->
	    <target name="compile" depends="prepare"
	        description="Compiles all Java source files">
	        <javac srcdir="${src.dir}"
			    source="1.5"
	            destdir="${build.dir}/classes"
	            debug="${compile.debug}"
	            deprecation="${compile.deprecation}"
	            optimize="${compile.optimize}">
	        <classpath refid="compile.classpath"/>
	        </javac>
	    </target>

	    <!-- ==================== Jar Target ============================== -->
	    <target name="jar" depends="compile"
	            description="Creates Plugin Jar:  filters.jar">
	    	<copy todir="${build.dir}/classes/cytoscape/filters" file="${resources.dir}/plugin.props"/>
	    	<jar destfile="${dist.dir}/filters.jar">
	        <manifest>
	         <attribute name="Cytoscape-Plugin" value="cytoscape.filters.FilterPlugin"/>
	        </manifest>
	         <fileset dir="${build.dir}/classes" includes ="**" excludes="**/*Test.class"/>
	         </jar>
	    </target>

	    <!-- ==================== Compile-tests Target ==============================-->
	    <target name="compile-tests" depends="jar"
	        description="Compiles all Java test source files">
	        <javac srcdir="${test.src.dir}"
			    source="1.5"
	            destdir="${build.dir}/classes"
	            debug="${compile.debug}"
	            deprecation="${compile.deprecation}"
	            optimize="${compile.optimize}">
	        <classpath refid="compile.classpath"/>
	        </javac>
	    </target>


	    <!-- ==================== JUnit Test Target =========================== -->
	    <target name="test" description="Runs all JUnit tests" depends="compile-tests">
	    	<echo>
                **********************************
                Running all unit tests individally
                ***********************************
	    	</echo>
	    	<mkdir dir="${junit.report.dir}" />
	    	
	        <junit printsummary="yes" fork="yes" haltonfailure="no">
	        	<classpath refid="compile.classpath"/>
	        	<formatter type="plain" usefile="true"/>
				<formatter type="xml" usefile="true" />
				<batchtest fork="yes" 
				           todir="${junit.report.dir}" 
					   failureProperty="junit.test.failure">
					<fileset dir="${build.dir}/classes" 
					         includes="**/*Test.class" 
						 excludes="**/AllTests.class" />
				</batchtest>	        	
	        </junit>
	    	
			<junitreport todir="${junit.report.dir}">
				<fileset dir="${junit.report.dir}">
					<include name="TEST-*.xml" />
				</fileset>
				<report format="frames" todir="${junit.report.dir}" />
			</junitreport>

			<fail message="JUnit Tests failed! Check ${junit.report.dir}/index.html for details." 
			      if="junit.test.failure" />	    	
			      
	    </target>
		
		  <!-- =================================================================== -->
		  <!-- Build jar and run unit test                                                      -->
		  <!-- =================================================================== -->
		  <target name="all" description="Creates filters.jar and run all JUnit tests" depends="jar, test"/>

	    <!-- ==================== Clean Target =============================== -->
	    <target name="clean"
	        description="Deletes all build files and starts fresh">
	        <delete dir="${build.dir}"/>
	        <delete file="${dist.dir}/filters.jar"/>
	    </target>
		
	</project>
