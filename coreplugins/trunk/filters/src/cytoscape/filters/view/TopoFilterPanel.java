/**
 * 
 */
package cytoscape.filters.view;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.util.Vector;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.JTextField;
import cytoscape.Cytoscape;
import cytoscape.filters.AdvancedSetting;
import cytoscape.filters.CompositeFilter;
import cytoscape.filters.TopologyFilter;
import cytoscape.filters.view.FilterMainPanel.FilterRenderer;
import cytoscape.filters.view.FilterMainPanel.MyCytoPanelListener;
import cytoscape.view.cytopanels.CytoPanelListener;
import cytoscape.filters.FilterPlugin;


/**
 * @author Peng
 *
 */
public class TopoFilterPanel extends JPanel implements ActionListener, ItemListener {

	//private Vector<CompositeFilter> allFilterVect = null;
	private TopologyFilter theFilter;
 
    /** Creates new form TopoFilterPanel */
    public TopoFilterPanel(TopologyFilter pFilter) {
    	theFilter = pFilter;
        initComponents();

        buildCMBmodel();

        if (theFilter.getPassFilter() == null) {
			cmbPassFilter.setSelectedIndex(0);			
		}
		else {
			cmbPassFilter.setSelectedItem(theFilter.getPassFilter());
		}
		cmbPassFilter.setRenderer(new FilterRenderer());
		
		//add EventListeners
		tfDistance.addActionListener(this);
		tfMinNeighbors.addActionListener(this);

		MyKeyListener l = new MyKeyListener();
		tfDistance.addKeyListener(l);
		tfMinNeighbors.addKeyListener(l);
		
		cmbPassFilter.addItemListener(this);
				
		//Make sure bits will be calculated for the first time
		pFilter.childChanged();
    }
    
    public void addParentPanelListener() {
		// Listen to the visible event from FilterSettingPanel
    	// To syn Filters in cmbPassFilter
		MyComponentAdapter cmpAdpt = new MyComponentAdapter();
		this.getParent().getParent().addComponentListener(cmpAdpt);
    }
    
    //Each time, the FilterSettingPanel become visible, rebuild the model for the cmbPassFilter
	class MyComponentAdapter extends ComponentAdapter {
		public void componentShown(ComponentEvent e) {
			buildCMBmodel();
		}
	}
	
	
	private void buildCMBmodel() {
        // Create an empty filter, add to the top of the filter list in the combobox
		CompositeFilter emptyFilter = new CompositeFilter("None");

		Vector<CompositeFilter> tmpVect = new Vector<CompositeFilter>();
		tmpVect.add(emptyFilter);
		tmpVect.addAll(FilterPlugin.getAllFilterVect());
		
		DefaultComboBoxModel theModel = new DefaultComboBoxModel(tmpVect);
		
		cmbPassFilter.setModel(theModel);

	}
	
	public void actionPerformed(ActionEvent e) {
		Object _actionObject = e.getSource();
		
		System.out.println("Entering TopoFIlterPanel.actionPerformed() ...");
		
		// handle Button events
		if (_actionObject instanceof JTextField) {
			JTextField _tfObj = (JTextField) _actionObject;
			if (_tfObj == tfMinNeighbors) {
				int _neighbors = (new Integer(tfMinNeighbors.getText())).intValue();
				theFilter.setMinNeighbors(_neighbors);
			}
			else if (_tfObj == tfDistance) {
				int _distance = (new Integer(tfDistance.getText())).intValue();
				theFilter.setDistance(_distance);				
			}
		}
		System.out.println(theFilter.toString());
		
	}
	
	public void itemStateChanged(ItemEvent e) {
		Object source = e.getSource();
		
		System.out.println("Entering TopoFilterPanel.itemStateChanged() ...");
		
		if (source instanceof JComboBox) {
			theFilter.setPassFilter((CompositeFilter) cmbPassFilter.getSelectedItem());
			
			System.out.println("theFilter = "+ theFilter.toString());
		}
	}
	
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lbSelectNodeEdge = new javax.swing.JLabel();
        lbWithAtLeast = new javax.swing.JLabel();
        tfMinNeighbors = new javax.swing.JTextField();
        lbNeighbors = new javax.swing.JLabel();
        lbWithinDistance = new javax.swing.JLabel();
        tfDistance = new javax.swing.JTextField();
        lbThatPassTheFilter = new javax.swing.JLabel();
        cmbPassFilter = new javax.swing.JComboBox();
        lbPlaceHolder = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        lbSelectNodeEdge.setText("Select node");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        add(lbSelectNodeEdge, gridBagConstraints);

        lbWithAtLeast.setText("with at least");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        add(lbWithAtLeast, gridBagConstraints);

        tfMinNeighbors.setText("1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        add(tfMinNeighbors, gridBagConstraints);

        lbNeighbors.setText("neighbors");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        add(lbNeighbors, gridBagConstraints);

        lbWithinDistance.setText("within distance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        add(lbWithinDistance, gridBagConstraints);

        tfDistance.setText("1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        add(tfDistance, gridBagConstraints);

        lbThatPassTheFilter.setText("that pass the filter");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        add(lbThatPassTheFilter, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        add(cmbPassFilter, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(lbPlaceHolder, gridBagConstraints);

    }// </editor-fold>
    
    
    // Variables declaration - do not modify
    private javax.swing.JComboBox cmbPassFilter;
    private javax.swing.JLabel lbNeighbors;
    private javax.swing.JLabel lbPlaceHolder;
    private javax.swing.JLabel lbSelectNodeEdge;
    private javax.swing.JLabel lbThatPassTheFilter;
    private javax.swing.JLabel lbWithAtLeast;
    private javax.swing.JLabel lbWithinDistance;
    private javax.swing.JTextField tfDistance;
    private javax.swing.JTextField tfMinNeighbors;
    // End of variables declaration
	
    
	class FilterRenderer extends JLabel implements ListCellRenderer {
		public FilterRenderer() {
			setOpaque(true);
		}

		public Component getListCellRendererComponent(JList list, Object value,
				int index, boolean isSelected, boolean cellHasFocus) {
			if (value != null) {
				if (value == theFilter) {
					setText(""); 
				}
				//else if (value.toString().equalsIgnoreCase("None")) {
				//	setText("None");
				//}
				else {
					CompositeFilter tmpFilter = (CompositeFilter) value;
					setText(tmpFilter.getName());					
				}
			}
			else { // value == null
				setText(""); 
			}

			return this;
		}
	}// FilterRenderer

	class MyKeyListener extends KeyAdapter {
		
		public void keyReleased(KeyEvent e)  {
			Object _actionObject = e.getSource();

			if (tfMinNeighbors.getText().trim().equalsIgnoreCase("") || 
					tfDistance.getText().trim().equalsIgnoreCase("")) {
				return;
			}	
			if (_actionObject instanceof JTextField) {
				JTextField _tfObj = (JTextField) _actionObject;
				if (_tfObj == tfMinNeighbors) {

					//Validate the data 
					//try {
			    	//	Integer.parseInt(tfMinNeighbors.getText());
			    	//} 
			    	//catch (NumberFormatException nfe) {			    		
					//	JOptionPane.showMessageDialog((Component)e.getSource(), "Invalid values", "Warning", JOptionPane.ERROR_MESSAGE);
			    	//	return;
			    	//}

					int _neighbors = (new Integer(tfMinNeighbors.getText())).intValue();
					theFilter.setMinNeighbors(_neighbors);
				}
				else if (_tfObj == tfDistance) {
					int _distance = (new Integer(tfDistance.getText())).intValue();
					theFilter.setDistance(_distance);				
				}
			}
		}
	}
}
