package cytoscape.filters.view;

import java.awt.Component;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Vector;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;

import cytoscape.filters.CompositeFilter;
import cytoscape.filters.FilterPlugin;
import cytoscape.filters.InteractionFilter;
import cytoscape.filters.EdgeInteractionFilter;
import cytoscape.filters.NodeInteractionFilter;
import cytoscape.filters.util.FilterUtil;

public class InteractionFilterPanel extends JPanel implements ItemListener{

	private InteractionFilter theFilter;

    /** Creates new form InteractionFilterPanel */
    public InteractionFilterPanel(InteractionFilter pFilter) {
    	theFilter = pFilter;

        initComponents();
        if (pFilter instanceof EdgeInteractionFilter) {
        	changeLabelText();
        }
        
        buildCMBmodel();

		cmbPassFilter.setRenderer(new FilterRenderer());
		
		//add EventListeners
		chkSource.addItemListener(this);
		chkTarget.addItemListener(this);
		
		cmbPassFilter.addItemListener(this);
				
		//Make sure bits will be calculated for the first time
		pFilter.childChanged();

		// Recovery initial values
        chkSource.setSelected(pFilter.isSorceChecked());        	
        chkTarget.setSelected(pFilter.isTargetChecked());        	
    }
    
    private void changeLabelText() {
    	lbSelectionType.setText("Select Edges");
    	lbNodeType.setText("with a node");
    	lbAboveFilter.setText("which pass the filter");
    }
    
    public void addParentPanelListener() {
		// Listen to the visible event from FilterSettingPanel
    	// To syn Filters in cmbPassFilter
		MyComponentAdapter cmpAdpt = new MyComponentAdapter();
		this.getParent().getParent().addComponentListener(cmpAdpt);
    }
    
    //Each time, the FilterSettingPanel become visible, rebuild the model for the cmbPassFilter
	class MyComponentAdapter extends ComponentAdapter {
		public void componentShown(ComponentEvent e) {
			buildCMBmodel();
		}
	}

	private void buildCMBmodel() {
        // Create an empty filter, add to the top of the filter list in the combobox
		//CompositeFilter emptyFilter = new CompositeFilter("None");

		Vector<CompositeFilter> tmpVect = new Vector<CompositeFilter>();
		//tmpVect.add(emptyFilter);
		tmpVect.addAll(FilterPlugin.getAllFilterVect());
		
		DefaultComboBoxModel theModel = new DefaultComboBoxModel(tmpVect);
		
		cmbPassFilter.setModel(theModel);
        if (theFilter.getPassFilter() != null) {
        	cmbPassFilter.setSelectedIndex(0);			
			cmbPassFilter.setSelectedItem(theFilter.getPassFilter());
		}
        else { // thePassFilter == null, it's a brand new filter
        	theFilter.setPassFilter((CompositeFilter)theModel.getSelectedItem());
        }
	}
    
    	
	public void itemStateChanged(ItemEvent e) {
		Object source = e.getSource();		
		//System.out.println("Entering InteractionFilterPanel.itemStateChanged() ...");
		
		Object soureObj= e.getSource();
		if (soureObj instanceof JCheckBox) {
			JCheckBox theCheckBox = (JCheckBox) soureObj;
			
			if (theCheckBox == chkSource) {
				theFilter.setSorceChecked(chkSource.isSelected());
			}
			if (theCheckBox == chkTarget) {
				theFilter.setTargetChecked(chkTarget.isSelected());
			}	
		}
		
		if (source instanceof JComboBox) {
			theFilter.setPassFilter((CompositeFilter) cmbPassFilter.getSelectedItem());
		}
		theFilter.childChanged();
		
		// If network size is less than pre-defined threshold, apply theFilter automatically 
		if (FilterUtil.isDynamicFilter(theFilter)) {
			FilterUtil.doSelection(theFilter);					
		}
	}

	
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">                          
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lbSelectionType = new javax.swing.JLabel();
        lbNodeType = new javax.swing.JLabel();
        chkSource = new javax.swing.JCheckBox();
        chkTarget = new javax.swing.JCheckBox();
        lbAboveFilter = new javax.swing.JLabel();
        cmbPassFilter = new javax.swing.JComboBox();
        lbPlaceHolder = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        lbSelectionType.setText("Select Nodes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        add(lbSelectionType, gridBagConstraints);

        lbNodeType.setText("which are the");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        add(lbNodeType, gridBagConstraints);

        chkSource.setText("Source");
        chkSource.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkSource.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        add(chkSource, gridBagConstraints);

        chkTarget.setText("Target");
        chkTarget.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkTarget.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        add(chkTarget, gridBagConstraints);

        lbAboveFilter.setText("of at least one edge which pass the filter");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        add(lbAboveFilter, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        add(cmbPassFilter, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(lbPlaceHolder, gridBagConstraints);

    }// </editor-fold>                        
    
    
    // Variables declaration - do not modify                     
    private javax.swing.JCheckBox chkSource;
    private javax.swing.JCheckBox chkTarget;
    private javax.swing.JComboBox cmbPassFilter;
    private javax.swing.JLabel lbAboveFilter;
    private javax.swing.JLabel lbNodeType;
    private javax.swing.JLabel lbPlaceHolder;
    private javax.swing.JLabel lbSelectionType;
    // End of variables declaration                   
	
    
	class FilterRenderer extends JLabel implements ListCellRenderer {
		public FilterRenderer() {
			setOpaque(true);
		}

		public Component getListCellRendererComponent(JList list, Object value,
				int index, boolean isSelected, boolean cellHasFocus) {
			
			if (value == null)  {
				setText(""); 
				return this;
			}
			
			//Ignore self
			if (value == theFilter) {
				setText(""); 

				return this;
			}

			//Display related filters only
			CompositeFilter tmpFilter = (CompositeFilter) value;
			if ((theFilter instanceof EdgeInteractionFilter && tmpFilter.getAdvancedSetting().isNodeChecked()) ||
					(theFilter instanceof NodeInteractionFilter && tmpFilter.getAdvancedSetting().isEdgeChecked())) {
				setText(tmpFilter.getName());											
			}
			else {
				setText("");
			}

			return this;
		}
	}// FilterRenderer

}
