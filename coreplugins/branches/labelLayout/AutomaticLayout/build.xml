<project name="layout" default="layout" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init-layout">
    <tstamp/>
    <property name="layout.Name" value="layout"/>
    <property name="layout.name" value="layout"/>
    <property name="layout.version" value="0.1"/>
    <property name="layout.year" value="2006"/>
    <property name="layout.jar" value="AutomaticLayout.jar"/>


    <echo message="Building ${layout.name} version ${layout.version}."/>

    <!-- Inheritable properties -->
    <property name="debug" value="on"/>
    <property name="optimize" value="off"/>
    <property name="deprecation" value="on"/>
    <property name="nowarn" value="true"/>
    <property name="fork" value="false"/>
    <property name="layout.root.dir" value="."/>
    <property name="cytoscape.dir" value="/Users/gerardohuck/Cytoscape"/>
    <property name="cytoscape.lib.dir" value="${cytoscape.dir}/lib"/>
    <property name="cytoscape.plugin.dir" value="${cytoscape.dir}/plugins/"/>
    <property name="csplugins.dir" value="./src/csplugins"/>

    <!-- Define the directories -->
    <property name="layout.root.dir" value="./"/>
    <property name="layout.src.dir" value="${layout.root.dir}/src"/>
    <property name="layout.lib.dir" value="${layout.root.dir}/lib"/>
    <property name="layout.classes.dir" value="${layout.root.dir}/classes"/>
    <property name="layout.javadoc.dir" value="${javadoc.dir}/layout"/>
    <property name="layout.resources.dir" value="${layout.root.dir}/resources"/>
    <property name="layout.manifest.dir" value="${layout.root.dir}/manifest"/>
    <property name="layout.packages" value="layout.*"/>
    <!-- Subdirectory for test reports -->
    <property name="layout.tests.reports.dir" value="${layout.root.dir}/reports/tests" />
    <property name="resources.dir" value="${layout.root.dir}/resources" />

    <!-- Define excludes for layout compile and javadoc -->
    <property name="layout.excludes" value="**/notyet/*"/>
    <property name="layout.tests.excludes" value="**/notyet/*"/>
    <property name="layout.packages.excludes" value="**.test.*,**.notyet.*"/>

    <path id="layout.project.class.path">
      <pathelement location="${cytoscape.dir}/cytoscape.jar"/>
      <pathelement location="/cellar/users/slotia/pre-coreplugins/LayoutCommon/LayoutCommon.jar"/>
      <fileset dir="${cytoscape.lib.dir}">
        <include name="**/*.jar"/>
      </fileset>
      <fileset dir="${layout.lib.dir}">
        <include name="**/*.jar"/>
      </fileset>
      <fileset dir="${cytoscape.plugin.dir}">
        <include name="**/*.jar"/>
      </fileset>
    </path>

    <!-- Define the junit class path - It needs to find what we just built -->
    <path id="junit.class.path" >
      <pathelement path="${project.class.path}/"/>
      <pathelement location="${test.jar}"/>

      <fileset dir="${lib.dir}">
        <include name="**/*.jar"/>
      </fileset>
    </path>

    <!-- Make sure tests is in the right place -->
    <condition property="tests.ok">
      <and>
        <available file="${tests.dir}" />
      </and>
    </condition>

  </target>

  <!-- =================================================================== -->
  <!-- Compiles the layout project                                           -->
  <!-- =================================================================== -->
  <target name="compile-layout" depends="init-layout"  >

   <echo message=" COMPILE layout "/>

    <mkdir dir="${layout.classes.dir}"/>
    <javac srcdir="${layout.src.dir}"
           excludes="${layout.excludes}"
           classpathref="layout.project.class.path"
           destdir="${layout.classes.dir}"
           debug="${debug}"
           nowarn="${nowarn}"
           deprecation="${deprecation}" 
           optimize="${optimize}"
		   source="1.5"
		   target="1.5"
           fork="${fork}">
<!--
      <compilerarg line="-Xlint:unchecked"/>
-->
	</javac>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the layout.jar file                                           -->
  <!-- =================================================================== -->
  <target name="layout" depends="compile-layout"  >
    <copy todir="${layout.classes.dir}/csplugins/layout" file="${resources.dir}/plugin.props"/>
    <jar destfile="${layout.jar}" manifest="${layout.manifest.dir}/layout.manifest">
      <fileset
        dir="${layout.classes.dir}"
        includes="**"/>
    </jar>
  </target>
  
  <!-- =================================================================== -->
  <!-- Copy jar file to Cytoscape plugin folder                            -->
  <!-- =================================================================== -->
  <target name="copy_jar" depends="test">
    <copy todir="${cytoscape.plugin.dir}/" file="${layout.root.dir}/${layout.jar}"/>
  </target>
  
  <!-- =================================================================== -->
  <!-- Build all jars                                                      -->
  <!-- =================================================================== -->
  <target name="all" depends="copy_jar"/>

  <!-- =================================================================== -->
  <!-- Clean up, get back to original state                                -->
  <!-- =================================================================== -->
  <target name="clean" depends="init-layout">
    <delete dir="${layout.classes.dir}"/>
    <delete file="${layout.jar}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the tests                                                  -->
  <!-- Note that this compilation occurs AFTER the distribution jar has    -->
  <!-- been created, so that the tests aren't distributed.                 -->
  <!-- =================================================================== -->
  <target name="compile-tests"
          depends="layout" 
          if="tests.ok">
    <javac srcdir="${tests.dir}"
           classpathref="junit.class.path"
           destdir="${build.dir}"
           debug="${debug}"
           deprecation="${deprecation}" 
           optimize="${optimize}"
           fork="${fork}">
      <compilerarg line="-Xlint:all -Xlint:-path"/>
    </javac>
    <echo message="Successfully ran compile-tests task!"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the project-tests.jar file                                  -->
  <!-- =================================================================== -->
  <target name="jar-tests"
          depends="compile-tests"
          if="tests.ok">
    <jar jarfile="${test.jar}"
         basedir="${build.dir}" >
    </jar>
    <echo message="Successfully ran jar-tests task!"/>
  </target>

  <!-- =================================================================== -->
  <!-- Runs the unit tests.                                                -->
  <!-- =================================================================== -->
  <target name="test"
          depends="jar-tests"
          if="tests.ok">
    <mkdir dir="${junit.log.dir}"/>
    <junit printsummary="yes"
           haltonfailure="no"
           maxmemory="256m" >
      <classpath refid="junit.class.path"/>
      <formatter type="plain" 
                 usefile="true" />
      <formatter type="xml" 
                 usefile="true" />
      <batchtest fork="yes" 
                 todir="${junit.log.dir}" 
                 failureProperty="junit.test.failure"
                 errorProperty="junit.test.failure">
        <fileset dir="${tests.dir}"
                 includes="**/*Test.java"
                 excludes="**/AllTests.java" />
      </batchtest>
    </junit>
    <mkdir dir="${junit.report.dir}"/>
    <junitreport todir="${junit.report.dir}">
      <fileset dir="${junit.log.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${junit.report.dir}"/>
    </junitreport>
    <fail message="TEST FAILURE!!! Details: ${junit.report.dir}/index.html"
          if="junit.test.failure"/>
    <echo message="Successfully ran test task!"/>
  </target>

</project>

<!-- End of file -->
